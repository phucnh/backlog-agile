
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PriorityDieRequest.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Agile.Entities.Validation;
#endregion

namespace Agile.Entities
{
	///<summary>
	/// An object representation of the 'tblPriorityDIERequest' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PriorityDieRequestBase : EntityBase, IPriorityDieRequest, IEntityId<PriorityDieRequestKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PriorityDieRequestEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PriorityDieRequestEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PriorityDieRequestEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<PriorityDieRequest> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PriorityDieRequestEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PriorityDieRequestEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PriorityDieRequestBase"/> instance.
		///</summary>
		public PriorityDieRequestBase()
		{
			this.entityData = new PriorityDieRequestEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PriorityDieRequestBase"/> instance.
		///</summary>
		///<param name="_priorityDieRequestName"></param>
		///<param name="_priorityDieRequestDescription"></param>
		///<param name="_color"></param>
		///<param name="_colorName"></param>
		///<param name="_priorityDieRequestOrder"></param>
		public PriorityDieRequestBase(System.String _priorityDieRequestName, System.String _priorityDieRequestDescription, 
			System.String _color, System.String _colorName, System.Int32? _priorityDieRequestOrder)
		{
			this.entityData = new PriorityDieRequestEntityData();
			this.backupData = null;

			this.PriorityDieRequestName = _priorityDieRequestName;
			this.PriorityDieRequestDescription = _priorityDieRequestDescription;
			this.Color = _color;
			this.ColorName = _colorName;
			this.PriorityDieRequestOrder = _priorityDieRequestOrder;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PriorityDieRequest"/> instance.
		///</summary>
		///<param name="_priorityDieRequestName"></param>
		///<param name="_priorityDieRequestDescription"></param>
		///<param name="_color"></param>
		///<param name="_colorName"></param>
		///<param name="_priorityDieRequestOrder"></param>
		public static PriorityDieRequest CreatePriorityDieRequest(System.String _priorityDieRequestName, System.String _priorityDieRequestDescription, 
			System.String _color, System.String _colorName, System.Int32? _priorityDieRequestOrder)
		{
			PriorityDieRequest newPriorityDieRequest = new PriorityDieRequest();
			newPriorityDieRequest.PriorityDieRequestName = _priorityDieRequestName;
			newPriorityDieRequest.PriorityDieRequestDescription = _priorityDieRequestDescription;
			newPriorityDieRequest.Color = _color;
			newPriorityDieRequest.ColorName = _colorName;
			newPriorityDieRequest.PriorityDieRequestOrder = _priorityDieRequestOrder;
			return newPriorityDieRequest;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PriorityDieRequestId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 PriorityDieRequestId
		{
			get
			{
				return this.entityData.PriorityDieRequestId; 
			}
			
			set
			{
				if (this.entityData.PriorityDieRequestId == value)
					return;
					
				OnColumnChanging(PriorityDieRequestColumn.PriorityDieRequestId, this.entityData.PriorityDieRequestId);
				this.entityData.PriorityDieRequestId = value;
				this.EntityId.PriorityDieRequestId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriorityDieRequestColumn.PriorityDieRequestId, this.entityData.PriorityDieRequestId);
				OnPropertyChanged("PriorityDieRequestId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriorityDieRequestName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String PriorityDieRequestName
		{
			get
			{
				return this.entityData.PriorityDieRequestName; 
			}
			
			set
			{
				if (this.entityData.PriorityDieRequestName == value)
					return;
					
				OnColumnChanging(PriorityDieRequestColumn.PriorityDieRequestName, this.entityData.PriorityDieRequestName);
				this.entityData.PriorityDieRequestName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriorityDieRequestColumn.PriorityDieRequestName, this.entityData.PriorityDieRequestName);
				OnPropertyChanged("PriorityDieRequestName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriorityDieRequestDescription property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String PriorityDieRequestDescription
		{
			get
			{
				return this.entityData.PriorityDieRequestDescription; 
			}
			
			set
			{
				if (this.entityData.PriorityDieRequestDescription == value)
					return;
					
				OnColumnChanging(PriorityDieRequestColumn.PriorityDieRequestDescription, this.entityData.PriorityDieRequestDescription);
				this.entityData.PriorityDieRequestDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriorityDieRequestColumn.PriorityDieRequestDescription, this.entityData.PriorityDieRequestDescription);
				OnPropertyChanged("PriorityDieRequestDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Color property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Color
		{
			get
			{
				return this.entityData.Color; 
			}
			
			set
			{
				if (this.entityData.Color == value)
					return;
					
				OnColumnChanging(PriorityDieRequestColumn.Color, this.entityData.Color);
				this.entityData.Color = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriorityDieRequestColumn.Color, this.entityData.Color);
				OnPropertyChanged("Color");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ColorName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String ColorName
		{
			get
			{
				return this.entityData.ColorName; 
			}
			
			set
			{
				if (this.entityData.ColorName == value)
					return;
					
				OnColumnChanging(PriorityDieRequestColumn.ColorName, this.entityData.ColorName);
				this.entityData.ColorName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriorityDieRequestColumn.ColorName, this.entityData.ColorName);
				OnPropertyChanged("ColorName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriorityDieRequestOrder property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriorityDieRequestOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PriorityDieRequestOrder
		{
			get
			{
				return this.entityData.PriorityDieRequestOrder; 
			}
			
			set
			{
				if (this.entityData.PriorityDieRequestOrder == value)
					return;
					
				OnColumnChanging(PriorityDieRequestColumn.PriorityDieRequestOrder, this.entityData.PriorityDieRequestOrder);
				this.entityData.PriorityDieRequestOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriorityDieRequestColumn.PriorityDieRequestOrder, this.entityData.PriorityDieRequestOrder);
				OnPropertyChanged("PriorityDieRequestOrder");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of DieRequest objects
		///	which are related to this object through the relation FK_tblDIERequest_tblPriorityDIERequest
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DieRequest> DieRequestCollection
		{
			get { return entityData.DieRequestCollection; }
			set { entityData.DieRequestCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PriorityDieRequestName", "Priority Die Request Name", 400));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Color", "Color", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ColorName", "Color Name", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblPriorityDIERequest"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PriorityDIERequestID", "PriorityDIERequestName", "PriorityDIERequestDescription", "Color", "ColorName", "PriorityDIERequestOrder"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PriorityDieRequestEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PriorityDieRequest) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PriorityDieRequest>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PriorityDieRequest);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PriorityDieRequest Entity 
		///</summary>
		protected virtual PriorityDieRequest Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			PriorityDieRequest copy = new PriorityDieRequest();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PriorityDieRequestId = this.PriorityDieRequestId;
				copy.PriorityDieRequestName = this.PriorityDieRequestName;
				copy.PriorityDieRequestDescription = this.PriorityDieRequestDescription;
				copy.Color = this.Color;
				copy.ColorName = this.ColorName;
				copy.PriorityDieRequestOrder = this.PriorityDieRequestOrder;
			
		
			//deep copy nested objects
			copy.DieRequestCollection = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed PriorityDieRequest Entity 
		///</summary>
		public virtual PriorityDieRequest Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed PriorityDieRequest Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PriorityDieRequest DeepCopy()
		{
			return EntityHelper.Clone<PriorityDieRequest>(this as PriorityDieRequest);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PriorityDieRequestEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PriorityDieRequestEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PriorityDieRequestEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PriorityDieRequestColumn column)
		{
			switch(column)
			{
					case PriorityDieRequestColumn.PriorityDieRequestId:
					return entityData.PriorityDieRequestId != _originalData.PriorityDieRequestId;
					case PriorityDieRequestColumn.PriorityDieRequestName:
					return entityData.PriorityDieRequestName != _originalData.PriorityDieRequestName;
					case PriorityDieRequestColumn.PriorityDieRequestDescription:
					return entityData.PriorityDieRequestDescription != _originalData.PriorityDieRequestDescription;
					case PriorityDieRequestColumn.Color:
					return entityData.Color != _originalData.Color;
					case PriorityDieRequestColumn.ColorName:
					return entityData.ColorName != _originalData.ColorName;
					case PriorityDieRequestColumn.PriorityDieRequestOrder:
					return entityData.PriorityDieRequestOrder != _originalData.PriorityDieRequestOrder;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PriorityDieRequestColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PriorityDieRequestId != _originalData.PriorityDieRequestId;
			result = result || entityData.PriorityDieRequestName != _originalData.PriorityDieRequestName;
			result = result || entityData.PriorityDieRequestDescription != _originalData.PriorityDieRequestDescription;
			result = result || entityData.Color != _originalData.Color;
			result = result || entityData.ColorName != _originalData.ColorName;
			result = result || entityData.PriorityDieRequestOrder != _originalData.PriorityDieRequestOrder;
			return result;
		}	
		
		///<summary>
		///  Returns a PriorityDieRequest Entity with the original data.
		///</summary>
		public PriorityDieRequest GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePriorityDieRequest(
				_originalData.PriorityDieRequestName,
				_originalData.PriorityDieRequestDescription,
				_originalData.Color,
				_originalData.ColorName,
				_originalData.PriorityDieRequestOrder
				);
				
			return (PriorityDieRequest)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PriorityDieRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PriorityDieRequestBase)
				return ValueEquals(this, (PriorityDieRequestBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PriorityDieRequestBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PriorityDieRequestId.GetHashCode() ^ 
					((this.PriorityDieRequestName == null) ? string.Empty : this.PriorityDieRequestName.ToString()).GetHashCode() ^ 
					((this.PriorityDieRequestDescription == null) ? string.Empty : this.PriorityDieRequestDescription.ToString()).GetHashCode() ^ 
					((this.Color == null) ? string.Empty : this.Color.ToString()).GetHashCode() ^ 
					((this.ColorName == null) ? string.Empty : this.ColorName.ToString()).GetHashCode() ^ 
					((this.PriorityDieRequestOrder == null) ? string.Empty : this.PriorityDieRequestOrder.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PriorityDieRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PriorityDieRequestBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PriorityDieRequestBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PriorityDieRequestBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PriorityDieRequestBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PriorityDieRequestBase Object1, PriorityDieRequestBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PriorityDieRequestId != Object2.PriorityDieRequestId)
				equal = false;
			if ( Object1.PriorityDieRequestName != null && Object2.PriorityDieRequestName != null )
			{
				if (Object1.PriorityDieRequestName != Object2.PriorityDieRequestName)
					equal = false;
			}
			else if (Object1.PriorityDieRequestName == null ^ Object2.PriorityDieRequestName == null )
			{
				equal = false;
			}
			if ( Object1.PriorityDieRequestDescription != null && Object2.PriorityDieRequestDescription != null )
			{
				if (Object1.PriorityDieRequestDescription != Object2.PriorityDieRequestDescription)
					equal = false;
			}
			else if (Object1.PriorityDieRequestDescription == null ^ Object2.PriorityDieRequestDescription == null )
			{
				equal = false;
			}
			if ( Object1.Color != null && Object2.Color != null )
			{
				if (Object1.Color != Object2.Color)
					equal = false;
			}
			else if (Object1.Color == null ^ Object2.Color == null )
			{
				equal = false;
			}
			if ( Object1.ColorName != null && Object2.ColorName != null )
			{
				if (Object1.ColorName != Object2.ColorName)
					equal = false;
			}
			else if (Object1.ColorName == null ^ Object2.ColorName == null )
			{
				equal = false;
			}
			if ( Object1.PriorityDieRequestOrder != null && Object2.PriorityDieRequestOrder != null )
			{
				if (Object1.PriorityDieRequestOrder != Object2.PriorityDieRequestOrder)
					equal = false;
			}
			else if (Object1.PriorityDieRequestOrder == null ^ Object2.PriorityDieRequestOrder == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PriorityDieRequestBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PriorityDieRequestComparer GetComparer()
        {
            return new PriorityDieRequestComparer();
        }
        */

        // Comparer delegates back to PriorityDieRequest
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PriorityDieRequest rhs, PriorityDieRequestColumn which)
        {
            switch (which)
            {
            	
            	
            	case PriorityDieRequestColumn.PriorityDieRequestId:
            		return this.PriorityDieRequestId.CompareTo(rhs.PriorityDieRequestId);
            		
            		                 
            	
            	
            	case PriorityDieRequestColumn.PriorityDieRequestName:
            		return this.PriorityDieRequestName.CompareTo(rhs.PriorityDieRequestName);
            		
            		                 
            	
            	
            	case PriorityDieRequestColumn.PriorityDieRequestDescription:
            		return this.PriorityDieRequestDescription.CompareTo(rhs.PriorityDieRequestDescription);
            		
            		                 
            	
            	
            	case PriorityDieRequestColumn.Color:
            		return this.Color.CompareTo(rhs.Color);
            		
            		                 
            	
            	
            	case PriorityDieRequestColumn.ColorName:
            		return this.ColorName.CompareTo(rhs.ColorName);
            		
            		                 
            	
            	
            	case PriorityDieRequestColumn.PriorityDieRequestOrder:
            		return this.PriorityDieRequestOrder.Value.CompareTo(rhs.PriorityDieRequestOrder.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PriorityDieRequestKey> Members
		
		// member variable for the EntityId property
		private PriorityDieRequestKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PriorityDieRequestKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PriorityDieRequestKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("PriorityDieRequest")
					.Append("|").Append( this.PriorityDieRequestId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- PriorityDieRequestId: {0}{6}- PriorityDieRequestName: {1}{6}- PriorityDieRequestDescription: {2}{6}- Color: {3}{6}- ColorName: {4}{6}- PriorityDieRequestOrder: {5}{6}{8}", 
				this.PriorityDieRequestId,
				(this.PriorityDieRequestName == null) ? string.Empty : this.PriorityDieRequestName.ToString(),
				(this.PriorityDieRequestDescription == null) ? string.Empty : this.PriorityDieRequestDescription.ToString(),
				(this.Color == null) ? string.Empty : this.Color.ToString(),
				(this.ColorName == null) ? string.Empty : this.ColorName.ToString(),
				(this.PriorityDieRequestOrder == null) ? string.Empty : this.PriorityDieRequestOrder.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblPriorityDIERequest' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PriorityDieRequestEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PriorityDIERequestID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblPriorityDIERequest"</remarks>
		public System.Int32 PriorityDieRequestId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PriorityDIERequestName : 
		/// </summary>
		public System.String		  PriorityDieRequestName = null;
		
		/// <summary>
		/// PriorityDIERequestDescription : 
		/// </summary>
		public System.String		  PriorityDieRequestDescription = null;
		
		/// <summary>
		/// Color : 
		/// </summary>
		public System.String		  Color = null;
		
		/// <summary>
		/// ColorName : 
		/// </summary>
		public System.String		  ColorName = null;
		
		/// <summary>
		/// PriorityDIERequestOrder : 
		/// </summary>
		public System.Int32?		  PriorityDieRequestOrder = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region DieRequestCollection
		
		private TList<DieRequest> _dieRequestPriorityDieRequestId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dieRequestPriorityDieRequestId
		/// </summary>
		
		public TList<DieRequest> DieRequestCollection
		{
			get
			{
				if (_dieRequestPriorityDieRequestId == null)
				{
				_dieRequestPriorityDieRequestId = new TList<DieRequest>();
				}
	
				return _dieRequestPriorityDieRequestId;
			}
			set { _dieRequestPriorityDieRequestId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PriorityDieRequestEntityData _tmp = new PriorityDieRequestEntityData();
						
			_tmp.PriorityDieRequestId = this.PriorityDieRequestId;
			
			_tmp.PriorityDieRequestName = this.PriorityDieRequestName;
			_tmp.PriorityDieRequestDescription = this.PriorityDieRequestDescription;
			_tmp.Color = this.Color;
			_tmp.ColorName = this.ColorName;
			_tmp.PriorityDieRequestOrder = this.PriorityDieRequestOrder;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._dieRequestPriorityDieRequestId != null)
				_tmp.DieRequestCollection = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PriorityDieRequestEntityData _tmp = new PriorityDieRequestEntityData();
						
			_tmp.PriorityDieRequestId = this.PriorityDieRequestId;
			
			_tmp.PriorityDieRequestName = this.PriorityDieRequestName;
			_tmp.PriorityDieRequestDescription = this.PriorityDieRequestDescription;
			_tmp.Color = this.Color;
			_tmp.ColorName = this.ColorName;
			_tmp.PriorityDieRequestOrder = this.PriorityDieRequestOrder;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.DieRequestCollection = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PriorityDieRequestColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PriorityDieRequestColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PriorityDieRequestColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PriorityDieRequestColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PriorityDieRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PriorityDieRequestColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PriorityDieRequestEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PriorityDieRequestEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PriorityDieRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PriorityDieRequestColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PriorityDieRequestEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PriorityDieRequestEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PriorityDieRequestEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PriorityDieRequest"/> object.
	/// </remarks>
	public class PriorityDieRequestEventArgs : System.EventArgs
	{
		private PriorityDieRequestColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PriorityDieRequestEventArgs class.
		///</summary>
		public PriorityDieRequestEventArgs(PriorityDieRequestColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PriorityDieRequestEventArgs class.
		///</summary>
		public PriorityDieRequestEventArgs(PriorityDieRequestColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PriorityDieRequestColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PriorityDieRequestColumn" />
		public PriorityDieRequestColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all PriorityDieRequest related events.
	///</summary>
	public delegate void PriorityDieRequestEventHandler(object sender, PriorityDieRequestEventArgs e);
	
	#region PriorityDieRequestComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PriorityDieRequestComparer : System.Collections.Generic.IComparer<PriorityDieRequest>
	{
		PriorityDieRequestColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PriorityDieRequestComparer"/> class.
        /// </summary>
		public PriorityDieRequestComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PriorityDieRequestComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PriorityDieRequestComparer(PriorityDieRequestColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="PriorityDieRequest"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="PriorityDieRequest"/> to compare.</param>
        /// <param name="b">The second <c>PriorityDieRequest</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PriorityDieRequest a, PriorityDieRequest b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PriorityDieRequest entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PriorityDieRequest a, PriorityDieRequest b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PriorityDieRequestColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PriorityDieRequestKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PriorityDieRequest"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PriorityDieRequestKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PriorityDieRequestKey class.
		/// </summary>
		public PriorityDieRequestKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PriorityDieRequestKey class.
		/// </summary>
		public PriorityDieRequestKey(PriorityDieRequestBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PriorityDieRequestId = entity.PriorityDieRequestId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PriorityDieRequestKey class.
		/// </summary>
		public PriorityDieRequestKey(System.Int32 _priorityDieRequestId)
		{
			#region Init Properties

			this.PriorityDieRequestId = _priorityDieRequestId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PriorityDieRequestBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PriorityDieRequestBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PriorityDieRequestId property
		private System.Int32 _priorityDieRequestId;
		
		/// <summary>
		/// Gets or sets the PriorityDieRequestId property.
		/// </summary>
		public System.Int32 PriorityDieRequestId
		{
			get { return _priorityDieRequestId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PriorityDieRequestId = value;
				
				_priorityDieRequestId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PriorityDieRequestId = ( values["PriorityDieRequestId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["PriorityDieRequestId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PriorityDieRequestId", PriorityDieRequestId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PriorityDieRequestId: {0}{1}",
								PriorityDieRequestId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PriorityDieRequestColumn Enum
	
	/// <summary>
	/// Enumerate the PriorityDieRequest columns.
	/// </summary>
	[Serializable]
	public enum PriorityDieRequestColumn : int
	{
		/// <summary>
		/// PriorityDieRequestId : 
		/// </summary>
		[EnumTextValue("PriorityDIERequestID")]
		[ColumnEnum("PriorityDIERequestID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		PriorityDieRequestId = 1,
		/// <summary>
		/// PriorityDieRequestName : 
		/// </summary>
		[EnumTextValue("PriorityDIERequestName")]
		[ColumnEnum("PriorityDIERequestName", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		PriorityDieRequestName = 2,
		/// <summary>
		/// PriorityDieRequestDescription : 
		/// </summary>
		[EnumTextValue("PriorityDIERequestDescription")]
		[ColumnEnum("PriorityDIERequestDescription", typeof(System.String), System.Data.DbType.String, false, false, true)]
		PriorityDieRequestDescription = 3,
		/// <summary>
		/// Color : 
		/// </summary>
		[EnumTextValue("Color")]
		[ColumnEnum("Color", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 50)]
		Color = 4,
		/// <summary>
		/// ColorName : 
		/// </summary>
		[EnumTextValue("ColorName")]
		[ColumnEnum("ColorName", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		ColorName = 5,
		/// <summary>
		/// PriorityDieRequestOrder : 
		/// </summary>
		[EnumTextValue("PriorityDIERequestOrder")]
		[ColumnEnum("PriorityDIERequestOrder", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PriorityDieRequestOrder = 6
	}//End enum

	#endregion PriorityDieRequestColumn Enum

} // end namespace
