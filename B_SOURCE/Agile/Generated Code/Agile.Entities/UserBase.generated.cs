
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file User.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Agile.Entities.Validation;
#endregion

namespace Agile.Entities
{
	///<summary>
	/// An object representation of the 'tblUser' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class UserBase : EntityBase, IUser, IEntityId<UserKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private UserEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private UserEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private UserEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<User> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UserEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UserEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="UserBase"/> instance.
		///</summary>
		public UserBase()
		{
			this.entityData = new UserEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="UserBase"/> instance.
		///</summary>
		///<param name="_userName"></param>
		///<param name="_passWord"></param>
		///<param name="_qlnsId"></param>
		///<param name="_email"></param>
		///<param name="_employeeName"></param>
		///<param name="_remove"></param>
		///<param name="_isLoginSystem"></param>
		///<param name="_updateDate"></param>
		///<param name="_userUpdate"></param>
		///<param name="_pageDefaultLogin"></param>
		///<param name="_dateCreated"></param>
		///<param name="_dateRemoved"></param>
		///<param name="_isNoBody"></param>
		public UserBase(System.String _userName, System.String _passWord, System.Int32? _qlnsId, 
			System.String _email, System.String _employeeName, System.Boolean? _remove, System.Boolean? _isLoginSystem, 
			System.DateTime? _updateDate, System.Int32? _userUpdate, System.String _pageDefaultLogin, System.DateTime? _dateCreated, 
			System.DateTime? _dateRemoved, System.Boolean? _isNoBody)
		{
			this.entityData = new UserEntityData();
			this.backupData = null;

			this.UserName = _userName;
			this.PassWord = _passWord;
			this.QlnsId = _qlnsId;
			this.Email = _email;
			this.EmployeeName = _employeeName;
			this.Remove = _remove;
			this.IsLoginSystem = _isLoginSystem;
			this.UpdateDate = _updateDate;
			this.UserUpdate = _userUpdate;
			this.PageDefaultLogin = _pageDefaultLogin;
			this.DateCreated = _dateCreated;
			this.DateRemoved = _dateRemoved;
			this.IsNoBody = _isNoBody;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="User"/> instance.
		///</summary>
		///<param name="_userName"></param>
		///<param name="_passWord"></param>
		///<param name="_qlnsId"></param>
		///<param name="_email"></param>
		///<param name="_employeeName"></param>
		///<param name="_remove"></param>
		///<param name="_isLoginSystem"></param>
		///<param name="_updateDate"></param>
		///<param name="_userUpdate"></param>
		///<param name="_pageDefaultLogin"></param>
		///<param name="_dateCreated"></param>
		///<param name="_dateRemoved"></param>
		///<param name="_isNoBody"></param>
		public static User CreateUser(System.String _userName, System.String _passWord, System.Int32? _qlnsId, 
			System.String _email, System.String _employeeName, System.Boolean? _remove, System.Boolean? _isLoginSystem, 
			System.DateTime? _updateDate, System.Int32? _userUpdate, System.String _pageDefaultLogin, System.DateTime? _dateCreated, 
			System.DateTime? _dateRemoved, System.Boolean? _isNoBody)
		{
			User newUser = new User();
			newUser.UserName = _userName;
			newUser.PassWord = _passWord;
			newUser.QlnsId = _qlnsId;
			newUser.Email = _email;
			newUser.EmployeeName = _employeeName;
			newUser.Remove = _remove;
			newUser.IsLoginSystem = _isLoginSystem;
			newUser.UpdateDate = _updateDate;
			newUser.UserUpdate = _userUpdate;
			newUser.PageDefaultLogin = _pageDefaultLogin;
			newUser.DateCreated = _dateCreated;
			newUser.DateRemoved = _dateRemoved;
			newUser.IsNoBody = _isNoBody;
			return newUser;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(UserColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				this.EntityId.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(UserColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassWord property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String PassWord
		{
			get
			{
				return this.entityData.PassWord; 
			}
			
			set
			{
				if (this.entityData.PassWord == value)
					return;
					
				OnColumnChanging(UserColumn.PassWord, this.entityData.PassWord);
				this.entityData.PassWord = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.PassWord, this.entityData.PassWord);
				OnPropertyChanged("PassWord");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QlnsId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsQlnsIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? QlnsId
		{
			get
			{
				return this.entityData.QlnsId; 
			}
			
			set
			{
				if (this.entityData.QlnsId == value)
					return;
					
				OnColumnChanging(UserColumn.QlnsId, this.entityData.QlnsId);
				this.entityData.QlnsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.QlnsId, this.entityData.QlnsId);
				OnPropertyChanged("QlnsId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(UserColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmployeeName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String EmployeeName
		{
			get
			{
				return this.entityData.EmployeeName; 
			}
			
			set
			{
				if (this.entityData.EmployeeName == value)
					return;
					
				OnColumnChanging(UserColumn.EmployeeName, this.entityData.EmployeeName);
				this.entityData.EmployeeName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.EmployeeName, this.entityData.EmployeeName);
				OnPropertyChanged("EmployeeName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Remove property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsRemoveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Remove
		{
			get
			{
				return this.entityData.Remove; 
			}
			
			set
			{
				if (this.entityData.Remove == value)
					return;
					
				OnColumnChanging(UserColumn.Remove, this.entityData.Remove);
				this.entityData.Remove = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Remove, this.entityData.Remove);
				OnPropertyChanged("Remove");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLoginSystem property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsLoginSystemNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsLoginSystem
		{
			get
			{
				return this.entityData.IsLoginSystem; 
			}
			
			set
			{
				if (this.entityData.IsLoginSystem == value)
					return;
					
				OnColumnChanging(UserColumn.IsLoginSystem, this.entityData.IsLoginSystem);
				this.entityData.IsLoginSystem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.IsLoginSystem, this.entityData.IsLoginSystem);
				OnPropertyChanged("IsLoginSystem");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdateDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
					
				OnColumnChanging(UserColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserUpdate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserUpdateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserUpdate
		{
			get
			{
				return this.entityData.UserUpdate; 
			}
			
			set
			{
				if (this.entityData.UserUpdate == value)
					return;
					
				OnColumnChanging(UserColumn.UserUpdate, this.entityData.UserUpdate);
				this.entityData.UserUpdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.UserUpdate, this.entityData.UserUpdate);
				OnPropertyChanged("UserUpdate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageDefaultLogin property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String PageDefaultLogin
		{
			get
			{
				return this.entityData.PageDefaultLogin; 
			}
			
			set
			{
				if (this.entityData.PageDefaultLogin == value)
					return;
					
				OnColumnChanging(UserColumn.PageDefaultLogin, this.entityData.PageDefaultLogin);
				this.entityData.PageDefaultLogin = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.PageDefaultLogin, this.entityData.PageDefaultLogin);
				OnPropertyChanged("PageDefaultLogin");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DateCreated property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDateCreatedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DateCreated
		{
			get
			{
				return this.entityData.DateCreated; 
			}
			
			set
			{
				if (this.entityData.DateCreated == value)
					return;
					
				OnColumnChanging(UserColumn.DateCreated, this.entityData.DateCreated);
				this.entityData.DateCreated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.DateCreated, this.entityData.DateCreated);
				OnPropertyChanged("DateCreated");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DateRemoved property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDateRemovedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DateRemoved
		{
			get
			{
				return this.entityData.DateRemoved; 
			}
			
			set
			{
				if (this.entityData.DateRemoved == value)
					return;
					
				OnColumnChanging(UserColumn.DateRemoved, this.entityData.DateRemoved);
				this.entityData.DateRemoved = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.DateRemoved, this.entityData.DateRemoved);
				OnPropertyChanged("DateRemoved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsNoBody property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsNoBodyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsNoBody
		{
			get
			{
				return this.entityData.IsNoBody; 
			}
			
			set
			{
				if (this.entityData.IsNoBody == value)
					return;
					
				OnColumnChanging(UserColumn.IsNoBody, this.entityData.IsNoBody);
				this.entityData.IsNoBody = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.IsNoBody, this.entityData.IsNoBody);
				OnPropertyChanged("IsNoBody");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of DieRequest objects
		///	which are related to this object through the relation FK_tblDIERequest_tblUser
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DieRequest> DieRequestCollectionGetByUserId
		{
			get { return entityData.DieRequestCollectionGetByUserId; }
			set { entityData.DieRequestCollectionGetByUserId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DieRequest objects
		///	which are related to this object through the relation FK_tblDIERequest_tblUser_Owner
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DieRequest> DieRequestCollectionGetByOwner
		{
			get { return entityData.DieRequestCollectionGetByOwner; }
			set { entityData.DieRequestCollectionGetByOwner = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DieRequest objects
		///	which are related to this object through the relation FK_tblDIERequest_tblUser_UserUpdate
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DieRequest> DieRequestCollectionGetByLastUserUpdate
		{
			get { return entityData.DieRequestCollectionGetByLastUserUpdate; }
			set { entityData.DieRequestCollectionGetByLastUserUpdate = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DieRequest objects
		///	which are related to this object through the relation FK_tblDIERequest_tblUser_CodeBy
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DieRequest> DieRequestCollectionGetByCodeBy
		{
			get { return entityData.DieRequestCollectionGetByCodeBy; }
			set { entityData.DieRequestCollectionGetByCodeBy = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserName", "User Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PassWord", "Pass Word"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PassWord", "Pass Word", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmployeeName", "Employee Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PageDefaultLogin", "Page Default Login", 1000));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblUser"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"UserID", "UserName", "PassWord", "QlnsID", "Email", "EmployeeName", "Remove", "IsLoginSystem", "UpdateDate", "UserUpdate", "PageDefaultLogin", "DateCreated", "DateRemoved", "IsNoBody"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as UserEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (User) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<User>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as User);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed User Entity 
		///</summary>
		protected virtual User Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			User copy = new User();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.UserId = this.UserId;
				copy.UserName = this.UserName;
				copy.PassWord = this.PassWord;
				copy.QlnsId = this.QlnsId;
				copy.Email = this.Email;
				copy.EmployeeName = this.EmployeeName;
				copy.Remove = this.Remove;
				copy.IsLoginSystem = this.IsLoginSystem;
				copy.UpdateDate = this.UpdateDate;
				copy.UserUpdate = this.UserUpdate;
				copy.PageDefaultLogin = this.PageDefaultLogin;
				copy.DateCreated = this.DateCreated;
				copy.DateRemoved = this.DateRemoved;
				copy.IsNoBody = this.IsNoBody;
			
		
			//deep copy nested objects
			copy.DieRequestCollectionGetByUserId = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByUserId, existingCopies); 
			copy.DieRequestCollectionGetByOwner = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByOwner, existingCopies); 
			copy.DieRequestCollectionGetByLastUserUpdate = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByLastUserUpdate, existingCopies); 
			copy.DieRequestCollectionGetByCodeBy = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByCodeBy, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed User Entity 
		///</summary>
		public virtual User Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed User Entity which is a deep copy of the current entity.
		///</summary>
		public virtual User DeepCopy()
		{
			return EntityHelper.Clone<User>(this as User);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as UserEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new UserEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as UserEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(UserColumn column)
		{
			switch(column)
			{
					case UserColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case UserColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case UserColumn.PassWord:
					return entityData.PassWord != _originalData.PassWord;
					case UserColumn.QlnsId:
					return entityData.QlnsId != _originalData.QlnsId;
					case UserColumn.Email:
					return entityData.Email != _originalData.Email;
					case UserColumn.EmployeeName:
					return entityData.EmployeeName != _originalData.EmployeeName;
					case UserColumn.Remove:
					return entityData.Remove != _originalData.Remove;
					case UserColumn.IsLoginSystem:
					return entityData.IsLoginSystem != _originalData.IsLoginSystem;
					case UserColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case UserColumn.UserUpdate:
					return entityData.UserUpdate != _originalData.UserUpdate;
					case UserColumn.PageDefaultLogin:
					return entityData.PageDefaultLogin != _originalData.PageDefaultLogin;
					case UserColumn.DateCreated:
					return entityData.DateCreated != _originalData.DateCreated;
					case UserColumn.DateRemoved:
					return entityData.DateRemoved != _originalData.DateRemoved;
					case UserColumn.IsNoBody:
					return entityData.IsNoBody != _originalData.IsNoBody;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< UserColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.PassWord != _originalData.PassWord;
			result = result || entityData.QlnsId != _originalData.QlnsId;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.EmployeeName != _originalData.EmployeeName;
			result = result || entityData.Remove != _originalData.Remove;
			result = result || entityData.IsLoginSystem != _originalData.IsLoginSystem;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.UserUpdate != _originalData.UserUpdate;
			result = result || entityData.PageDefaultLogin != _originalData.PageDefaultLogin;
			result = result || entityData.DateCreated != _originalData.DateCreated;
			result = result || entityData.DateRemoved != _originalData.DateRemoved;
			result = result || entityData.IsNoBody != _originalData.IsNoBody;
			return result;
		}	
		
		///<summary>
		///  Returns a User Entity with the original data.
		///</summary>
		public User GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateUser(
				_originalData.UserName,
				_originalData.PassWord,
				_originalData.QlnsId,
				_originalData.Email,
				_originalData.EmployeeName,
				_originalData.Remove,
				_originalData.IsLoginSystem,
				_originalData.UpdateDate,
				_originalData.UserUpdate,
				_originalData.PageDefaultLogin,
				_originalData.DateCreated,
				_originalData.DateRemoved,
				_originalData.IsNoBody
				);
				
			return (User)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="UserBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is UserBase)
				return ValueEquals(this, (UserBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="UserBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.UserId.GetHashCode() ^ 
					this.UserName.GetHashCode() ^ 
					this.PassWord.GetHashCode() ^ 
					((this.QlnsId == null) ? string.Empty : this.QlnsId.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.EmployeeName == null) ? string.Empty : this.EmployeeName.ToString()).GetHashCode() ^ 
					((this.Remove == null) ? string.Empty : this.Remove.ToString()).GetHashCode() ^ 
					((this.IsLoginSystem == null) ? string.Empty : this.IsLoginSystem.ToString()).GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					((this.UserUpdate == null) ? string.Empty : this.UserUpdate.ToString()).GetHashCode() ^ 
					((this.PageDefaultLogin == null) ? string.Empty : this.PageDefaultLogin.ToString()).GetHashCode() ^ 
					((this.DateCreated == null) ? string.Empty : this.DateCreated.ToString()).GetHashCode() ^ 
					((this.DateRemoved == null) ? string.Empty : this.DateRemoved.ToString()).GetHashCode() ^ 
					((this.IsNoBody == null) ? string.Empty : this.IsNoBody.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="UserBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(UserBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="UserBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="UserBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="UserBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(UserBase Object1, UserBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.UserName != Object2.UserName)
				equal = false;
			if (Object1.PassWord != Object2.PassWord)
				equal = false;
			if ( Object1.QlnsId != null && Object2.QlnsId != null )
			{
				if (Object1.QlnsId != Object2.QlnsId)
					equal = false;
			}
			else if (Object1.QlnsId == null ^ Object2.QlnsId == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.EmployeeName != null && Object2.EmployeeName != null )
			{
				if (Object1.EmployeeName != Object2.EmployeeName)
					equal = false;
			}
			else if (Object1.EmployeeName == null ^ Object2.EmployeeName == null )
			{
				equal = false;
			}
			if ( Object1.Remove != null && Object2.Remove != null )
			{
				if (Object1.Remove != Object2.Remove)
					equal = false;
			}
			else if (Object1.Remove == null ^ Object2.Remove == null )
			{
				equal = false;
			}
			if ( Object1.IsLoginSystem != null && Object2.IsLoginSystem != null )
			{
				if (Object1.IsLoginSystem != Object2.IsLoginSystem)
					equal = false;
			}
			else if (Object1.IsLoginSystem == null ^ Object2.IsLoginSystem == null )
			{
				equal = false;
			}
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if ( Object1.UserUpdate != null && Object2.UserUpdate != null )
			{
				if (Object1.UserUpdate != Object2.UserUpdate)
					equal = false;
			}
			else if (Object1.UserUpdate == null ^ Object2.UserUpdate == null )
			{
				equal = false;
			}
			if ( Object1.PageDefaultLogin != null && Object2.PageDefaultLogin != null )
			{
				if (Object1.PageDefaultLogin != Object2.PageDefaultLogin)
					equal = false;
			}
			else if (Object1.PageDefaultLogin == null ^ Object2.PageDefaultLogin == null )
			{
				equal = false;
			}
			if ( Object1.DateCreated != null && Object2.DateCreated != null )
			{
				if (Object1.DateCreated != Object2.DateCreated)
					equal = false;
			}
			else if (Object1.DateCreated == null ^ Object2.DateCreated == null )
			{
				equal = false;
			}
			if ( Object1.DateRemoved != null && Object2.DateRemoved != null )
			{
				if (Object1.DateRemoved != Object2.DateRemoved)
					equal = false;
			}
			else if (Object1.DateRemoved == null ^ Object2.DateRemoved == null )
			{
				equal = false;
			}
			if ( Object1.IsNoBody != null && Object2.IsNoBody != null )
			{
				if (Object1.IsNoBody != Object2.IsNoBody)
					equal = false;
			}
			else if (Object1.IsNoBody == null ^ Object2.IsNoBody == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((UserBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static UserComparer GetComparer()
        {
            return new UserComparer();
        }
        */

        // Comparer delegates back to User
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(User rhs, UserColumn which)
        {
            switch (which)
            {
            	
            	
            	case UserColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case UserColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case UserColumn.PassWord:
            		return this.PassWord.CompareTo(rhs.PassWord);
            		
            		                 
            	
            	
            	case UserColumn.QlnsId:
            		return this.QlnsId.Value.CompareTo(rhs.QlnsId.Value);
            		
            		                 
            	
            	
            	case UserColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case UserColumn.EmployeeName:
            		return this.EmployeeName.CompareTo(rhs.EmployeeName);
            		
            		                 
            	
            	
            	case UserColumn.Remove:
            		return this.Remove.Value.CompareTo(rhs.Remove.Value);
            		
            		                 
            	
            	
            	case UserColumn.IsLoginSystem:
            		return this.IsLoginSystem.Value.CompareTo(rhs.IsLoginSystem.Value);
            		
            		                 
            	
            	
            	case UserColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case UserColumn.UserUpdate:
            		return this.UserUpdate.Value.CompareTo(rhs.UserUpdate.Value);
            		
            		                 
            	
            	
            	case UserColumn.PageDefaultLogin:
            		return this.PageDefaultLogin.CompareTo(rhs.PageDefaultLogin);
            		
            		                 
            	
            	
            	case UserColumn.DateCreated:
            		return this.DateCreated.Value.CompareTo(rhs.DateCreated.Value);
            		
            		                 
            	
            	
            	case UserColumn.DateRemoved:
            		return this.DateRemoved.Value.CompareTo(rhs.DateRemoved.Value);
            		
            		                 
            	
            	
            	case UserColumn.IsNoBody:
            		return this.IsNoBody.Value.CompareTo(rhs.IsNoBody.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<UserKey> Members
		
		// member variable for the EntityId property
		private UserKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual UserKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new UserKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("User")
					.Append("|").Append( this.UserId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- UserId: {0}{14}- UserName: {1}{14}- PassWord: {2}{14}- QlnsId: {3}{14}- Email: {4}{14}- EmployeeName: {5}{14}- Remove: {6}{14}- IsLoginSystem: {7}{14}- UpdateDate: {8}{14}- UserUpdate: {9}{14}- PageDefaultLogin: {10}{14}- DateCreated: {11}{14}- DateRemoved: {12}{14}- IsNoBody: {13}{14}{16}", 
				this.UserId,
				this.UserName,
				this.PassWord,
				(this.QlnsId == null) ? string.Empty : this.QlnsId.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.EmployeeName == null) ? string.Empty : this.EmployeeName.ToString(),
				(this.Remove == null) ? string.Empty : this.Remove.ToString(),
				(this.IsLoginSystem == null) ? string.Empty : this.IsLoginSystem.ToString(),
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				(this.UserUpdate == null) ? string.Empty : this.UserUpdate.ToString(),
				(this.PageDefaultLogin == null) ? string.Empty : this.PageDefaultLogin.ToString(),
				(this.DateCreated == null) ? string.Empty : this.DateCreated.ToString(),
				(this.DateRemoved == null) ? string.Empty : this.DateRemoved.ToString(),
				(this.IsNoBody == null) ? string.Empty : this.IsNoBody.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblUser' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class UserEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// UserID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblUser"</remarks>
		public System.Int32 UserId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// UserName : 
		/// </summary>
		public System.String		  UserName = string.Empty;
		
		/// <summary>
		/// PassWord : 
		/// </summary>
		public System.String		  PassWord = string.Empty;
		
		/// <summary>
		/// QlnsID : 
		/// </summary>
		public System.Int32?		  QlnsId = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// EmployeeName : 
		/// </summary>
		public System.String		  EmployeeName = null;
		
		/// <summary>
		/// Remove : 
		/// </summary>
		public System.Boolean?		  Remove = null;
		
		/// <summary>
		/// IsLoginSystem : 
		/// </summary>
		public System.Boolean?		  IsLoginSystem = null;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		public System.DateTime?		  UpdateDate = null;
		
		/// <summary>
		/// UserUpdate : 
		/// </summary>
		public System.Int32?		  UserUpdate = null;
		
		/// <summary>
		/// PageDefaultLogin : 
		/// </summary>
		public System.String		  PageDefaultLogin = null;
		
		/// <summary>
		/// DateCreated : 
		/// </summary>
		public System.DateTime?		  DateCreated = null;
		
		/// <summary>
		/// DateRemoved : 
		/// </summary>
		public System.DateTime?		  DateRemoved = null;
		
		/// <summary>
		/// IsNoBody : 
		/// </summary>
		public System.Boolean?		  IsNoBody = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region DieRequestCollectionGetByUserId
		
		private TList<DieRequest> _dieRequestLastUserUpdateGetByUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dieRequestLastUserUpdateGetByUserId
		/// </summary>
		
		public TList<DieRequest> DieRequestCollectionGetByUserId
		{
			get
			{
				if (_dieRequestLastUserUpdateGetByUserId == null)
				{
				_dieRequestLastUserUpdateGetByUserId = new TList<DieRequest>();
				}
	
				return _dieRequestLastUserUpdateGetByUserId;
			}
			set { _dieRequestLastUserUpdateGetByUserId = value; }
		}
		
		#endregion

		#region DieRequestCollectionGetByOwner
		
		private TList<DieRequest> _dieRequestOwnerGetByOwner;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dieRequestOwnerGetByOwner
		/// </summary>
		
		public TList<DieRequest> DieRequestCollectionGetByOwner
		{
			get
			{
				if (_dieRequestOwnerGetByOwner == null)
				{
				_dieRequestOwnerGetByOwner = new TList<DieRequest>();
				}
	
				return _dieRequestOwnerGetByOwner;
			}
			set { _dieRequestOwnerGetByOwner = value; }
		}
		
		#endregion

		#region DieRequestCollectionGetByLastUserUpdate
		
		private TList<DieRequest> _dieRequestLastUserUpdateGetByLastUserUpdate;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dieRequestLastUserUpdateGetByLastUserUpdate
		/// </summary>
		
		public TList<DieRequest> DieRequestCollectionGetByLastUserUpdate
		{
			get
			{
				if (_dieRequestLastUserUpdateGetByLastUserUpdate == null)
				{
				_dieRequestLastUserUpdateGetByLastUserUpdate = new TList<DieRequest>();
				}
	
				return _dieRequestLastUserUpdateGetByLastUserUpdate;
			}
			set { _dieRequestLastUserUpdateGetByLastUserUpdate = value; }
		}
		
		#endregion

		#region DieRequestCollectionGetByCodeBy
		
		private TList<DieRequest> _dieRequestCodeByGetByCodeBy;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dieRequestCodeByGetByCodeBy
		/// </summary>
		
		public TList<DieRequest> DieRequestCollectionGetByCodeBy
		{
			get
			{
				if (_dieRequestCodeByGetByCodeBy == null)
				{
				_dieRequestCodeByGetByCodeBy = new TList<DieRequest>();
				}
	
				return _dieRequestCodeByGetByCodeBy;
			}
			set { _dieRequestCodeByGetByCodeBy = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			UserEntityData _tmp = new UserEntityData();
						
			_tmp.UserId = this.UserId;
			
			_tmp.UserName = this.UserName;
			_tmp.PassWord = this.PassWord;
			_tmp.QlnsId = this.QlnsId;
			_tmp.Email = this.Email;
			_tmp.EmployeeName = this.EmployeeName;
			_tmp.Remove = this.Remove;
			_tmp.IsLoginSystem = this.IsLoginSystem;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UserUpdate = this.UserUpdate;
			_tmp.PageDefaultLogin = this.PageDefaultLogin;
			_tmp.DateCreated = this.DateCreated;
			_tmp.DateRemoved = this.DateRemoved;
			_tmp.IsNoBody = this.IsNoBody;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._dieRequestLastUserUpdateGetByUserId != null)
				_tmp.DieRequestCollectionGetByUserId = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByUserId); 
			if (this._dieRequestOwnerGetByOwner != null)
				_tmp.DieRequestCollectionGetByOwner = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByOwner); 
			if (this._dieRequestLastUserUpdateGetByLastUserUpdate != null)
				_tmp.DieRequestCollectionGetByLastUserUpdate = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByLastUserUpdate); 
			if (this._dieRequestCodeByGetByCodeBy != null)
				_tmp.DieRequestCollectionGetByCodeBy = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByCodeBy); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			UserEntityData _tmp = new UserEntityData();
						
			_tmp.UserId = this.UserId;
			
			_tmp.UserName = this.UserName;
			_tmp.PassWord = this.PassWord;
			_tmp.QlnsId = this.QlnsId;
			_tmp.Email = this.Email;
			_tmp.EmployeeName = this.EmployeeName;
			_tmp.Remove = this.Remove;
			_tmp.IsLoginSystem = this.IsLoginSystem;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UserUpdate = this.UserUpdate;
			_tmp.PageDefaultLogin = this.PageDefaultLogin;
			_tmp.DateCreated = this.DateCreated;
			_tmp.DateRemoved = this.DateRemoved;
			_tmp.IsNoBody = this.IsNoBody;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.DieRequestCollectionGetByUserId = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByUserId, existingCopies); 
			_tmp.DieRequestCollectionGetByOwner = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByOwner, existingCopies); 
			_tmp.DieRequestCollectionGetByLastUserUpdate = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByLastUserUpdate, existingCopies); 
			_tmp.DieRequestCollectionGetByCodeBy = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollectionGetByCodeBy, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(UserColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(UserColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(UserColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				UserEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new UserEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(UserColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				UserEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new UserEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region UserEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="User"/> object.
	/// </remarks>
	public class UserEventArgs : System.EventArgs
	{
		private UserColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the UserEventArgs class.
		///</summary>
		public UserEventArgs(UserColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the UserEventArgs class.
		///</summary>
		public UserEventArgs(UserColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The UserColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="UserColumn" />
		public UserColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all User related events.
	///</summary>
	public delegate void UserEventHandler(object sender, UserEventArgs e);
	
	#region UserComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class UserComparer : System.Collections.Generic.IComparer<User>
	{
		UserColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:UserComparer"/> class.
        /// </summary>
		public UserComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:UserComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public UserComparer(UserColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="User"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="User"/> to compare.</param>
        /// <param name="b">The second <c>User</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(User a, User b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(User entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(User a, User b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public UserColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region UserKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="User"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class UserKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the UserKey class.
		/// </summary>
		public UserKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the UserKey class.
		/// </summary>
		public UserKey(UserBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.UserId = entity.UserId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the UserKey class.
		/// </summary>
		public UserKey(System.Int32 _userId)
		{
			#region Init Properties

			this.UserId = _userId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private UserBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public UserBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the UserId property
		private System.Int32 _userId;
		
		/// <summary>
		/// Gets or sets the UserId property.
		/// </summary>
		public System.Int32 UserId
		{
			get { return _userId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.UserId = value;
				
				_userId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				UserId = ( values["UserId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["UserId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("UserId", UserId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("UserId: {0}{1}",
								UserId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region UserColumn Enum
	
	/// <summary>
	/// Enumerate the User columns.
	/// </summary>
	[Serializable]
	public enum UserColumn : int
	{
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		UserId = 1,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		UserName = 2,
		/// <summary>
		/// PassWord : 
		/// </summary>
		[EnumTextValue("PassWord")]
		[ColumnEnum("PassWord", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		PassWord = 3,
		/// <summary>
		/// QlnsId : 
		/// </summary>
		[EnumTextValue("QlnsID")]
		[ColumnEnum("QlnsID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		QlnsId = 4,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Email = 5,
		/// <summary>
		/// EmployeeName : 
		/// </summary>
		[EnumTextValue("EmployeeName")]
		[ColumnEnum("EmployeeName", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		EmployeeName = 6,
		/// <summary>
		/// Remove : 
		/// </summary>
		[EnumTextValue("Remove")]
		[ColumnEnum("Remove", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Remove = 7,
		/// <summary>
		/// IsLoginSystem : 
		/// </summary>
		[EnumTextValue("IsLoginSystem")]
		[ColumnEnum("IsLoginSystem", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsLoginSystem = 8,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("UpdateDate")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 9,
		/// <summary>
		/// UserUpdate : 
		/// </summary>
		[EnumTextValue("UserUpdate")]
		[ColumnEnum("UserUpdate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserUpdate = 10,
		/// <summary>
		/// PageDefaultLogin : 
		/// </summary>
		[EnumTextValue("PageDefaultLogin")]
		[ColumnEnum("PageDefaultLogin", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		PageDefaultLogin = 11,
		/// <summary>
		/// DateCreated : 
		/// </summary>
		[EnumTextValue("DateCreated")]
		[ColumnEnum("DateCreated", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DateCreated = 12,
		/// <summary>
		/// DateRemoved : 
		/// </summary>
		[EnumTextValue("DateRemoved")]
		[ColumnEnum("DateRemoved", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DateRemoved = 13,
		/// <summary>
		/// IsNoBody : 
		/// </summary>
		[EnumTextValue("IsNoBody")]
		[ColumnEnum("IsNoBody", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsNoBody = 14
	}//End enum

	#endregion UserColumn Enum

} // end namespace
