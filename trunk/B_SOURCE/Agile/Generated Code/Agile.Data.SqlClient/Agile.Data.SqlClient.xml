<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Agile.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:Agile.Data.SqlClient.SqlResolutionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.Resolutions"/> entity.
            </summary>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlResolutionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.Resolutions"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlResolutionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlResolutionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_resolutionsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.Resolutions objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.Resolutions objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.Resolutions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.Resolutions objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.GetByResolutionsId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblResolutions index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_resolutionsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Resolutions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.Resolutions})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.Resolutions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.Resolutions)">
            <summary>
            	Inserts a Agile.Entities.Resolutions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.Resolutions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.Resolutions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.Resolutions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.Resolutions object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.Resolutions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlResolutionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlResolutionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlResolutionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlResolutionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlResolutionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlMileStoleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.MileStole"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlMileStoleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlMileStoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_mileStoleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.MileStole objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.MileStole objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.MileStole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.MileStole objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.GetByMileStoleId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMileStole index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_mileStoleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.MileStole"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.MileStole})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.MileStole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.MileStole)">
            <summary>
            	Inserts a Agile.Entities.MileStole object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.MileStole object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.MileStole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.MileStole)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.MileStole object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.MileStole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlMileStoleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlMileStoleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlMileStoleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Agile.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,Agile.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:Agile.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:Agile.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:Agile.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:Agile.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:Agile.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Agile.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:Agile.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Agile.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:Agile.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:Agile.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:Agile.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:Agile.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieAttachFileProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieAttachFile"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieAttachFileProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieAttachFileProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dieAttachFileId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.DieAttachFile objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.DieAttachFile objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieAttachFile objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieAttachFile objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.GetByDieRequestId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIEAttachFile_tblDIERequest key.
            	FK_tblDIEAttachFile_tblDIERequest Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieRequestId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieAttachFile objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.GetByDieAttachFileId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDIEAttachFile index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieAttachFileId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieAttachFile"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.DieAttachFile})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieAttachFile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.DieAttachFile)">
            <summary>
            	Inserts a Agile.Entities.DieAttachFile object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieAttachFile object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieAttachFile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.DieAttachFile)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieAttachFile object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.DieAttachFile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieAttachFileProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlHomeDieRequestProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.HomeDieRequest"/> entity.
            </summary>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the HomeDieRequest objects.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of HomeDieRequest objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase.Get(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of HomeDieRequest objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of HomeDieRequest objects.</returns>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlHomeDieRequestProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlHomeDieRequestProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlHomeDieRequestProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.User"/> entity.
            </summary>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.User"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.User objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.User objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.User objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.GetByUserId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_tblUser_Email index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.User"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.GetByUserName(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_tblUsername index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.User"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.User})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.User)">
            <summary>
            	Inserts a Agile.Entities.User object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.User object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.User)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.User object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieRequestProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieRequest"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieRequestProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieRequestProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dieRequestId">khóa của bảng. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByDieCategoryId(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblDIECategory key.
            	FK_tblDIERequest_tblDIECategory Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieCategoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByParentDie(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblDIERequest key.
            	FK_tblDIERequest_tblDIERequest Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_parentDie"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByDieStatus(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblDIEStatus key.
            	FK_tblDIERequest_tblDIEStatus Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieStatus"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByDieTypeId(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblDIEType key.
            	FK_tblDIERequest_tblDIEType Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByMilestoneId(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblMileStole key.
            	FK_tblDIERequest_tblMileStole Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_milestoneId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByPriorityDieRequestId(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblPriorityDIERequest key.
            	FK_tblDIERequest_tblPriorityDIERequest Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_priorityDieRequestId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByProjectId(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblProject key.
            	FK_tblDIERequest_tblProject Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_projectId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByCompletedReleaseId(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblRelease key.
            	FK_tblDIERequest_tblRelease Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_completedReleaseId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByResolutionsId(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblResolutions key.
            	FK_tblDIERequest_tblResolutions Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_resolutionsId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByUserId(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblUser key.
            	FK_tblDIERequest_tblUser Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByCodeBy(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblUser_CodeBy key.
            	FK_tblDIERequest_tblUser_CodeBy Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_codeBy"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByOwner(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblUser_Owner key.
            	FK_tblDIERequest_tblUser_Owner Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_owner"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByLastUserUpdate(Agile.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_tblDIERequest_tblUser_UserUpdate key.
            	FK_tblDIERequest_tblUser_UserUpdate Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_lastUserUpdate"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.GetByDieRequestId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDIERequest index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieRequestId">khóa của bảng</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieRequest"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.DieRequest})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.DieRequest)">
            <summary>
            	Inserts a Agile.Entities.DieRequest object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieRequest object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.DieRequest)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieRequest object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.DieRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieRequestProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieRequestProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieRequestProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieHistory"/> entity.
            </summary>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieHistory"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dieHistoryId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.DieHistory objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.DieHistory objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieHistory objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.GetByDieHistoryId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDIEHistory index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieHistoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.DieHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.DieHistory)">
            <summary>
            	Inserts a Agile.Entities.DieHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.DieHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieHistory object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.DieHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlReleaseProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.Release"/> entity.
            </summary>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlReleaseProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.Release"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlReleaseProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlReleaseProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_releaseId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.Release objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.Release objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.Release objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.Release objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.GetByReleaseId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblRelease index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_releaseId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Release"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.Release})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.Release object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.Release)">
            <summary>
            	Inserts a Agile.Entities.Release object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.Release object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.Release object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.Release)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.Release object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.Release object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlReleaseProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlReleaseProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlReleaseProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlReleaseProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlReleaseProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlPriorityDieRequestProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.PriorityDieRequest"/> entity.
            </summary>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.PriorityDieRequest"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_priorityDieRequestId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.PriorityDieRequest objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.PriorityDieRequest objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.PriorityDieRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.PriorityDieRequest objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.GetByPriorityDieRequestId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblPriorityDIERequest index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_priorityDieRequestId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.PriorityDieRequest"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.PriorityDieRequest})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.PriorityDieRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.PriorityDieRequest)">
            <summary>
            	Inserts a Agile.Entities.PriorityDieRequest object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.PriorityDieRequest object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.PriorityDieRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.PriorityDieRequest)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.PriorityDieRequest object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.PriorityDieRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlPriorityDieRequestProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlPriorityDieRequestProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlPriorityDieRequestProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieType"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dieTypeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.DieType objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.DieType objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieType objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.GetByDieTypeId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDIEType index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.DieType})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.DieType)">
            <summary>
            	Inserts a Agile.Entities.DieType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.DieType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieType object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.DieType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieType"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Agile.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:Agile.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(Agile.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(Agile.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(Agile.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(Agile.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(Agile.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(Agile.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(Agile.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(Agile.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(Agile.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(Agile.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(Agile.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(Agile.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:Agile.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.ActionTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.ActionType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlActionTypeProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlActionTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.PriorityDieRequestProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.PriorityDieRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlPriorityDieRequestProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlPriorityDieRequestProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.ProjectProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.Project"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlProjectProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlProjectProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.ReleaseProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.Release"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlReleaseProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlReleaseProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.ResolutionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.Resolutions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlResolutionsProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlResolutionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.MileStoleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.MileStole"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlMileStoleProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlMileStoleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.DieTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.DieType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieTypeProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.DieStatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.DieStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieStatusProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.DieCategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.DieCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieCategoryProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieCategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.DieAttachFileProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.DieAttachFile"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieAttachFileProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieAttachFileProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.DieHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.DieHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieHistoryProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.UserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.User"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlUserProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.DieRequestProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.DieRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieRequestProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlDieRequestProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.HomeDieRequestProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:Agile.Entities.HomeDieRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlHomeDieRequestProvider">
            <summary>
            Gets the current <c cref="P:Agile.Data.SqlClient.SqlNetTiersProvider.SqlHomeDieRequestProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlMileStoleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.MileStole"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlMileStoleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlMileStoleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieCategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieCategory"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieCategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieCategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dieCategoryId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.DieCategory objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.DieCategory objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieCategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieCategory objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.GetByDieCategoryId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDIECategory index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieCategoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieCategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.DieCategory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.DieCategory)">
            <summary>
            	Inserts a Agile.Entities.DieCategory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieCategory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.DieCategory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieCategory object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.DieCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieCategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieCategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieCategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieCategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieCategory"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieCategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieCategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieStatusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieStatus"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieStatusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dieStatus">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.DieStatus objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.DieStatus objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieStatus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.DieStatus objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.GetByDieStatus(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDIEStatus index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_dieStatus"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieStatus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.DieStatus})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.DieStatus)">
            <summary>
            	Inserts a Agile.Entities.DieStatus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieStatus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.DieStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.DieStatus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.DieStatus object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.DieStatus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlDieStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieAttachFileProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieAttachFile"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieAttachFileProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieAttachFileProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieStatus"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlActionTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.ActionType"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlActionTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlActionTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_actionTypeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.ActionType objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.ActionType objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.ActionType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.ActionType objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.GetByActionTypeId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblActionType index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_actionTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.ActionType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.ActionType})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.ActionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.ActionType)">
            <summary>
            	Inserts a Agile.Entities.ActionType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.ActionType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.ActionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.ActionType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.ActionType object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.ActionType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlActionTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlActionTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlActionTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlActionTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.ActionType"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlActionTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlActionTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlProjectProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.Project"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlProjectProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlProjectProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.Delete(Agile.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_projectId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.Find(Agile.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of Agile.Entities.Project objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.Find(Agile.Data.TransactionManager,Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Agile.Entities.Project objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.GetAll(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.Project objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.GetPaged(Agile.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Agile.Entities.Project objects.</returns>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.GetByProjectId(Agile.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblProject index.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="_projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Project"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.BulkInsert(Agile.Data.TransactionManager,Agile.Entities.TList{Agile.Entities.Project})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.Project object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.Insert(Agile.Data.TransactionManager,Agile.Entities.Project)">
            <summary>
            	Inserts a Agile.Entities.Project object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.Project object to insert.</param>
            <remarks>
            	After inserting into the datasource, the Agile.Entities.Project object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProviderBase.Update(Agile.Data.TransactionManager,Agile.Entities.Project)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:Agile.Data.TransactionManager"/> object</param>
            <param name="entity">Agile.Entities.Project object to update.</param>
            <remarks>
            	After updating the datasource, the Agile.Entities.Project object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlProjectProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlProjectProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Agile.Data.SqlClient.SqlProjectProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlProjectProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.Project"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlProjectProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlProjectProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:Agile.Data.SqlClient.SqlDieRequestProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:Agile.Entities.DieRequest"/> entity.
            </summary>
        </member>
        <member name="M:Agile.Data.SqlClient.SqlDieRequestProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Agile.Data.SqlClient.SqlDieRequestProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
