
/*
	File generated by NetTiers templates [www.NetTiers.com]
	Important: Do not modify this file. Edit the file HomeDieRequest.cs instead.
*/

#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Security;
using System.Data;

using Agile.Entities;
using Agile.Entities.Validation;
using Entities = Agile.Entities;
using Agile.Data;
using Agile.Data.Bases;


using Microsoft.Practices.EnterpriseLibrary.Logging;

#endregion 

namespace Agile.Services
{		
	
	///<summary>
	/// An object representation of the 'HomeDIERequest' View.
	///</summary>
	/// <remarks>
	/// IMPORTANT!!! You should not modify this partial  class, modify the HomeDieRequest.cs file instead.
	/// All custom implementations should be done in the <see cref="HomeDieRequest"/> class.
	/// </remarks>
	[DataObject]
	public partial class HomeDieRequestServiceBase : ServiceViewBase<HomeDieRequest>
	{

		#region Constructors
		///<summary>
		/// Creates a new <see cref="HomeDieRequest"/> instance .
		///</summary>
		public HomeDieRequestServiceBase() : base()
		{
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="HomeDieRequest"/> instance.
		///</summary>
		///<param name="_dieName"></param>
		///<param name="_dieRequestId"></param>
		///<param name="_dieTag"></param>
		///<param name="_dieDescription"></param>
		///<param name="_updateUserId"></param>
		///<param name="_projectId"></param>
		///<param name="_dieDateSubmit"></param>
		///<param name="_dieNameStatus"></param>
		///<param name="_dieTypeName"></param>
		///<param name="_priorityDieRequestName"></param>
		///<param name="_color"></param>
		///<param name="_colorName"></param>
		///<param name="_dieStatus"></param>
		///<param name="_updateTime"></param>
		///<param name="_updatedUsername"></param>
		///<param name="_targetDate"></param>
		///<param name="_estimated"></param>
		///<param name="_actual"></param>
		///<param name="_userName"></param>
		///<param name="_updatedUserId"></param>
		///<param name="_dieSubmitDateOnly"></param>
		public static HomeDieRequest CreateHomeDieRequest(System.String _dieName, System.Int32 _dieRequestId, System.String _dieTag, System.String _dieDescription, System.Int32? _updateUserId, System.Int32? _projectId, System.DateTime? _dieDateSubmit, System.String _dieNameStatus, System.String _dieTypeName, System.String _priorityDieRequestName, System.String _color, System.String _colorName, System.Int32? _dieStatus, System.DateTime? _updateTime, System.Int32? _updatedUsername, System.DateTime? _targetDate, System.Double? _estimated, System.Double? _actual, System.String _userName, System.Int32 _updatedUserId, System.String _dieSubmitDateOnly)
		{
			HomeDieRequest newEntityHomeDieRequest = new HomeDieRequest();
			newEntityHomeDieRequest.DieName  = _dieName;
			newEntityHomeDieRequest.DieRequestId  = _dieRequestId;
			newEntityHomeDieRequest.DieTag  = _dieTag;
			newEntityHomeDieRequest.DieDescription  = _dieDescription;
			newEntityHomeDieRequest.UpdateUserId  = _updateUserId;
			newEntityHomeDieRequest.ProjectId  = _projectId;
			newEntityHomeDieRequest.DieDateSubmit  = _dieDateSubmit;
			newEntityHomeDieRequest.DieNameStatus  = _dieNameStatus;
			newEntityHomeDieRequest.DieTypeName  = _dieTypeName;
			newEntityHomeDieRequest.PriorityDieRequestName  = _priorityDieRequestName;
			newEntityHomeDieRequest.Color  = _color;
			newEntityHomeDieRequest.ColorName  = _colorName;
			newEntityHomeDieRequest.DieStatus  = _dieStatus;
			newEntityHomeDieRequest.UpdateTime  = _updateTime;
			newEntityHomeDieRequest.UpdatedUsername  = _updatedUsername;
			newEntityHomeDieRequest.TargetDate  = _targetDate;
			newEntityHomeDieRequest.Estimated  = _estimated;
			newEntityHomeDieRequest.Actual  = _actual;
			newEntityHomeDieRequest.UserName  = _userName;
			newEntityHomeDieRequest.UpdatedUserId  = _updatedUserId;
			newEntityHomeDieRequest.DieSubmitDateOnly  = _dieSubmitDateOnly;
			return newEntityHomeDieRequest;
		}
		#endregion Constructors

		#region Fields
		//private static SecurityContext<HomeDieRequest> securityContext = new SecurityContext<HomeDieRequest>();
		private static readonly string layerExceptionPolicy = "NoneExceptionPolicy";
		private static readonly bool noTranByDefault = false;
		private static readonly int defaultMaxRecords = 10000;
		#endregion 
		
		#region Data Access Methods
			
		#region Get 
		/// <summary>
		/// Attempts to do a parameterized version of a simple whereclause. 
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection of Entity objects.</returns>
		public override VList<HomeDieRequest> Get(string whereClause, string orderBy)
		{
			int totalCount = -1;
			return Get(whereClause, orderBy, 0, defaultMaxRecords, out totalCount);
		}

		/// <summary>
		/// Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
        /// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter to get total records for query</param>
		/// <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
		/// <returns>Returns a typed collection TList{HomeDieRequest} of <c>HomeDieRequest</c> objects.</returns>
		public override VList<HomeDieRequest> Get(string whereClause, string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Get");
								
			// get this data
			VList<HomeDieRequest> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.HomeDieRequestProvider.Get(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		
		#endregion Get Methods
		
		#region GetAll
		/// <summary>
		/// Get a complete collection of <see cref="HomeDieRequest" /> entities.
		/// </summary>
		/// <returns></returns>
		public virtual VList<HomeDieRequest> GetAll() 
		{
			int totalCount = -1;
			return GetAll(0, defaultMaxRecords, out totalCount);
		}

       
		/// <summary>
		/// Get a set portion of a complete list of <see cref="HomeDieRequest" /> entities
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">out parameter, number of total rows in given query.</param>
		/// <returns>a <see cref="TList{HomeDieRequest}"/> </returns>
		public override VList<HomeDieRequest> GetAll(int start, int pageLength, out int totalCount) 
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetAll");
			
			// get this data
			VList<HomeDieRequest> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;					

				//Access repository
				list = dataProvider.HomeDieRequestProvider.GetAll(transactionManager, start, pageLength, out totalCount);	
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;
		}
		#endregion GetAll

		#region GetPaged
		/// <summary>
		/// Gets a page of <see cref="TList{HomeDieRequest}" /> rows from the DataSource.
		/// </summary>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
		public virtual VList<HomeDieRequest> GetPaged(out int totalCount)
		{
			return GetPaged(null, null, 0, defaultMaxRecords, out totalCount);
		}
		
		/// <summary>
		/// Gets a page of <see cref="TList{HomeDieRequest}" /> rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
		public virtual VList<HomeDieRequest> GetPaged(int start, int pageLength, out int totalCount)
		{
			return GetPaged(null, null, start, pageLength, out totalCount);
		}

		/// <summary>
		/// Gets a page of entity rows with a <see cref="TList{HomeDieRequest}" /> from the DataSource with a where clause and order by clause.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
		public override VList<HomeDieRequest> GetPaged(string whereClause,string orderBy, int start, int pageLength, out int totalCount)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("GetPaged");
			
			// get this data
			VList<HomeDieRequest> list = null;
			totalCount = -1;
			TransactionManager transactionManager = null; 

			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.HomeDieRequestProvider.GetPaged(transactionManager, whereClause, orderBy, start, pageLength, out totalCount);
				
				//if borrowed tran, leave open for next call
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			return list;			
		}
		
		/// <summary>
		/// Gets the number of rows in the DataSource that match the specified whereClause.
		/// This method is only provided as a workaround for the ObjectDataSource's need to 
		/// execute another method to discover the total count instead of using another param, like our out param.  
		/// This method should be avoided if using the ObjectDataSource or another method.
		/// </summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="totalCount">Number of rows in the DataSource.</param>
		/// <returns>Returns the number of rows.</returns>
		public int GetTotalItems(string whereClause, out int totalCount)
		{
			GetPaged(whereClause, null, 0, defaultMaxRecords, out totalCount);
			return totalCount;
		}
		#endregion GetPaged	

		#region Find Methods

		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
		public virtual VList<HomeDieRequest> Find(IFilterParameterCollection parameters)
		{
			return Find(parameters, null);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
		public virtual VList<HomeDieRequest> Find(IFilterParameterCollection parameters, string orderBy)
		{
			int count = 0;
			return Find(parameters, orderBy, 0, defaultMaxRecords, out count);
		}
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
		public override VList<HomeDieRequest> Find(IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			// throws security exception if not authorized
			//SecurityContext.IsAuthorized("Find");
								
			// get this data
			TransactionManager transactionManager = null; 
			VList<HomeDieRequest> list = null;
			count = -1;
			
			try
            {	
				//since this is a read operation, don't create a tran by default, only use tran if provided to us for custom isolation level
				transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
				NetTiersProvider dataProvider = ConnectionScope.Current.DataProvider;
					
				//Access repository
				list = dataProvider.HomeDieRequestProvider.Find(transactionManager, parameters, orderBy, start, pageLength, out count);
			}
            catch (Exception exc)
            {
				//if open, rollback, it's possible this is part of a larger commit
                if (transactionManager != null && transactionManager.IsOpen) 
					transactionManager.Rollback();
				
				//Handle exception based on policy
                if (DomainUtil.HandleException(exc, layerExceptionPolicy)) 
					throw;
			}
			
			return list;
		}
		
		#endregion Find Methods
		
		#region Custom Methods
		#endregion
		
		#endregion Data Access Methods
		
	
	}//End Class
} // end namespace



