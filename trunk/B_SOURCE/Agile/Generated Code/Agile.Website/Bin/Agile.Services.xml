<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Agile.Services</name>
    </assembly>
    <members>
        <member name="T:Agile.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:Agile.Services.DomainUtil.GetErrorsFromList``1(Agile.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:Agile.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:Agile.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:Agile.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:Agile.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:Agile.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agile.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:Agile.Services.ContextView`2.#ctor(`0,Agile.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Agile.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:Agile.Services.ContextView`2.#ctor(`0,Agile.Services.SecurityContext{`0},Agile.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Agile.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:Agile.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:Agile.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:Agile.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:Agile.Services.ResolutionsService">
            <summary>
            An component type implementation of the 'tblResolutions' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Agile.Services.ResolutionsServiceBase">
            <summary>
             An object representation of the 'tblResolutions' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Resolutions.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.Resolutions"/> class.
             </remarks>
        </member>
        <member name="T:Agile.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:Agile.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:Agile.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:Agile.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Agile.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Agile.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:Agile.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:Agile.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.OnProcessStarting(Agile.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.OnProcessEnded(Agile.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.BulkInsert(Agile.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,Agile.Data.DeepLoadType,System.Type[],Agile.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.DeepLoad(Agile.Entities.TList{`0},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.DeepSave(`0,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.DeepSave(`0,Agile.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:Agile.Services.ServiceBaseCore`2.DeepSave(Agile.Entities.TList{`0},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:Agile.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Agile.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Agile.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:Agile.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:Agile.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:Agile.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.Resolutions"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.CreateResolutions(System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.Resolutions"/> instance.
            </summary>
            <param name="_resolutionsName"></param>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Get(Agile.Entities.ResolutionsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.GetByResolutionsId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblResolutions index.
            </summary>
            <param name="_resolutionsId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Resolutions"/> class.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.GetByResolutionsId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblResolutions index.
            </summary>
            <param name="_resolutionsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Resolutions"/> class.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.Resolutions"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.Resolutions"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Resolutions</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Resolutions</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Resolutions</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Resolutions} of <c>Resolutions</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Resolutions</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Resolutions</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Resolutions</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Resolutions</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Resolutions</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Insert(Agile.Entities.Resolutions)">
            <summary>
            public virtual method that Inserts a Resolutions object into the datasource using a transaction.
            </summary>
            <param name="entity">Resolutions object to Insert.</param>
            <remarks>After Inserting into the datasource, the Resolutions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Resolutions entity = new Resolutions();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ResolutionsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Insert(Agile.Entities.TList{Agile.Entities.Resolutions})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Resolutions</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Resolutions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Resolutions.
             <code><![CDATA[
             TList<Resolutions> list = new TList<Resolutions>();
             Resolutions entity = new Resolutions();
             entity.StringProperty = "foo";
             Resolutions entity2 = new Resolutions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResolutionsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Update(Agile.Entities.Resolutions)">
            <summary>
            public virtual method that Updates a Resolutions object into the datasource using a transaction.
            </summary>
            <param name="entity">Resolutions object to Update.</param>
            <remarks>After Updateing into the datasource, the Resolutions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Resolutions entity = ResolutionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ResolutionsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Update(Agile.Entities.TList{Agile.Entities.Resolutions})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Resolutions</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Resolutions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Resolutions.
             <code><![CDATA[
             TList<Resolutions> list = new TList<Resolutions>();
             Resolutions entity = new Resolutions();
             entity.StringProperty = "foo";
             Resolutions entity2 = new Resolutions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResolutionsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Save(Agile.Entities.Resolutions)">
            <summary>
            public virtual method that Saves a Resolutions object into the datasource using a transaction.
            </summary>
            <param name="entity">Resolutions object to Save.</param>
            <remarks>After Saveing into the datasource, the Resolutions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Resolutions entity = ResolutionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ResolutionsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Save(Agile.Entities.TList{Agile.Entities.Resolutions})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Resolutions</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Resolutions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Resolutions.
             <code><![CDATA[
             TList<Resolutions> list = new TList<Resolutions>();
             Resolutions entity = new Resolutions();
             entity.StringProperty = "foo";
             Resolutions entity2 = new Resolutions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResolutionsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Delete(Agile.Entities.Resolutions)">
            <summary>
            public virtual method that Deletes a Resolutions object into the datasource using a transaction.
            </summary>
            <param name="entity">Resolutions object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Resolutions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Resolutions entity = ResolutionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ResolutionsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Delete(Agile.Entities.TList{Agile.Entities.Resolutions})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Resolutions</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Resolutions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Resolutions.
             <code><![CDATA[
             TList<Resolutions> list = new TList<Resolutions>();
             Resolutions entity = new Resolutions();
             entity.StringProperty = "foo";
             Resolutions entity2 = new Resolutions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResolutionsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Delete(Agile.Entities.ResolutionsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _resolutionsId
            </summary>
            <param name="_resolutionsId">Resolutions pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepLoadByResolutionsId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.Resolutions"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_resolutionsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Resolutions Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Resolutions"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.Resolutions)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Resolutions Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.Resolutions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.Resolutions,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.Resolutions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Resolutions Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.Resolutions,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.Resolutions"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Resolutions Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.Resolutions})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.Resolutions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.Resolutions},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.Resolutions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.Resolutions},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.Resolutions"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepSave(Agile.Entities.Resolutions)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.Resolutions"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Resolutions Object</param>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepSave(Agile.Entities.Resolutions,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Resolutions object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Resolutions Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Resolutions</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.Resolutions})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Resolutions} Object</param>
        </member>
        <member name="M:Agile.Services.ResolutionsServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.Resolutions},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Resolutions Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.ResolutionsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Agile.Services.ResolutionsService.#ctor">
            <summary>
            Initializes a new instance of the ResolutionsService class.
            </summary>
        </member>
        <member name="T:Agile.Services.ProjectServiceBase">
            <summary>
             An object representation of the 'tblProject' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Project.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.Project"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.Project"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.CreateProject(System.String,System.DateTime,System.DateTime,System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.Project"/> instance.
            </summary>
            <param name="_projectName"></param>
            <param name="_startDate"></param>
            <param name="_deadline"></param>
            <param name="_description"></param>
            <param name="_active"></param>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Get(Agile.Entities.ProjectKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.GetByProjectId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblProject index.
            </summary>
            <param name="_projectId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Project"/> class.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.GetByProjectId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblProject index.
            </summary>
            <param name="_projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Project"/> class.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.Project"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.Project"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Project} of <c>Project</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Project</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Insert(Agile.Entities.Project)">
            <summary>
            public virtual method that Inserts a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Insert.</param>
            <remarks>After Inserting into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Project entity = new Project();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ProjectService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Insert(Agile.Entities.TList{Agile.Entities.Project})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Update(Agile.Entities.Project)">
            <summary>
            public virtual method that Updates a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Update.</param>
            <remarks>After Updateing into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Project entity = ProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ProjectService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Update(Agile.Entities.TList{Agile.Entities.Project})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Save(Agile.Entities.Project)">
            <summary>
            public virtual method that Saves a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Save.</param>
            <remarks>After Saveing into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Project entity = ProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ProjectService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Save(Agile.Entities.TList{Agile.Entities.Project})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Delete(Agile.Entities.Project)">
            <summary>
            public virtual method that Deletes a Project object into the datasource using a transaction.
            </summary>
            <param name="entity">Project object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Project object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Project entity = ProjectService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ProjectService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Delete(Agile.Entities.TList{Agile.Entities.Project})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Project</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Project</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Project.
             <code><![CDATA[
             TList<Project> list = new TList<Project>();
             Project entity = new Project();
             entity.StringProperty = "foo";
             Project entity2 = new Project();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ProjectService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Delete(Agile.Entities.ProjectKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _projectId
            </summary>
            <param name="_projectId">Project pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepLoadByProjectId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.Project"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_projectId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Project Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Project"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.Project)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Project Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.Project,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Project Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.Project,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.Project"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Project Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.Project})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.Project},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.Project)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.Project},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.Project"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepSave(Agile.Entities.Project)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.Project"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Project Object</param>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepSave(Agile.Entities.Project,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Project object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Project Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Project</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.Project})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Project} Object</param>
        </member>
        <member name="M:Agile.Services.ProjectServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.Project},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Project Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.ProjectServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Agile.Services.DieTypeService">
            <summary>
            An component type implementation of the 'tblDIEType' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Agile.Services.DieTypeServiceBase">
            <summary>
             An object representation of the 'tblDIEType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DieType.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.DieType"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.DieType"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.CreateDieType(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.DieType"/> instance.
            </summary>
            <param name="_initial"></param>
            <param name="_dieTypeName"></param>
            <param name="_description"></param>
            <param name="_isDefault"></param>
            <param name="_selected"></param>
            <param name="_active"></param>
            <param name="_order"></param>
            <param name="_projectId"></param>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Get(Agile.Entities.DieTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.GetByDieTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIEType index.
            </summary>
            <param name="_dieTypeId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieType"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.GetByDieTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIEType index.
            </summary>
            <param name="_dieTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieType"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.DieType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.DieType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DieType} of <c>DieType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DieType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>DieType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DieType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Insert(Agile.Entities.DieType)">
            <summary>
            public virtual method that Inserts a DieType object into the datasource using a transaction.
            </summary>
            <param name="entity">DieType object to Insert.</param>
            <remarks>After Inserting into the datasource, the DieType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DieType entity = new DieType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DieTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Insert(Agile.Entities.TList{Agile.Entities.DieType})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieType</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DieType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DieType.
             <code><![CDATA[
             TList<DieType> list = new TList<DieType>();
             DieType entity = new DieType();
             entity.StringProperty = "foo";
             DieType entity2 = new DieType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Update(Agile.Entities.DieType)">
            <summary>
            public virtual method that Updates a DieType object into the datasource using a transaction.
            </summary>
            <param name="entity">DieType object to Update.</param>
            <remarks>After Updateing into the datasource, the DieType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DieType entity = DieTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DieTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Update(Agile.Entities.TList{Agile.Entities.DieType})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieType</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DieType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DieType.
             <code><![CDATA[
             TList<DieType> list = new TList<DieType>();
             DieType entity = new DieType();
             entity.StringProperty = "foo";
             DieType entity2 = new DieType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Save(Agile.Entities.DieType)">
            <summary>
            public virtual method that Saves a DieType object into the datasource using a transaction.
            </summary>
            <param name="entity">DieType object to Save.</param>
            <remarks>After Saveing into the datasource, the DieType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DieType entity = DieTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DieTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Save(Agile.Entities.TList{Agile.Entities.DieType})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieType</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DieType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DieType.
             <code><![CDATA[
             TList<DieType> list = new TList<DieType>();
             DieType entity = new DieType();
             entity.StringProperty = "foo";
             DieType entity2 = new DieType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Delete(Agile.Entities.DieType)">
            <summary>
            public virtual method that Deletes a DieType object into the datasource using a transaction.
            </summary>
            <param name="entity">DieType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DieType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DieType entity = DieTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DieTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Delete(Agile.Entities.TList{Agile.Entities.DieType})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieType</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DieType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DieType.
             <code><![CDATA[
             TList<DieType> list = new TList<DieType>();
             DieType entity = new DieType();
             entity.StringProperty = "foo";
             DieType entity2 = new DieType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Delete(Agile.Entities.DieTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _dieTypeId
            </summary>
            <param name="_dieTypeId">DieType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepLoadByDieTypeId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.DieType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_dieTypeId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.DieType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DieType Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.DieType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.DieType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.DieType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DieType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.DieType,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.DieType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieType})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.DieType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.DieType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieType},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.DieType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepSave(Agile.Entities.DieType)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.DieType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DieType Object</param>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepSave(Agile.Entities.DieType,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DieType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DieType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DieType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieType})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DieType} Object</param>
        </member>
        <member name="M:Agile.Services.DieTypeServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieType},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DieType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.DieTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Agile.Services.DieTypeService.#ctor">
            <summary>
            Initializes a new instance of the DieTypeService class.
            </summary>
        </member>
        <member name="T:Agile.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Agile.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Agile.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:Agile.Services.ProcessorEventArgs.#ctor(Agile.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:Agile.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:Agile.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:Agile.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Agile.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:Agile.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:Agile.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:Agile.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:Agile.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Agile.Services.IProcessor.ChangeProcessorState(Agile.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:Agile.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Agile.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="T:Agile.Services.PriorityDieRequestServiceBase">
            <summary>
             An object representation of the 'tblPriorityDIERequest' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PriorityDieRequest.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.PriorityDieRequest"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.PriorityDieRequest"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.CreatePriorityDieRequest(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.PriorityDieRequest"/> instance.
            </summary>
            <param name="_priorityDieRequestName"></param>
            <param name="_priorityDieRequestDescription"></param>
            <param name="_color"></param>
            <param name="_colorName"></param>
            <param name="_priorityDieRequestOrder"></param>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Get(Agile.Entities.PriorityDieRequestKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.GetByPriorityDieRequestId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblPriorityDIERequest index.
            </summary>
            <param name="_priorityDieRequestId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.PriorityDieRequest"/> class.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.GetByPriorityDieRequestId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblPriorityDIERequest index.
            </summary>
            <param name="_priorityDieRequestId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.PriorityDieRequest"/> class.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.PriorityDieRequest"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.PriorityDieRequest"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PriorityDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PriorityDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PriorityDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PriorityDieRequest} of <c>PriorityDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PriorityDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>PriorityDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PriorityDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PriorityDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PriorityDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Insert(Agile.Entities.PriorityDieRequest)">
            <summary>
            public virtual method that Inserts a PriorityDieRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">PriorityDieRequest object to Insert.</param>
            <remarks>After Inserting into the datasource, the PriorityDieRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PriorityDieRequest entity = new PriorityDieRequest();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PriorityDieRequestService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Insert(Agile.Entities.TList{Agile.Entities.PriorityDieRequest})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PriorityDieRequest</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PriorityDieRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PriorityDieRequest.
             <code><![CDATA[
             TList<PriorityDieRequest> list = new TList<PriorityDieRequest>();
             PriorityDieRequest entity = new PriorityDieRequest();
             entity.StringProperty = "foo";
             PriorityDieRequest entity2 = new PriorityDieRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PriorityDieRequestService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Update(Agile.Entities.PriorityDieRequest)">
            <summary>
            public virtual method that Updates a PriorityDieRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">PriorityDieRequest object to Update.</param>
            <remarks>After Updateing into the datasource, the PriorityDieRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PriorityDieRequest entity = PriorityDieRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PriorityDieRequestService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Update(Agile.Entities.TList{Agile.Entities.PriorityDieRequest})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PriorityDieRequest</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PriorityDieRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PriorityDieRequest.
             <code><![CDATA[
             TList<PriorityDieRequest> list = new TList<PriorityDieRequest>();
             PriorityDieRequest entity = new PriorityDieRequest();
             entity.StringProperty = "foo";
             PriorityDieRequest entity2 = new PriorityDieRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PriorityDieRequestService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Save(Agile.Entities.PriorityDieRequest)">
            <summary>
            public virtual method that Saves a PriorityDieRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">PriorityDieRequest object to Save.</param>
            <remarks>After Saveing into the datasource, the PriorityDieRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PriorityDieRequest entity = PriorityDieRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PriorityDieRequestService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Save(Agile.Entities.TList{Agile.Entities.PriorityDieRequest})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PriorityDieRequest</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PriorityDieRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PriorityDieRequest.
             <code><![CDATA[
             TList<PriorityDieRequest> list = new TList<PriorityDieRequest>();
             PriorityDieRequest entity = new PriorityDieRequest();
             entity.StringProperty = "foo";
             PriorityDieRequest entity2 = new PriorityDieRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PriorityDieRequestService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Delete(Agile.Entities.PriorityDieRequest)">
            <summary>
            public virtual method that Deletes a PriorityDieRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">PriorityDieRequest object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PriorityDieRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PriorityDieRequest entity = PriorityDieRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PriorityDieRequestService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Delete(Agile.Entities.TList{Agile.Entities.PriorityDieRequest})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PriorityDieRequest</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PriorityDieRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PriorityDieRequest.
             <code><![CDATA[
             TList<PriorityDieRequest> list = new TList<PriorityDieRequest>();
             PriorityDieRequest entity = new PriorityDieRequest();
             entity.StringProperty = "foo";
             PriorityDieRequest entity2 = new PriorityDieRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PriorityDieRequestService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Delete(Agile.Entities.PriorityDieRequestKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _priorityDieRequestId
            </summary>
            <param name="_priorityDieRequestId">PriorityDieRequest pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoadByPriorityDieRequestId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.PriorityDieRequest"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_priorityDieRequestId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PriorityDieRequest Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.PriorityDieRequest"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.PriorityDieRequest)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PriorityDieRequest Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.PriorityDieRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.PriorityDieRequest,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.PriorityDieRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PriorityDieRequest Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.PriorityDieRequest,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.PriorityDieRequest"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PriorityDieRequest Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.PriorityDieRequest})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.PriorityDieRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.PriorityDieRequest},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.PriorityDieRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.PriorityDieRequest},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.PriorityDieRequest"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepSave(Agile.Entities.PriorityDieRequest)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.PriorityDieRequest"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PriorityDieRequest Object</param>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepSave(Agile.Entities.PriorityDieRequest,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PriorityDieRequest object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PriorityDieRequest Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PriorityDieRequest</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.PriorityDieRequest})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PriorityDieRequest} Object</param>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.PriorityDieRequest},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PriorityDieRequest Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.PriorityDieRequestServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Agile.Services.PriorityDieRequestService">
            <summary>
            An component type implementation of the 'tblPriorityDIERequest' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Agile.Services.PriorityDieRequestService.#ctor">
            <summary>
            Initializes a new instance of the PriorityDieRequestService class.
            </summary>
        </member>
        <member name="T:Agile.Services.DieCategoryServiceBase">
            <summary>
             An object representation of the 'tblDIECategory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DieCategory.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.DieCategory"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.DieCategory"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.CreateDieCategory(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.DieCategory"/> instance.
            </summary>
            <param name="_dieCategoryName"></param>
            <param name="_deiCategoryDescription"></param>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Get(Agile.Entities.DieCategoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.GetByDieCategoryId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIECategory index.
            </summary>
            <param name="_dieCategoryId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieCategory"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.GetByDieCategoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIECategory index.
            </summary>
            <param name="_dieCategoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieCategory"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.DieCategory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.DieCategory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieCategory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieCategory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieCategory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DieCategory} of <c>DieCategory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DieCategory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>DieCategory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DieCategory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieCategory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieCategory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Insert(Agile.Entities.DieCategory)">
            <summary>
            public virtual method that Inserts a DieCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">DieCategory object to Insert.</param>
            <remarks>After Inserting into the datasource, the DieCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DieCategory entity = new DieCategory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DieCategoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Insert(Agile.Entities.TList{Agile.Entities.DieCategory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieCategory</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DieCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DieCategory.
             <code><![CDATA[
             TList<DieCategory> list = new TList<DieCategory>();
             DieCategory entity = new DieCategory();
             entity.StringProperty = "foo";
             DieCategory entity2 = new DieCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieCategoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Update(Agile.Entities.DieCategory)">
            <summary>
            public virtual method that Updates a DieCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">DieCategory object to Update.</param>
            <remarks>After Updateing into the datasource, the DieCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DieCategory entity = DieCategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DieCategoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Update(Agile.Entities.TList{Agile.Entities.DieCategory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieCategory</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DieCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DieCategory.
             <code><![CDATA[
             TList<DieCategory> list = new TList<DieCategory>();
             DieCategory entity = new DieCategory();
             entity.StringProperty = "foo";
             DieCategory entity2 = new DieCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieCategoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Save(Agile.Entities.DieCategory)">
            <summary>
            public virtual method that Saves a DieCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">DieCategory object to Save.</param>
            <remarks>After Saveing into the datasource, the DieCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DieCategory entity = DieCategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DieCategoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Save(Agile.Entities.TList{Agile.Entities.DieCategory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieCategory</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DieCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DieCategory.
             <code><![CDATA[
             TList<DieCategory> list = new TList<DieCategory>();
             DieCategory entity = new DieCategory();
             entity.StringProperty = "foo";
             DieCategory entity2 = new DieCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieCategoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Delete(Agile.Entities.DieCategory)">
            <summary>
            public virtual method that Deletes a DieCategory object into the datasource using a transaction.
            </summary>
            <param name="entity">DieCategory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DieCategory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DieCategory entity = DieCategoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DieCategoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Delete(Agile.Entities.TList{Agile.Entities.DieCategory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieCategory</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DieCategory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DieCategory.
             <code><![CDATA[
             TList<DieCategory> list = new TList<DieCategory>();
             DieCategory entity = new DieCategory();
             entity.StringProperty = "foo";
             DieCategory entity2 = new DieCategory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieCategoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Delete(Agile.Entities.DieCategoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _dieCategoryId
            </summary>
            <param name="_dieCategoryId">DieCategory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepLoadByDieCategoryId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.DieCategory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_dieCategoryId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieCategory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieCategory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.DieCategory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DieCategory Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.DieCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.DieCategory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.DieCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DieCategory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.DieCategory,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.DieCategory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieCategory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieCategory})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.DieCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieCategory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.DieCategory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieCategory},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.DieCategory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepSave(Agile.Entities.DieCategory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.DieCategory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DieCategory Object</param>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepSave(Agile.Entities.DieCategory,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DieCategory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DieCategory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DieCategory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieCategory})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DieCategory} Object</param>
        </member>
        <member name="M:Agile.Services.DieCategoryServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieCategory},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DieCategory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.DieCategoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Agile.Services.ReleaseService">
            <summary>
            An component type implementation of the 'tblRelease' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Agile.Services.ReleaseServiceBase">
            <summary>
             An object representation of the 'tblRelease' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Release.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.Release"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.Release"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.CreateRelease(System.Int32,System.DateTime,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.Release"/> instance.
            </summary>
            <param name="_projectId"></param>
            <param name="_releaseDate"></param>
            <param name="_releaseName"></param>
            <param name="_releaseNote"></param>
            <param name="_active"></param>
            <param name="_userId"></param>
            <param name="_lastUserUpdate"></param>
            <param name="_lastDateUpdate"></param>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Get(Agile.Entities.ReleaseKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.GetByReleaseId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblRelease index.
            </summary>
            <param name="_releaseId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Release"/> class.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.GetByReleaseId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblRelease index.
            </summary>
            <param name="_releaseId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Release"/> class.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.Release"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.Release"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Release</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Release</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Release</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Release} of <c>Release</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Release</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Release</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Release</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Release</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Release</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Insert(Agile.Entities.Release)">
            <summary>
            public virtual method that Inserts a Release object into the datasource using a transaction.
            </summary>
            <param name="entity">Release object to Insert.</param>
            <remarks>After Inserting into the datasource, the Release object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Release entity = new Release();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReleaseService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Insert(Agile.Entities.TList{Agile.Entities.Release})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Release</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Release</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Release.
             <code><![CDATA[
             TList<Release> list = new TList<Release>();
             Release entity = new Release();
             entity.StringProperty = "foo";
             Release entity2 = new Release();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReleaseService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Update(Agile.Entities.Release)">
            <summary>
            public virtual method that Updates a Release object into the datasource using a transaction.
            </summary>
            <param name="entity">Release object to Update.</param>
            <remarks>After Updateing into the datasource, the Release object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Release entity = ReleaseService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReleaseService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Update(Agile.Entities.TList{Agile.Entities.Release})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Release</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Release</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Release.
             <code><![CDATA[
             TList<Release> list = new TList<Release>();
             Release entity = new Release();
             entity.StringProperty = "foo";
             Release entity2 = new Release();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReleaseService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Save(Agile.Entities.Release)">
            <summary>
            public virtual method that Saves a Release object into the datasource using a transaction.
            </summary>
            <param name="entity">Release object to Save.</param>
            <remarks>After Saveing into the datasource, the Release object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Release entity = ReleaseService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ReleaseService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Save(Agile.Entities.TList{Agile.Entities.Release})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Release</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Release</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Release.
             <code><![CDATA[
             TList<Release> list = new TList<Release>();
             Release entity = new Release();
             entity.StringProperty = "foo";
             Release entity2 = new Release();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReleaseService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Delete(Agile.Entities.Release)">
            <summary>
            public virtual method that Deletes a Release object into the datasource using a transaction.
            </summary>
            <param name="entity">Release object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Release object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Release entity = ReleaseService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReleaseService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Delete(Agile.Entities.TList{Agile.Entities.Release})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Release</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Release</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Release.
             <code><![CDATA[
             TList<Release> list = new TList<Release>();
             Release entity = new Release();
             entity.StringProperty = "foo";
             Release entity2 = new Release();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReleaseService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Delete(Agile.Entities.ReleaseKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _releaseId
            </summary>
            <param name="_releaseId">Release pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepLoadByReleaseId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.Release"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_releaseId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Release Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.Release"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.Release)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Release Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.Release)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.Release,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.Release)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Release Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.Release,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.Release"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Release Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.Release})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.Release)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.Release},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.Release)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.Release},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.Release"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepSave(Agile.Entities.Release)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.Release"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Release Object</param>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepSave(Agile.Entities.Release,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Release object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Release Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Release</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.Release})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Release} Object</param>
        </member>
        <member name="M:Agile.Services.ReleaseServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.Release},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Release Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.ReleaseServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Agile.Services.ReleaseService.#ctor">
            <summary>
            Initializes a new instance of the ReleaseService class.
            </summary>
        </member>
        <member name="T:Agile.Services.DieStatusService">
            <summary>
            An component type implementation of the 'tblDIEStatus' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Agile.Services.DieStatusServiceBase">
            <summary>
             An object representation of the 'tblDIEStatus' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DieStatus.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.DieStatus"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.DieStatus"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.CreateDieStatus(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.DieStatus"/> instance.
            </summary>
            <param name="_dieNameStatus"></param>
            <param name="_order"></param>
            <param name="_visible"></param>
            <param name="_selected"></param>
            <param name="_isDefault"></param>
            <param name="_iconLink"></param>
            <param name="_isCompleted"></param>
            <param name="_color"></param>
            <param name="_colorName"></param>
            <param name="_projectId"></param>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Get(Agile.Entities.DieStatusKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.GetByDieStatus(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIEStatus index.
            </summary>
            <param name="_dieStatus"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieStatus"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.GetByDieStatus(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIEStatus index.
            </summary>
            <param name="_dieStatus"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieStatus"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.DieStatus"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.DieStatus"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieStatus</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieStatus</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieStatus</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DieStatus} of <c>DieStatus</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DieStatus</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>DieStatus</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DieStatus</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieStatus</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieStatus</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Insert(Agile.Entities.DieStatus)">
            <summary>
            public virtual method that Inserts a DieStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">DieStatus object to Insert.</param>
            <remarks>After Inserting into the datasource, the DieStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DieStatus entity = new DieStatus();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DieStatusService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Insert(Agile.Entities.TList{Agile.Entities.DieStatus})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieStatus</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DieStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DieStatus.
             <code><![CDATA[
             TList<DieStatus> list = new TList<DieStatus>();
             DieStatus entity = new DieStatus();
             entity.StringProperty = "foo";
             DieStatus entity2 = new DieStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieStatusService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Update(Agile.Entities.DieStatus)">
            <summary>
            public virtual method that Updates a DieStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">DieStatus object to Update.</param>
            <remarks>After Updateing into the datasource, the DieStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DieStatus entity = DieStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DieStatusService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Update(Agile.Entities.TList{Agile.Entities.DieStatus})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieStatus</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DieStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DieStatus.
             <code><![CDATA[
             TList<DieStatus> list = new TList<DieStatus>();
             DieStatus entity = new DieStatus();
             entity.StringProperty = "foo";
             DieStatus entity2 = new DieStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieStatusService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Save(Agile.Entities.DieStatus)">
            <summary>
            public virtual method that Saves a DieStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">DieStatus object to Save.</param>
            <remarks>After Saveing into the datasource, the DieStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DieStatus entity = DieStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DieStatusService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Save(Agile.Entities.TList{Agile.Entities.DieStatus})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieStatus</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DieStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DieStatus.
             <code><![CDATA[
             TList<DieStatus> list = new TList<DieStatus>();
             DieStatus entity = new DieStatus();
             entity.StringProperty = "foo";
             DieStatus entity2 = new DieStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieStatusService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Delete(Agile.Entities.DieStatus)">
            <summary>
            public virtual method that Deletes a DieStatus object into the datasource using a transaction.
            </summary>
            <param name="entity">DieStatus object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DieStatus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DieStatus entity = DieStatusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DieStatusService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Delete(Agile.Entities.TList{Agile.Entities.DieStatus})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieStatus</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DieStatus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DieStatus.
             <code><![CDATA[
             TList<DieStatus> list = new TList<DieStatus>();
             DieStatus entity = new DieStatus();
             entity.StringProperty = "foo";
             DieStatus entity2 = new DieStatus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieStatusService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Delete(Agile.Entities.DieStatusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _dieStatus
            </summary>
            <param name="_dieStatus">DieStatus pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepLoadByDieStatus(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.DieStatus"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_dieStatus"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieStatus Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieStatus"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.DieStatus)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DieStatus Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.DieStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.DieStatus,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.DieStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DieStatus Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.DieStatus,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.DieStatus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieStatus Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieStatus})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.DieStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieStatus},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.DieStatus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieStatus},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.DieStatus"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepSave(Agile.Entities.DieStatus)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.DieStatus"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DieStatus Object</param>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepSave(Agile.Entities.DieStatus,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DieStatus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DieStatus Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DieStatus</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieStatus})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DieStatus} Object</param>
        </member>
        <member name="M:Agile.Services.DieStatusServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieStatus},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DieStatus Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.DieStatusServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Agile.Services.DieStatusService.#ctor">
            <summary>
            Initializes a new instance of the DieStatusService class.
            </summary>
        </member>
        <member name="M:Agile.Services.DieStatusService.GetDIEStatusCount(System.Int32)">
            <summary>
            Count the DIE request by status.
            </summary>
            <param name="statusId">The status id.</param>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DieStatusService.GetDIECompletePercent">
            <summary>
            Gets the DIE request complete percent.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Agile.Services.DieRequestServiceBase">
            <summary>
             An object representation of the 'tblDIERequest' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DieRequest.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.DieRequest"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.DieRequest"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.CreateDieRequest(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.DieRequest"/> instance.
            </summary>
            <param name="_dieName">Tên của bảng</param>
            <param name="_dieTag"></param>
            <param name="_dieDescription"></param>
            <param name="_dieTypeId"></param>
            <param name="_resolutionsId"></param>
            <param name="_userId"></param>
            <param name="_projectId"></param>
            <param name="_dieStatus"></param>
            <param name="_priorityDieRequestId"></param>
            <param name="_dieDateSubmit"></param>
            <param name="_codeBy"></param>
            <param name="_owner"></param>
            <param name="_updateTime"></param>
            <param name="_lastUserUpdate"></param>
            <param name="_targetDate"></param>
            <param name="_completedReleaseId"></param>
            <param name="_milestoneId"></param>
            <param name="_dieCategoryId"></param>
            <param name="_estimated"></param>
            <param name="_actual"></param>
            <param name="_parentDie"></param>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByDieCategoryId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblDIECategory key.
            	FK_tblDIERequest_tblDIECategory Description: 
            </summary>
            <param name="_dieCategoryId"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByDieCategoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblDIECategory key.
            	FK_tblDIERequest_tblDIECategory Description: 
            </summary>
            <param name="_dieCategoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByParentDie(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblDIERequest key.
            	FK_tblDIERequest_tblDIERequest Description: 
            </summary>
            <param name="_parentDie"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByParentDie(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblDIERequest key.
            	FK_tblDIERequest_tblDIERequest Description: 
            </summary>
            <param name="_parentDie"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByDieStatus(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblDIEStatus key.
            	FK_tblDIERequest_tblDIEStatus Description: 
            </summary>
            <param name="_dieStatus"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByDieStatus(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblDIEStatus key.
            	FK_tblDIERequest_tblDIEStatus Description: 
            </summary>
            <param name="_dieStatus"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByDieTypeId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblDIEType key.
            	FK_tblDIERequest_tblDIEType Description: 
            </summary>
            <param name="_dieTypeId"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByDieTypeId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblDIEType key.
            	FK_tblDIERequest_tblDIEType Description: 
            </summary>
            <param name="_dieTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByMilestoneId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblMileStole key.
            	FK_tblDIERequest_tblMileStole Description: 
            </summary>
            <param name="_milestoneId"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByMilestoneId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblMileStole key.
            	FK_tblDIERequest_tblMileStole Description: 
            </summary>
            <param name="_milestoneId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByPriorityDieRequestId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblPriorityDIERequest key.
            	FK_tblDIERequest_tblPriorityDIERequest Description: 
            </summary>
            <param name="_priorityDieRequestId"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByPriorityDieRequestId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblPriorityDIERequest key.
            	FK_tblDIERequest_tblPriorityDIERequest Description: 
            </summary>
            <param name="_priorityDieRequestId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByProjectId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblProject key.
            	FK_tblDIERequest_tblProject Description: 
            </summary>
            <param name="_projectId"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByProjectId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblProject key.
            	FK_tblDIERequest_tblProject Description: 
            </summary>
            <param name="_projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByCompletedReleaseId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblRelease key.
            	FK_tblDIERequest_tblRelease Description: 
            </summary>
            <param name="_completedReleaseId"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByCompletedReleaseId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblRelease key.
            	FK_tblDIERequest_tblRelease Description: 
            </summary>
            <param name="_completedReleaseId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByResolutionsId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblResolutions key.
            	FK_tblDIERequest_tblResolutions Description: 
            </summary>
            <param name="_resolutionsId"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByResolutionsId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblResolutions key.
            	FK_tblDIERequest_tblResolutions Description: 
            </summary>
            <param name="_resolutionsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByUserId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblUser key.
            	FK_tblDIERequest_tblUser Description: 
            </summary>
            <param name="_userId"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByUserId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblUser key.
            	FK_tblDIERequest_tblUser Description: 
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByCodeBy(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblUser_CodeBy key.
            	FK_tblDIERequest_tblUser_CodeBy Description: 
            </summary>
            <param name="_codeBy"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByCodeBy(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblUser_CodeBy key.
            	FK_tblDIERequest_tblUser_CodeBy Description: 
            </summary>
            <param name="_codeBy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByOwner(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblUser_Owner key.
            	FK_tblDIERequest_tblUser_Owner Description: 
            </summary>
            <param name="_owner"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByOwner(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblUser_Owner key.
            	FK_tblDIERequest_tblUser_Owner Description: 
            </summary>
            <param name="_owner"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByLastUserUpdate(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblUser_UserUpdate key.
            	FK_tblDIERequest_tblUser_UserUpdate Description: 
            </summary>
            <param name="_lastUserUpdate"></param>
            <returns>Returns a generic collection of DieRequest objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByLastUserUpdate(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIERequest_tblUser_UserUpdate key.
            	FK_tblDIERequest_tblUser_UserUpdate Description: 
            </summary>
            <param name="_lastUserUpdate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Get(Agile.Entities.DieRequestKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByDieRequestId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIERequest index.
            </summary>
            <param name="_dieRequestId">khóa của bảng</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieRequest"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetByDieRequestId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIERequest index.
            </summary>
            <param name="_dieRequestId">khóa của bảng</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieRequest"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.DieRequest"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.DieRequest"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DieRequest} of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Insert(Agile.Entities.DieRequest)">
            <summary>
            public virtual method that Inserts a DieRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">DieRequest object to Insert.</param>
            <remarks>After Inserting into the datasource, the DieRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DieRequest entity = new DieRequest();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DieRequestService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Insert(Agile.Entities.TList{Agile.Entities.DieRequest})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieRequest</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DieRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DieRequest.
             <code><![CDATA[
             TList<DieRequest> list = new TList<DieRequest>();
             DieRequest entity = new DieRequest();
             entity.StringProperty = "foo";
             DieRequest entity2 = new DieRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieRequestService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Update(Agile.Entities.DieRequest)">
            <summary>
            public virtual method that Updates a DieRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">DieRequest object to Update.</param>
            <remarks>After Updateing into the datasource, the DieRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DieRequest entity = DieRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DieRequestService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Update(Agile.Entities.TList{Agile.Entities.DieRequest})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieRequest</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DieRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DieRequest.
             <code><![CDATA[
             TList<DieRequest> list = new TList<DieRequest>();
             DieRequest entity = new DieRequest();
             entity.StringProperty = "foo";
             DieRequest entity2 = new DieRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieRequestService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Save(Agile.Entities.DieRequest)">
            <summary>
            public virtual method that Saves a DieRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">DieRequest object to Save.</param>
            <remarks>After Saveing into the datasource, the DieRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DieRequest entity = DieRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DieRequestService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Save(Agile.Entities.TList{Agile.Entities.DieRequest})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieRequest</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DieRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DieRequest.
             <code><![CDATA[
             TList<DieRequest> list = new TList<DieRequest>();
             DieRequest entity = new DieRequest();
             entity.StringProperty = "foo";
             DieRequest entity2 = new DieRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieRequestService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Delete(Agile.Entities.DieRequest)">
            <summary>
            public virtual method that Deletes a DieRequest object into the datasource using a transaction.
            </summary>
            <param name="entity">DieRequest object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DieRequest object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DieRequest entity = DieRequestService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DieRequestService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Delete(Agile.Entities.TList{Agile.Entities.DieRequest})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieRequest</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DieRequest</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DieRequest.
             <code><![CDATA[
             TList<DieRequest> list = new TList<DieRequest>();
             DieRequest entity = new DieRequest();
             entity.StringProperty = "foo";
             DieRequest entity2 = new DieRequest();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieRequestService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Delete(Agile.Entities.DieRequestKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _dieRequestId
            </summary>
            <param name="_dieRequestId">DieRequest pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepLoadByDieRequestId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.DieRequest"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_dieRequestId">khóa của bảng</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieRequest Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieRequest"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.DieRequest)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DieRequest Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.DieRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.DieRequest,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.DieRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DieRequest Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.DieRequest,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.DieRequest"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieRequest Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieRequest})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.DieRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieRequest},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.DieRequest)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieRequest},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.DieRequest"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepSave(Agile.Entities.DieRequest)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.DieRequest"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DieRequest Object</param>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepSave(Agile.Entities.DieRequest,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DieRequest object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DieRequest Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DieRequest</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieRequest})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DieRequest} Object</param>
        </member>
        <member name="M:Agile.Services.DieRequestServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieRequest},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DieRequest Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.DieRequestServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Agile.Services.CustomMembershipProvider">
            <summary>
            Custom membership provider
            </summary>
        </member>
        <member name="M:Agile.Services.CustomMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source.
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
            <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:Agile.Services.CustomMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="username">The name of the user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:Agile.Services.CustomMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets user information from the data source based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:Agile.Services.CustomMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
            <param name="username">The name of the user to validate.</param>
            <param name="password">The password for the specified user.</param>
            <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
        </member>
        <member name="T:Agile.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:Agile.Services.DieAttachFileServiceBase">
            <summary>
             An object representation of the 'tblDIEAttachFile' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DieAttachFile.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.DieAttachFile"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.DieAttachFile"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.CreateDieAttachFile(System.Int32,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.DieAttachFile"/> instance.
            </summary>
            <param name="_dieRequestId"></param>
            <param name="_dieFileName"></param>
            <param name="_dieFileUrl"></param>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetByDieRequestId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIEAttachFile_tblDIERequest key.
            	FK_tblDIEAttachFile_tblDIERequest Description: 
            </summary>
            <param name="_dieRequestId"></param>
            <returns>Returns a generic collection of DieAttachFile objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetByDieRequestId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the FK_tblDIEAttachFile_tblDIERequest key.
            	FK_tblDIEAttachFile_tblDIERequest Description: 
            </summary>
            <param name="_dieRequestId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:Agile.Entities.TList`1"/> of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Get(Agile.Entities.DieAttachFileKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetByDieAttachFileId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIEAttachFile index.
            </summary>
            <param name="_dieAttachFileId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieAttachFile"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetByDieAttachFileId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIEAttachFile index.
            </summary>
            <param name="_dieAttachFileId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieAttachFile"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.DieAttachFile"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.DieAttachFile"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DieAttachFile} of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieAttachFile</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Insert(Agile.Entities.DieAttachFile)">
            <summary>
            public virtual method that Inserts a DieAttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">DieAttachFile object to Insert.</param>
            <remarks>After Inserting into the datasource, the DieAttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DieAttachFile entity = new DieAttachFile();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DieAttachFileService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Insert(Agile.Entities.TList{Agile.Entities.DieAttachFile})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieAttachFile</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DieAttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DieAttachFile.
             <code><![CDATA[
             TList<DieAttachFile> list = new TList<DieAttachFile>();
             DieAttachFile entity = new DieAttachFile();
             entity.StringProperty = "foo";
             DieAttachFile entity2 = new DieAttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieAttachFileService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Update(Agile.Entities.DieAttachFile)">
            <summary>
            public virtual method that Updates a DieAttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">DieAttachFile object to Update.</param>
            <remarks>After Updateing into the datasource, the DieAttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DieAttachFile entity = DieAttachFileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DieAttachFileService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Update(Agile.Entities.TList{Agile.Entities.DieAttachFile})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieAttachFile</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DieAttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DieAttachFile.
             <code><![CDATA[
             TList<DieAttachFile> list = new TList<DieAttachFile>();
             DieAttachFile entity = new DieAttachFile();
             entity.StringProperty = "foo";
             DieAttachFile entity2 = new DieAttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieAttachFileService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Save(Agile.Entities.DieAttachFile)">
            <summary>
            public virtual method that Saves a DieAttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">DieAttachFile object to Save.</param>
            <remarks>After Saveing into the datasource, the DieAttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DieAttachFile entity = DieAttachFileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DieAttachFileService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Save(Agile.Entities.TList{Agile.Entities.DieAttachFile})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieAttachFile</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DieAttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DieAttachFile.
             <code><![CDATA[
             TList<DieAttachFile> list = new TList<DieAttachFile>();
             DieAttachFile entity = new DieAttachFile();
             entity.StringProperty = "foo";
             DieAttachFile entity2 = new DieAttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieAttachFileService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Delete(Agile.Entities.DieAttachFile)">
            <summary>
            public virtual method that Deletes a DieAttachFile object into the datasource using a transaction.
            </summary>
            <param name="entity">DieAttachFile object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DieAttachFile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DieAttachFile entity = DieAttachFileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DieAttachFileService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Delete(Agile.Entities.TList{Agile.Entities.DieAttachFile})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieAttachFile</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DieAttachFile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DieAttachFile.
             <code><![CDATA[
             TList<DieAttachFile> list = new TList<DieAttachFile>();
             DieAttachFile entity = new DieAttachFile();
             entity.StringProperty = "foo";
             DieAttachFile entity2 = new DieAttachFile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieAttachFileService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Delete(Agile.Entities.DieAttachFileKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _dieAttachFileId
            </summary>
            <param name="_dieAttachFileId">DieAttachFile pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepLoadByDieAttachFileId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.DieAttachFile"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_dieAttachFileId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieAttachFile Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieAttachFile"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.DieAttachFile)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DieAttachFile Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.DieAttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.DieAttachFile,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.DieAttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DieAttachFile Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.DieAttachFile,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.DieAttachFile"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieAttachFile Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieAttachFile})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.DieAttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieAttachFile},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.DieAttachFile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieAttachFile},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.DieAttachFile"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepSave(Agile.Entities.DieAttachFile)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.DieAttachFile"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DieAttachFile Object</param>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepSave(Agile.Entities.DieAttachFile,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DieAttachFile object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DieAttachFile Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DieAttachFile</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieAttachFile})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DieAttachFile} Object</param>
        </member>
        <member name="M:Agile.Services.DieAttachFileServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieAttachFile},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DieAttachFile Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.DieAttachFileServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Agile.Services.ActionTypeService">
            <summary>
            An component type implementation of the 'tblActionType' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Agile.Services.ActionTypeServiceBase">
            <summary>
             An object representation of the 'tblActionType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ActionType.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.ActionType"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.ActionType"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.CreateActionType(System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.ActionType"/> instance.
            </summary>
            <param name="_actionTypeName"></param>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Get(Agile.Entities.ActionTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.GetByActionTypeId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblActionType index.
            </summary>
            <param name="_actionTypeId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.GetByActionTypeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblActionType index.
            </summary>
            <param name="_actionTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.ActionType"/> class.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.ActionType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.ActionType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActionType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActionType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ActionType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ActionType} of <c>ActionType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ActionType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ActionType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ActionType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ActionType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ActionType</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Insert(Agile.Entities.ActionType)">
            <summary>
            public virtual method that Inserts a ActionType object into the datasource using a transaction.
            </summary>
            <param name="entity">ActionType object to Insert.</param>
            <remarks>After Inserting into the datasource, the ActionType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ActionType entity = new ActionType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ActionTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Insert(Agile.Entities.TList{Agile.Entities.ActionType})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActionType</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ActionType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ActionType.
             <code><![CDATA[
             TList<ActionType> list = new TList<ActionType>();
             ActionType entity = new ActionType();
             entity.StringProperty = "foo";
             ActionType entity2 = new ActionType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActionTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Update(Agile.Entities.ActionType)">
            <summary>
            public virtual method that Updates a ActionType object into the datasource using a transaction.
            </summary>
            <param name="entity">ActionType object to Update.</param>
            <remarks>After Updateing into the datasource, the ActionType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ActionType entity = ActionTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ActionTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Update(Agile.Entities.TList{Agile.Entities.ActionType})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActionType</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ActionType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ActionType.
             <code><![CDATA[
             TList<ActionType> list = new TList<ActionType>();
             ActionType entity = new ActionType();
             entity.StringProperty = "foo";
             ActionType entity2 = new ActionType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActionTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Save(Agile.Entities.ActionType)">
            <summary>
            public virtual method that Saves a ActionType object into the datasource using a transaction.
            </summary>
            <param name="entity">ActionType object to Save.</param>
            <remarks>After Saveing into the datasource, the ActionType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ActionType entity = ActionTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ActionTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Save(Agile.Entities.TList{Agile.Entities.ActionType})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActionType</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ActionType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ActionType.
             <code><![CDATA[
             TList<ActionType> list = new TList<ActionType>();
             ActionType entity = new ActionType();
             entity.StringProperty = "foo";
             ActionType entity2 = new ActionType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActionTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Delete(Agile.Entities.ActionType)">
            <summary>
            public virtual method that Deletes a ActionType object into the datasource using a transaction.
            </summary>
            <param name="entity">ActionType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ActionType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ActionType entity = ActionTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ActionTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Delete(Agile.Entities.TList{Agile.Entities.ActionType})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ActionType</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ActionType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ActionType.
             <code><![CDATA[
             TList<ActionType> list = new TList<ActionType>();
             ActionType entity = new ActionType();
             entity.StringProperty = "foo";
             ActionType entity2 = new ActionType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ActionTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Delete(Agile.Entities.ActionTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _actionTypeId
            </summary>
            <param name="_actionTypeId">ActionType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepLoadByActionTypeId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.ActionType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_actionTypeId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActionType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.ActionType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.ActionType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ActionType Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.ActionType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.ActionType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.ActionType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ActionType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.ActionType,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.ActionType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ActionType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.ActionType})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.ActionType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.ActionType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.ActionType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.ActionType},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.ActionType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepSave(Agile.Entities.ActionType)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.ActionType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ActionType Object</param>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepSave(Agile.Entities.ActionType,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ActionType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ActionType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ActionType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.ActionType})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ActionType} Object</param>
        </member>
        <member name="M:Agile.Services.ActionTypeServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.ActionType},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ActionType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.ActionTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Agile.Services.ActionTypeService.#ctor">
            <summary>
            Initializes a new instance of the ActionTypeService class.
            </summary>
        </member>
        <member name="T:Agile.Services.ProjectService">
            <summary>
            An component type implementation of the 'tblProject' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Agile.Services.ProjectService.#ctor">
            <summary>
            Initializes a new instance of the ProjectService class.
            </summary>
        </member>
        <member name="T:Agile.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="M:Agile.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Agile.Services.ProcessorBase.ChangeProcessorState(Agile.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Agile.Services.ProcessorBase.OnNotifyProcessorStateChanging(Agile.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:Agile.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:Agile.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:Agile.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:Agile.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:Agile.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Agile.Services.HomeDieRequestServiceBase">
            <summary>
             An object representation of the 'HomeDIERequest' View.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HomeDieRequest.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.HomeDieRequest"/> class.
             </remarks>
        </member>
        <member name="T:Agile.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:Agile.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.OnProcessStarting(Agile.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.OnProcessEnded(Agile.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.ServiceViewBaseCore`1.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:Agile.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Agile.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Agile.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:Agile.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:Agile.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:Agile.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:Agile.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.HomeDieRequest"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.CreateHomeDieRequest(System.String,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.HomeDieRequest"/> instance.
            </summary>
            <param name="_dieName"></param>
            <param name="_dieRequestId"></param>
            <param name="_dieTag"></param>
            <param name="_dieDescription"></param>
            <param name="_updateUserId"></param>
            <param name="_projectId"></param>
            <param name="_dieDateSubmit"></param>
            <param name="_dieNameStatus"></param>
            <param name="_dieTypeName"></param>
            <param name="_priorityDieRequestName"></param>
            <param name="_color"></param>
            <param name="_colorName"></param>
            <param name="_dieStatus"></param>
            <param name="_updateTime"></param>
            <param name="_updatedUsername"></param>
            <param name="_targetDate"></param>
            <param name="_estimated"></param>
            <param name="_actual"></param>
            <param name="_userName"></param>
            <param name="_updatedUserId"></param>
            <param name="_dieSubmitDateOnly"></param>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.Get(System.String,System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HomeDieRequest} of <c>HomeDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.HomeDieRequest"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.HomeDieRequest"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.HomeDieRequestServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HomeDieRequest</c> objects.</returns>
        </member>
        <member name="T:Agile.Services.UserService">
            <summary>
            An component type implementation of the 'tblUser' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Agile.Services.UserServiceBase">
            <summary>
             An object representation of the 'tblUser' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the User.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.User"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.UserServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.User"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.UserServiceBase.CreateUser(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.User"/> instance.
            </summary>
            <param name="_userName"></param>
            <param name="_passWord"></param>
            <param name="_qlnsId"></param>
            <param name="_email"></param>
            <param name="_employeeName"></param>
            <param name="_remove"></param>
            <param name="_isLoginSystem"></param>
            <param name="_updateDate"></param>
            <param name="_userUpdate"></param>
            <param name="_pageDefaultLogin"></param>
            <param name="_dateCreated"></param>
            <param name="_dateRemoved"></param>
            <param name="_isNoBody"></param>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Get(Agile.Entities.UserKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetByUserId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key IX_tblUser_Email index.
            </summary>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.User"/> class.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetByUserId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key IX_tblUser_Email index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.User"/> class.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetByUserName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key IX_tblUsername index.
            </summary>
            <param name="_userName"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.User"/> class.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetByUserName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key IX_tblUsername index.
            </summary>
            <param name="_userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.User"/> class.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.User"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.User"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{User} of <c>User</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Insert(Agile.Entities.User)">
            <summary>
            public virtual method that Inserts a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Insert.</param>
            <remarks>After Inserting into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            User entity = new User();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Insert(Agile.Entities.TList{Agile.Entities.User})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Update(Agile.Entities.User)">
            <summary>
            public virtual method that Updates a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Update.</param>
            <remarks>After Updateing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Update(Agile.Entities.TList{Agile.Entities.User})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Save(Agile.Entities.User)">
            <summary>
            public virtual method that Saves a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Save.</param>
            <remarks>After Saveing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Save(Agile.Entities.TList{Agile.Entities.User})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Delete(Agile.Entities.User)">
            <summary>
            public virtual method that Deletes a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Delete.</param>
            <remarks>After Deleteing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Delete(Agile.Entities.TList{Agile.Entities.User})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Delete(Agile.Entities.UserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _userId
            </summary>
            <param name="_userId">User pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepLoadByUserId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.User"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_userId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.User"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepLoadByUserName(System.String,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.User"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_userName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.User"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.User)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">User Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.User,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">User Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.User,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.User"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.User})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.User},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.User},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.User"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepSave(Agile.Entities.User)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.User"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">User Object</param>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepSave(Agile.Entities.User,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the User object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">User Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>User</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.User})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{User} Object</param>
        </member>
        <member name="M:Agile.Services.UserServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.User},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.UserServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Agile.Services.UserService.#ctor">
            <summary>
            Initializes a new instance of the UserService class.
            </summary>
        </member>
        <member name="M:Agile.Services.UserService.ValidateUser(System.String,System.String)">
            <summary>
            Logins the specified username.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="T:Agile.Services.DieAttachFileService">
            <summary>
            An component type implementation of the 'tblDIEAttachFile' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Agile.Services.DieAttachFileService.#ctor">
            <summary>
            Initializes a new instance of the DieAttachFileService class.
            </summary>
        </member>
        <member name="T:Agile.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:Agile.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:Agile.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:Agile.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:Agile.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:Agile.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:Agile.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:Agile.Services.DieHistoryService">
            <summary>
            An component type implementation of the 'tblDIEHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:Agile.Services.DieHistoryServiceBase">
            <summary>
             An object representation of the 'tblDIEHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the DieHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.DieHistory"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.DieHistory"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.CreateDieHistory(System.Int32,System.DateTime,System.Int16,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.DieHistory"/> instance.
            </summary>
            <param name="_dieRequestId"></param>
            <param name="_dieDateSubmit"></param>
            <param name="_dieStatus">trang thai cua DIE, mac dinh khi tao ra (submit) la 1</param>
            <param name="_dieHistoryNote"></param>
            <param name="_dieHistoryNoteJp"></param>
            <param name="_releaseId"></param>
            <param name="_userId"></param>
            <param name="_owner"></param>
            <param name="_lastUserUpdate"></param>
            <param name="_lastTimeUpdate"></param>
            <param name="_actionTypeId"></param>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Get(Agile.Entities.DieHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.GetByDieHistoryId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIEHistory index.
            </summary>
            <param name="_dieHistoryId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieHistory"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.GetByDieHistoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblDIEHistory index.
            </summary>
            <param name="_dieHistoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieHistory"/> class.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.DieHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.DieHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieHistory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieHistory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>DieHistory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{DieHistory} of <c>DieHistory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>DieHistory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>DieHistory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>DieHistory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieHistory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>DieHistory</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Insert(Agile.Entities.DieHistory)">
            <summary>
            public virtual method that Inserts a DieHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">DieHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the DieHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            DieHistory entity = new DieHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DieHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Insert(Agile.Entities.TList{Agile.Entities.DieHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieHistory</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>DieHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of DieHistory.
             <code><![CDATA[
             TList<DieHistory> list = new TList<DieHistory>();
             DieHistory entity = new DieHistory();
             entity.StringProperty = "foo";
             DieHistory entity2 = new DieHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Update(Agile.Entities.DieHistory)">
            <summary>
            public virtual method that Updates a DieHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">DieHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the DieHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            DieHistory entity = DieHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DieHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Update(Agile.Entities.TList{Agile.Entities.DieHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieHistory</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>DieHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of DieHistory.
             <code><![CDATA[
             TList<DieHistory> list = new TList<DieHistory>();
             DieHistory entity = new DieHistory();
             entity.StringProperty = "foo";
             DieHistory entity2 = new DieHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Save(Agile.Entities.DieHistory)">
            <summary>
            public virtual method that Saves a DieHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">DieHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the DieHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            DieHistory entity = DieHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DieHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Save(Agile.Entities.TList{Agile.Entities.DieHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieHistory</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>DieHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of DieHistory.
             <code><![CDATA[
             TList<DieHistory> list = new TList<DieHistory>();
             DieHistory entity = new DieHistory();
             entity.StringProperty = "foo";
             DieHistory entity2 = new DieHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Delete(Agile.Entities.DieHistory)">
            <summary>
            public virtual method that Deletes a DieHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">DieHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the DieHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            DieHistory entity = DieHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DieHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Delete(Agile.Entities.TList{Agile.Entities.DieHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>DieHistory</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>DieHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of DieHistory.
             <code><![CDATA[
             TList<DieHistory> list = new TList<DieHistory>();
             DieHistory entity = new DieHistory();
             entity.StringProperty = "foo";
             DieHistory entity2 = new DieHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DieHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Delete(Agile.Entities.DieHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _dieHistoryId
            </summary>
            <param name="_dieHistoryId">DieHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepLoadByDieHistoryId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.DieHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_dieHistoryId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.DieHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.DieHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">DieHistory Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.DieHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.DieHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.DieHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">DieHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.DieHistory,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.DieHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">DieHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieHistory})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.DieHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.DieHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.DieHistory},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.DieHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepSave(Agile.Entities.DieHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.DieHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">DieHistory Object</param>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepSave(Agile.Entities.DieHistory,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the DieHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">DieHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>DieHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieHistory})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{DieHistory} Object</param>
        </member>
        <member name="M:Agile.Services.DieHistoryServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.DieHistory},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">DieHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.DieHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:Agile.Services.DieHistoryService.#ctor">
            <summary>
            Initializes a new instance of the DieHistoryService class.
            </summary>
        </member>
        <member name="T:Agile.Services.MileStoleServiceBase">
            <summary>
             An object representation of the 'tblMileStole' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the MileStole.cs file instead.
             All custom implementations should be done in the <see cref="T:Agile.Entities.MileStole"/> class.
             </remarks>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:Agile.Entities.MileStole"/> instance .
            </summary>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.CreateMileStole(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:Agile.Entities.MileStole"/> instance.
            </summary>
            <param name="_mileStoleName"></param>
            <param name="_originalDueDate"></param>
            <param name="_revisedDueDate"></param>
            <param name="_completeDate"></param>
            <param name="_progress"></param>
            <param name="_projectId"></param>
            <param name="_enabled"></param>
            <param name="_mileStoleOrder"></param>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Get(Agile.Entities.MileStoleKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.GetByMileStoleId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblMileStole index.
            </summary>
            <param name="_mileStoleId"></param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.MileStole"/> class.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.GetByMileStoleId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:Agile.Entities.TList`1"/> from the datasource based on the primary key PK_tblMileStole index.
            </summary>
            <param name="_mileStoleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.MileStole"/> class.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:Agile.Entities.MileStole"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:Agile.Entities.MileStole"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:Agile.Entities.TList`1"/> </returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MileStole</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:Agile.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MileStole</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:Agile.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MileStole</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{MileStole} of <c>MileStole</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Find(Agile.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>MileStole</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>MileStole</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>MileStole</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Find(Agile.Data.IFilterParameterCollection,Agile.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Agile.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MileStole</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Find(Agile.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Agile.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MileStole</c> objects.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Insert(Agile.Entities.MileStole)">
            <summary>
            public virtual method that Inserts a MileStole object into the datasource using a transaction.
            </summary>
            <param name="entity">MileStole object to Insert.</param>
            <remarks>After Inserting into the datasource, the MileStole object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            MileStole entity = new MileStole();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	MileStoleService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Insert(Agile.Entities.TList{Agile.Entities.MileStole})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MileStole</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>MileStole</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of MileStole.
             <code><![CDATA[
             TList<MileStole> list = new TList<MileStole>();
             MileStole entity = new MileStole();
             entity.StringProperty = "foo";
             MileStole entity2 = new MileStole();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MileStoleService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Update(Agile.Entities.MileStole)">
            <summary>
            public virtual method that Updates a MileStole object into the datasource using a transaction.
            </summary>
            <param name="entity">MileStole object to Update.</param>
            <remarks>After Updateing into the datasource, the MileStole object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            MileStole entity = MileStoleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	MileStoleService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Update(Agile.Entities.TList{Agile.Entities.MileStole})">
             <summary>
             public virtual method that Updates rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MileStole</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>MileStole</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of MileStole.
             <code><![CDATA[
             TList<MileStole> list = new TList<MileStole>();
             MileStole entity = new MileStole();
             entity.StringProperty = "foo";
             MileStole entity2 = new MileStole();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MileStoleService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Save(Agile.Entities.MileStole)">
            <summary>
            public virtual method that Saves a MileStole object into the datasource using a transaction.
            </summary>
            <param name="entity">MileStole object to Save.</param>
            <remarks>After Saveing into the datasource, the MileStole object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            MileStole entity = MileStoleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	MileStoleService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Save(Agile.Entities.TList{Agile.Entities.MileStole})">
             <summary>
             public virtual method that Saves rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MileStole</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>MileStole</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of MileStole.
             <code><![CDATA[
             TList<MileStole> list = new TList<MileStole>();
             MileStole entity = new MileStole();
             entity.StringProperty = "foo";
             MileStole entity2 = new MileStole();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MileStoleService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Delete(Agile.Entities.MileStole)">
            <summary>
            public virtual method that Deletes a MileStole object into the datasource using a transaction.
            </summary>
            <param name="entity">MileStole object to Delete.</param>
            <remarks>After Deleteing into the datasource, the MileStole object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            MileStole entity = MileStoleService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	MileStoleService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Delete(Agile.Entities.TList{Agile.Entities.MileStole})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:Agile.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MileStole</c> objects in a <see cref="T:Agile.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>MileStole</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of MileStole.
             <code><![CDATA[
             TList<MileStole> list = new TList<MileStole>();
             MileStole entity = new MileStole();
             entity.StringProperty = "foo";
             MileStole entity2 = new MileStole();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MileStoleService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Delete(Agile.Entities.MileStoleKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _mileStoleId
            </summary>
            <param name="_mileStoleId">MileStole pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepLoadByMileStoleId(System.Int32,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:Agile.Entities.MileStole"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <param name="_mileStoleId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MileStole Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:Agile.Entities.MileStole"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.MileStole)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">MileStole Object</param>
            <remarks>
            <seealso cref="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.MileStole)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.MileStole,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.MileStole)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">MileStole Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.MileStole,System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:Agile.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Agile.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:Agile.Entities.MileStole"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MileStole Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.MileStole})">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.MileStole)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.MileStole},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:Agile.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.MileStole)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:Agile.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepLoad(Agile.Entities.TList{Agile.Entities.MileStole},System.Boolean,Agile.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:Agile.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:Agile.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:Agile.Entities.MileStole"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepSave(Agile.Entities.MileStole)">
            <summary>
            public virtualDeep Saves the <see cref="T:Agile.Entities.MileStole"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">MileStole Object</param>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepSave(Agile.Entities.MileStole,Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the MileStole object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">MileStole Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>MileStole</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.MileStole})">
            <summary>
            Deep Save the entire <see cref="T:Agile.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{MileStole} Object</param>
        </member>
        <member name="M:Agile.Services.MileStoleServiceBase.DeepSave(Agile.Entities.TList{Agile.Entities.MileStole},Agile.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:Agile.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:Agile.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">MileStole Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:Agile.Services.MileStoleServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:Agile.Services.DieCategoryService">
            <summary>
            An component type implementation of the 'tblDIECategory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Agile.Services.DieCategoryService.#ctor">
            <summary>
            Initializes a new instance of the DieCategoryService class.
            </summary>
        </member>
        <member name="M:Agile.Services.DieCategoryService.GetDieRequestPercent(System.Int32)">
            <summary>
            Gets the die request percent.
            </summary>
            <param name="categoryId">The category id.</param>
            <returns></returns>
        </member>
        <member name="T:Agile.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="T:Agile.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:Agile.Services.IProcessorResult.AddBrokenRulesList(System.Type,Agile.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:Agile.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Agile.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:Agile.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="M:Agile.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:Agile.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,Agile.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:Agile.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:Agile.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:Agile.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:Agile.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:Agile.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:Agile.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:Agile.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:Agile.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:Agile.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Agile.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:Agile.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:Agile.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:Agile.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:Agile.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:Agile.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:Agile.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:Agile.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:Agile.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:Agile.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:Agile.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:Agile.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:Agile.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:Agile.Services.HomeDieRequestService">
            <summary>
             An component type implementation of the 'HomeDIERequest' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:Agile.Services.HomeDieRequestService.#ctor">
            <summary>
            Initializes a new instance of the HomeDieRequestService class.
            </summary>
        </member>
        <member name="T:Agile.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:Agile.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Agile.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:Agile.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:Agile.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:Agile.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:Agile.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:Agile.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:Agile.Services.ConnectionScope.Copy(Agile.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:Agile.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:Agile.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:Agile.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="T:Agile.Data.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:Agile.Data.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:Agile.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="T:Agile.Data.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:Agile.Data.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:Agile.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:Agile.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:Agile.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agile.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Agile.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:Agile.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:Agile.Services.MileStoleService">
            <summary>
            An component type implementation of the 'tblMileStole' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Agile.Services.MileStoleService.#ctor">
            <summary>
            Initializes a new instance of the MileStoleService class.
            </summary>
        </member>
        <member name="T:Agile.Services.DieRequestService">
            <summary>
            An component type implementation of the 'tblDIERequest' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:Agile.Services.DieRequestService.#ctor">
            <summary>
            Initializes a new instance of the DieRequestService class.
            </summary>
        </member>
    </members>
</doc>
