
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Release.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Agile.Entities.Validation;
#endregion

namespace Agile.Entities
{
	///<summary>
	/// An object representation of the 'tblRelease' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ReleaseBase : EntityBase, IRelease, IEntityId<ReleaseKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ReleaseEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ReleaseEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ReleaseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Release> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ReleaseEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ReleaseEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ReleaseBase"/> instance.
		///</summary>
		public ReleaseBase()
		{
			this.entityData = new ReleaseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ReleaseBase"/> instance.
		///</summary>
		///<param name="_projectId"></param>
		///<param name="_releaseDate"></param>
		///<param name="_releaseName"></param>
		///<param name="_releaseNote"></param>
		///<param name="_active"></param>
		///<param name="_userId"></param>
		///<param name="_lastUserUpdate"></param>
		///<param name="_lastDateUpdate"></param>
		public ReleaseBase(System.Int32 _projectId, System.DateTime _releaseDate, System.String _releaseName, 
			System.String _releaseNote, System.Boolean? _active, System.Int32? _userId, System.Int32? _lastUserUpdate, 
			System.DateTime? _lastDateUpdate)
		{
			this.entityData = new ReleaseEntityData();
			this.backupData = null;

			this.ProjectId = _projectId;
			this.ReleaseDate = _releaseDate;
			this.ReleaseName = _releaseName;
			this.ReleaseNote = _releaseNote;
			this.Active = _active;
			this.UserId = _userId;
			this.LastUserUpdate = _lastUserUpdate;
			this.LastDateUpdate = _lastDateUpdate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Release"/> instance.
		///</summary>
		///<param name="_projectId"></param>
		///<param name="_releaseDate"></param>
		///<param name="_releaseName"></param>
		///<param name="_releaseNote"></param>
		///<param name="_active"></param>
		///<param name="_userId"></param>
		///<param name="_lastUserUpdate"></param>
		///<param name="_lastDateUpdate"></param>
		public static Release CreateRelease(System.Int32 _projectId, System.DateTime _releaseDate, System.String _releaseName, 
			System.String _releaseNote, System.Boolean? _active, System.Int32? _userId, System.Int32? _lastUserUpdate, 
			System.DateTime? _lastDateUpdate)
		{
			Release newRelease = new Release();
			newRelease.ProjectId = _projectId;
			newRelease.ReleaseDate = _releaseDate;
			newRelease.ReleaseName = _releaseName;
			newRelease.ReleaseNote = _releaseNote;
			newRelease.Active = _active;
			newRelease.UserId = _userId;
			newRelease.LastUserUpdate = _lastUserUpdate;
			newRelease.LastDateUpdate = _lastDateUpdate;
			return newRelease;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ReleaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ReleaseId
		{
			get
			{
				return this.entityData.ReleaseId; 
			}
			
			set
			{
				if (this.entityData.ReleaseId == value)
					return;
					
				OnColumnChanging(ReleaseColumn.ReleaseId, this.entityData.ReleaseId);
				this.entityData.ReleaseId = value;
				this.EntityId.ReleaseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReleaseColumn.ReleaseId, this.entityData.ReleaseId);
				OnPropertyChanged("ReleaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProjectId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProjectId
		{
			get
			{
				return this.entityData.ProjectId; 
			}
			
			set
			{
				if (this.entityData.ProjectId == value)
					return;
					
				OnColumnChanging(ReleaseColumn.ProjectId, this.entityData.ProjectId);
				this.entityData.ProjectId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReleaseColumn.ProjectId, this.entityData.ProjectId);
				OnPropertyChanged("ProjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReleaseDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ReleaseDate
		{
			get
			{
				return this.entityData.ReleaseDate; 
			}
			
			set
			{
				if (this.entityData.ReleaseDate == value)
					return;
					
				OnColumnChanging(ReleaseColumn.ReleaseDate, this.entityData.ReleaseDate);
				this.entityData.ReleaseDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReleaseColumn.ReleaseDate, this.entityData.ReleaseDate);
				OnPropertyChanged("ReleaseDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReleaseName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ReleaseName
		{
			get
			{
				return this.entityData.ReleaseName; 
			}
			
			set
			{
				if (this.entityData.ReleaseName == value)
					return;
					
				OnColumnChanging(ReleaseColumn.ReleaseName, this.entityData.ReleaseName);
				this.entityData.ReleaseName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReleaseColumn.ReleaseName, this.entityData.ReleaseName);
				OnPropertyChanged("ReleaseName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReleaseNote property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ReleaseNote
		{
			get
			{
				return this.entityData.ReleaseNote; 
			}
			
			set
			{
				if (this.entityData.ReleaseNote == value)
					return;
					
				OnColumnChanging(ReleaseColumn.ReleaseNote, this.entityData.ReleaseNote);
				this.entityData.ReleaseNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReleaseColumn.ReleaseNote, this.entityData.ReleaseNote);
				OnPropertyChanged("ReleaseNote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Active property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsActiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Active
		{
			get
			{
				return this.entityData.Active; 
			}
			
			set
			{
				if (this.entityData.Active == value)
					return;
					
				OnColumnChanging(ReleaseColumn.Active, this.entityData.Active);
				this.entityData.Active = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReleaseColumn.Active, this.entityData.Active);
				OnPropertyChanged("Active");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(ReleaseColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReleaseColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastUserUpdate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastUserUpdateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastUserUpdate
		{
			get
			{
				return this.entityData.LastUserUpdate; 
			}
			
			set
			{
				if (this.entityData.LastUserUpdate == value)
					return;
					
				OnColumnChanging(ReleaseColumn.LastUserUpdate, this.entityData.LastUserUpdate);
				this.entityData.LastUserUpdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReleaseColumn.LastUserUpdate, this.entityData.LastUserUpdate);
				OnPropertyChanged("LastUserUpdate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDateUpdate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateUpdateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDateUpdate
		{
			get
			{
				return this.entityData.LastDateUpdate; 
			}
			
			set
			{
				if (this.entityData.LastDateUpdate == value)
					return;
					
				OnColumnChanging(ReleaseColumn.LastDateUpdate, this.entityData.LastDateUpdate);
				this.entityData.LastDateUpdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReleaseColumn.LastDateUpdate, this.entityData.LastDateUpdate);
				OnPropertyChanged("LastDateUpdate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of DieRequest objects
		///	which are related to this object through the relation FK_tblDIERequest_tblRelease
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DieRequest> DieRequestCollection
		{
			get { return entityData.DieRequestCollection; }
			set { entityData.DieRequestCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReleaseName", "Release Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReleaseNote", "Release Note", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblRelease"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ReleaseID", "ProjectID", "ReleaseDate", "ReleaseName", "ReleaseNote", "Active", "UserID", "LastUserUpdate", "LastDateUpdate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ReleaseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Release) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Release>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Release);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Release Entity 
		///</summary>
		protected virtual Release Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Release copy = new Release();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ReleaseId = this.ReleaseId;
				copy.ProjectId = this.ProjectId;
				copy.ReleaseDate = this.ReleaseDate;
				copy.ReleaseName = this.ReleaseName;
				copy.ReleaseNote = this.ReleaseNote;
				copy.Active = this.Active;
				copy.UserId = this.UserId;
				copy.LastUserUpdate = this.LastUserUpdate;
				copy.LastDateUpdate = this.LastDateUpdate;
			
		
			//deep copy nested objects
			copy.DieRequestCollection = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Release Entity 
		///</summary>
		public virtual Release Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Release Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Release DeepCopy()
		{
			return EntityHelper.Clone<Release>(this as Release);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ReleaseEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ReleaseEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ReleaseEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ReleaseColumn column)
		{
			switch(column)
			{
					case ReleaseColumn.ReleaseId:
					return entityData.ReleaseId != _originalData.ReleaseId;
					case ReleaseColumn.ProjectId:
					return entityData.ProjectId != _originalData.ProjectId;
					case ReleaseColumn.ReleaseDate:
					return entityData.ReleaseDate != _originalData.ReleaseDate;
					case ReleaseColumn.ReleaseName:
					return entityData.ReleaseName != _originalData.ReleaseName;
					case ReleaseColumn.ReleaseNote:
					return entityData.ReleaseNote != _originalData.ReleaseNote;
					case ReleaseColumn.Active:
					return entityData.Active != _originalData.Active;
					case ReleaseColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case ReleaseColumn.LastUserUpdate:
					return entityData.LastUserUpdate != _originalData.LastUserUpdate;
					case ReleaseColumn.LastDateUpdate:
					return entityData.LastDateUpdate != _originalData.LastDateUpdate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ReleaseColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ReleaseId != _originalData.ReleaseId;
			result = result || entityData.ProjectId != _originalData.ProjectId;
			result = result || entityData.ReleaseDate != _originalData.ReleaseDate;
			result = result || entityData.ReleaseName != _originalData.ReleaseName;
			result = result || entityData.ReleaseNote != _originalData.ReleaseNote;
			result = result || entityData.Active != _originalData.Active;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.LastUserUpdate != _originalData.LastUserUpdate;
			result = result || entityData.LastDateUpdate != _originalData.LastDateUpdate;
			return result;
		}	
		
		///<summary>
		///  Returns a Release Entity with the original data.
		///</summary>
		public Release GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateRelease(
				_originalData.ProjectId,
				_originalData.ReleaseDate,
				_originalData.ReleaseName,
				_originalData.ReleaseNote,
				_originalData.Active,
				_originalData.UserId,
				_originalData.LastUserUpdate,
				_originalData.LastDateUpdate
				);
				
			return (Release)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ReleaseBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ReleaseBase)
				return ValueEquals(this, (ReleaseBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ReleaseBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ReleaseId.GetHashCode() ^ 
					this.ProjectId.GetHashCode() ^ 
					this.ReleaseDate.GetHashCode() ^ 
					((this.ReleaseName == null) ? string.Empty : this.ReleaseName.ToString()).GetHashCode() ^ 
					((this.ReleaseNote == null) ? string.Empty : this.ReleaseNote.ToString()).GetHashCode() ^ 
					((this.Active == null) ? string.Empty : this.Active.ToString()).GetHashCode() ^ 
					((this.UserId == null) ? string.Empty : this.UserId.ToString()).GetHashCode() ^ 
					((this.LastUserUpdate == null) ? string.Empty : this.LastUserUpdate.ToString()).GetHashCode() ^ 
					((this.LastDateUpdate == null) ? string.Empty : this.LastDateUpdate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ReleaseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ReleaseBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ReleaseBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ReleaseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ReleaseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ReleaseBase Object1, ReleaseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ReleaseId != Object2.ReleaseId)
				equal = false;
			if (Object1.ProjectId != Object2.ProjectId)
				equal = false;
			if (Object1.ReleaseDate != Object2.ReleaseDate)
				equal = false;
			if ( Object1.ReleaseName != null && Object2.ReleaseName != null )
			{
				if (Object1.ReleaseName != Object2.ReleaseName)
					equal = false;
			}
			else if (Object1.ReleaseName == null ^ Object2.ReleaseName == null )
			{
				equal = false;
			}
			if ( Object1.ReleaseNote != null && Object2.ReleaseNote != null )
			{
				if (Object1.ReleaseNote != Object2.ReleaseNote)
					equal = false;
			}
			else if (Object1.ReleaseNote == null ^ Object2.ReleaseNote == null )
			{
				equal = false;
			}
			if ( Object1.Active != null && Object2.Active != null )
			{
				if (Object1.Active != Object2.Active)
					equal = false;
			}
			else if (Object1.Active == null ^ Object2.Active == null )
			{
				equal = false;
			}
			if ( Object1.UserId != null && Object2.UserId != null )
			{
				if (Object1.UserId != Object2.UserId)
					equal = false;
			}
			else if (Object1.UserId == null ^ Object2.UserId == null )
			{
				equal = false;
			}
			if ( Object1.LastUserUpdate != null && Object2.LastUserUpdate != null )
			{
				if (Object1.LastUserUpdate != Object2.LastUserUpdate)
					equal = false;
			}
			else if (Object1.LastUserUpdate == null ^ Object2.LastUserUpdate == null )
			{
				equal = false;
			}
			if ( Object1.LastDateUpdate != null && Object2.LastDateUpdate != null )
			{
				if (Object1.LastDateUpdate != Object2.LastDateUpdate)
					equal = false;
			}
			else if (Object1.LastDateUpdate == null ^ Object2.LastDateUpdate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ReleaseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ReleaseComparer GetComparer()
        {
            return new ReleaseComparer();
        }
        */

        // Comparer delegates back to Release
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Release rhs, ReleaseColumn which)
        {
            switch (which)
            {
            	
            	
            	case ReleaseColumn.ReleaseId:
            		return this.ReleaseId.CompareTo(rhs.ReleaseId);
            		
            		                 
            	
            	
            	case ReleaseColumn.ProjectId:
            		return this.ProjectId.CompareTo(rhs.ProjectId);
            		
            		                 
            	
            	
            	case ReleaseColumn.ReleaseDate:
            		return this.ReleaseDate.CompareTo(rhs.ReleaseDate);
            		
            		                 
            	
            	
            	case ReleaseColumn.ReleaseName:
            		return this.ReleaseName.CompareTo(rhs.ReleaseName);
            		
            		                 
            	
            	
            	case ReleaseColumn.ReleaseNote:
            		return this.ReleaseNote.CompareTo(rhs.ReleaseNote);
            		
            		                 
            	
            	
            	case ReleaseColumn.Active:
            		return this.Active.Value.CompareTo(rhs.Active.Value);
            		
            		                 
            	
            	
            	case ReleaseColumn.UserId:
            		return this.UserId.Value.CompareTo(rhs.UserId.Value);
            		
            		                 
            	
            	
            	case ReleaseColumn.LastUserUpdate:
            		return this.LastUserUpdate.Value.CompareTo(rhs.LastUserUpdate.Value);
            		
            		                 
            	
            	
            	case ReleaseColumn.LastDateUpdate:
            		return this.LastDateUpdate.Value.CompareTo(rhs.LastDateUpdate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ReleaseKey> Members
		
		// member variable for the EntityId property
		private ReleaseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ReleaseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ReleaseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Release")
					.Append("|").Append( this.ReleaseId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- ReleaseId: {0}{9}- ProjectId: {1}{9}- ReleaseDate: {2}{9}- ReleaseName: {3}{9}- ReleaseNote: {4}{9}- Active: {5}{9}- UserId: {6}{9}- LastUserUpdate: {7}{9}- LastDateUpdate: {8}{9}{11}", 
				this.ReleaseId,
				this.ProjectId,
				this.ReleaseDate,
				(this.ReleaseName == null) ? string.Empty : this.ReleaseName.ToString(),
				(this.ReleaseNote == null) ? string.Empty : this.ReleaseNote.ToString(),
				(this.Active == null) ? string.Empty : this.Active.ToString(),
				(this.UserId == null) ? string.Empty : this.UserId.ToString(),
				(this.LastUserUpdate == null) ? string.Empty : this.LastUserUpdate.ToString(),
				(this.LastDateUpdate == null) ? string.Empty : this.LastDateUpdate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblRelease' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ReleaseEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ReleaseID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblRelease"</remarks>
		public System.Int32 ReleaseId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ProjectID : 
		/// </summary>
		public System.Int32		  ProjectId = (int)0;
		
		/// <summary>
		/// ReleaseDate : 
		/// </summary>
		public System.DateTime		  ReleaseDate = DateTime.MinValue;
		
		/// <summary>
		/// ReleaseName : 
		/// </summary>
		public System.String		  ReleaseName = null;
		
		/// <summary>
		/// ReleaseNote : 
		/// </summary>
		public System.String		  ReleaseNote = null;
		
		/// <summary>
		/// Active : 
		/// </summary>
		public System.Boolean?		  Active = null;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.Int32?		  UserId = null;
		
		/// <summary>
		/// LastUserUpdate : 
		/// </summary>
		public System.Int32?		  LastUserUpdate = null;
		
		/// <summary>
		/// LastDateUpdate : 
		/// </summary>
		public System.DateTime?		  LastDateUpdate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region DieRequestCollection
		
		private TList<DieRequest> _dieRequestCompletedReleaseId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dieRequestCompletedReleaseId
		/// </summary>
		
		public TList<DieRequest> DieRequestCollection
		{
			get
			{
				if (_dieRequestCompletedReleaseId == null)
				{
				_dieRequestCompletedReleaseId = new TList<DieRequest>();
				}
	
				return _dieRequestCompletedReleaseId;
			}
			set { _dieRequestCompletedReleaseId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ReleaseEntityData _tmp = new ReleaseEntityData();
						
			_tmp.ReleaseId = this.ReleaseId;
			
			_tmp.ProjectId = this.ProjectId;
			_tmp.ReleaseDate = this.ReleaseDate;
			_tmp.ReleaseName = this.ReleaseName;
			_tmp.ReleaseNote = this.ReleaseNote;
			_tmp.Active = this.Active;
			_tmp.UserId = this.UserId;
			_tmp.LastUserUpdate = this.LastUserUpdate;
			_tmp.LastDateUpdate = this.LastDateUpdate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._dieRequestCompletedReleaseId != null)
				_tmp.DieRequestCollection = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ReleaseEntityData _tmp = new ReleaseEntityData();
						
			_tmp.ReleaseId = this.ReleaseId;
			
			_tmp.ProjectId = this.ProjectId;
			_tmp.ReleaseDate = this.ReleaseDate;
			_tmp.ReleaseName = this.ReleaseName;
			_tmp.ReleaseNote = this.ReleaseNote;
			_tmp.Active = this.Active;
			_tmp.UserId = this.UserId;
			_tmp.LastUserUpdate = this.LastUserUpdate;
			_tmp.LastDateUpdate = this.LastDateUpdate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.DieRequestCollection = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ReleaseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ReleaseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ReleaseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ReleaseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ReleaseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ReleaseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ReleaseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ReleaseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ReleaseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ReleaseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ReleaseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ReleaseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ReleaseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Release"/> object.
	/// </remarks>
	public class ReleaseEventArgs : System.EventArgs
	{
		private ReleaseColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ReleaseEventArgs class.
		///</summary>
		public ReleaseEventArgs(ReleaseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ReleaseEventArgs class.
		///</summary>
		public ReleaseEventArgs(ReleaseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ReleaseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ReleaseColumn" />
		public ReleaseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Release related events.
	///</summary>
	public delegate void ReleaseEventHandler(object sender, ReleaseEventArgs e);
	
	#region ReleaseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ReleaseComparer : System.Collections.Generic.IComparer<Release>
	{
		ReleaseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ReleaseComparer"/> class.
        /// </summary>
		public ReleaseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ReleaseComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ReleaseComparer(ReleaseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Release"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Release"/> to compare.</param>
        /// <param name="b">The second <c>Release</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Release a, Release b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Release entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Release a, Release b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ReleaseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ReleaseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Release"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ReleaseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ReleaseKey class.
		/// </summary>
		public ReleaseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ReleaseKey class.
		/// </summary>
		public ReleaseKey(ReleaseBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ReleaseId = entity.ReleaseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ReleaseKey class.
		/// </summary>
		public ReleaseKey(System.Int32 _releaseId)
		{
			#region Init Properties

			this.ReleaseId = _releaseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ReleaseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ReleaseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ReleaseId property
		private System.Int32 _releaseId;
		
		/// <summary>
		/// Gets or sets the ReleaseId property.
		/// </summary>
		public System.Int32 ReleaseId
		{
			get { return _releaseId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ReleaseId = value;
				
				_releaseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ReleaseId = ( values["ReleaseId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ReleaseId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ReleaseId", ReleaseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ReleaseId: {0}{1}",
								ReleaseId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ReleaseColumn Enum
	
	/// <summary>
	/// Enumerate the Release columns.
	/// </summary>
	[Serializable]
	public enum ReleaseColumn : int
	{
		/// <summary>
		/// ReleaseId : 
		/// </summary>
		[EnumTextValue("ReleaseID")]
		[ColumnEnum("ReleaseID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ReleaseId = 1,
		/// <summary>
		/// ProjectId : 
		/// </summary>
		[EnumTextValue("ProjectID")]
		[ColumnEnum("ProjectID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProjectId = 2,
		/// <summary>
		/// ReleaseDate : 
		/// </summary>
		[EnumTextValue("ReleaseDate")]
		[ColumnEnum("ReleaseDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ReleaseDate = 3,
		/// <summary>
		/// ReleaseName : 
		/// </summary>
		[EnumTextValue("ReleaseName")]
		[ColumnEnum("ReleaseName", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		ReleaseName = 4,
		/// <summary>
		/// ReleaseNote : 
		/// </summary>
		[EnumTextValue("ReleaseNote")]
		[ColumnEnum("ReleaseNote", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		ReleaseNote = 5,
		/// <summary>
		/// Active : 
		/// </summary>
		[EnumTextValue("Active")]
		[ColumnEnum("Active", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Active = 6,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserId = 7,
		/// <summary>
		/// LastUserUpdate : 
		/// </summary>
		[EnumTextValue("LastUserUpdate")]
		[ColumnEnum("LastUserUpdate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastUserUpdate = 8,
		/// <summary>
		/// LastDateUpdate : 
		/// </summary>
		[EnumTextValue("LastDateUpdate")]
		[ColumnEnum("LastDateUpdate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDateUpdate = 9
	}//End enum

	#endregion ReleaseColumn Enum

} // end namespace
