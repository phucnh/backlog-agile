
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file DieRequest.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Agile.Entities.Validation;
#endregion

namespace Agile.Entities
{
	///<summary>
	/// An object representation of the 'tblDIERequest' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DieRequestBase : EntityBase, IDieRequest, IEntityId<DieRequestKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DieRequestEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DieRequestEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DieRequestEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DieRequest> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DieRequestEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DieRequestEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DieRequestBase"/> instance.
		///</summary>
		public DieRequestBase()
		{
			this.entityData = new DieRequestEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DieRequestBase"/> instance.
		///</summary>
		///<param name="_dieName">Tên của bảng</param>
		///<param name="_dieTag"></param>
		///<param name="_dieDescription"></param>
		///<param name="_dieTypeId"></param>
		///<param name="_resolutionsId"></param>
		///<param name="_userId"></param>
		///<param name="_projectId"></param>
		///<param name="_dieStatus"></param>
		///<param name="_priorityDieRequestId"></param>
		///<param name="_dieDateSubmit"></param>
		///<param name="_codeBy"></param>
		///<param name="_owner"></param>
		///<param name="_updateTime"></param>
		///<param name="_lastUserUpdate"></param>
		///<param name="_targetDate"></param>
		///<param name="_completedReleaseId"></param>
		///<param name="_milestoneId"></param>
		///<param name="_dieCategoryId"></param>
		///<param name="_estimated"></param>
		///<param name="_actual"></param>
		///<param name="_parentDie"></param>
		public DieRequestBase(System.String _dieName, System.String _dieTag, System.String _dieDescription, 
			System.Int32? _dieTypeId, System.Int32? _resolutionsId, System.Int32? _userId, System.Int32? _projectId, 
			System.Int32? _dieStatus, System.Int32? _priorityDieRequestId, System.DateTime? _dieDateSubmit, 
			System.Int32? _codeBy, System.Int32? _owner, System.DateTime? _updateTime, System.Int32? _lastUserUpdate, 
			System.DateTime? _targetDate, System.Int32? _completedReleaseId, System.Int32? _milestoneId, 
			System.Int32? _dieCategoryId, System.Double? _estimated, System.Double? _actual, System.Int32? _parentDie)
		{
			this.entityData = new DieRequestEntityData();
			this.backupData = null;

			this.DieName = _dieName;
			this.DieTag = _dieTag;
			this.DieDescription = _dieDescription;
			this.DieTypeId = _dieTypeId;
			this.ResolutionsId = _resolutionsId;
			this.UserId = _userId;
			this.ProjectId = _projectId;
			this.DieStatus = _dieStatus;
			this.PriorityDieRequestId = _priorityDieRequestId;
			this.DieDateSubmit = _dieDateSubmit;
			this.CodeBy = _codeBy;
			this.Owner = _owner;
			this.UpdateTime = _updateTime;
			this.LastUserUpdate = _lastUserUpdate;
			this.TargetDate = _targetDate;
			this.CompletedReleaseId = _completedReleaseId;
			this.MilestoneId = _milestoneId;
			this.DieCategoryId = _dieCategoryId;
			this.Estimated = _estimated;
			this.Actual = _actual;
			this.ParentDie = _parentDie;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DieRequest"/> instance.
		///</summary>
		///<param name="_dieName">Tên của bảng</param>
		///<param name="_dieTag"></param>
		///<param name="_dieDescription"></param>
		///<param name="_dieTypeId"></param>
		///<param name="_resolutionsId"></param>
		///<param name="_userId"></param>
		///<param name="_projectId"></param>
		///<param name="_dieStatus"></param>
		///<param name="_priorityDieRequestId"></param>
		///<param name="_dieDateSubmit"></param>
		///<param name="_codeBy"></param>
		///<param name="_owner"></param>
		///<param name="_updateTime"></param>
		///<param name="_lastUserUpdate"></param>
		///<param name="_targetDate"></param>
		///<param name="_completedReleaseId"></param>
		///<param name="_milestoneId"></param>
		///<param name="_dieCategoryId"></param>
		///<param name="_estimated"></param>
		///<param name="_actual"></param>
		///<param name="_parentDie"></param>
		public static DieRequest CreateDieRequest(System.String _dieName, System.String _dieTag, System.String _dieDescription, 
			System.Int32? _dieTypeId, System.Int32? _resolutionsId, System.Int32? _userId, System.Int32? _projectId, 
			System.Int32? _dieStatus, System.Int32? _priorityDieRequestId, System.DateTime? _dieDateSubmit, 
			System.Int32? _codeBy, System.Int32? _owner, System.DateTime? _updateTime, System.Int32? _lastUserUpdate, 
			System.DateTime? _targetDate, System.Int32? _completedReleaseId, System.Int32? _milestoneId, 
			System.Int32? _dieCategoryId, System.Double? _estimated, System.Double? _actual, System.Int32? _parentDie)
		{
			DieRequest newDieRequest = new DieRequest();
			newDieRequest.DieName = _dieName;
			newDieRequest.DieTag = _dieTag;
			newDieRequest.DieDescription = _dieDescription;
			newDieRequest.DieTypeId = _dieTypeId;
			newDieRequest.ResolutionsId = _resolutionsId;
			newDieRequest.UserId = _userId;
			newDieRequest.ProjectId = _projectId;
			newDieRequest.DieStatus = _dieStatus;
			newDieRequest.PriorityDieRequestId = _priorityDieRequestId;
			newDieRequest.DieDateSubmit = _dieDateSubmit;
			newDieRequest.CodeBy = _codeBy;
			newDieRequest.Owner = _owner;
			newDieRequest.UpdateTime = _updateTime;
			newDieRequest.LastUserUpdate = _lastUserUpdate;
			newDieRequest.TargetDate = _targetDate;
			newDieRequest.CompletedReleaseId = _completedReleaseId;
			newDieRequest.MilestoneId = _milestoneId;
			newDieRequest.DieCategoryId = _dieCategoryId;
			newDieRequest.Estimated = _estimated;
			newDieRequest.Actual = _actual;
			newDieRequest.ParentDie = _parentDie;
			return newDieRequest;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DieRequestId property. 
		///		khóa của bảng
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"khóa của bảng"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 DieRequestId
		{
			get
			{
				return this.entityData.DieRequestId; 
			}
			
			set
			{
				if (this.entityData.DieRequestId == value)
					return;
					
				OnColumnChanging(DieRequestColumn.DieRequestId, this.entityData.DieRequestId);
				this.entityData.DieRequestId = value;
				this.EntityId.DieRequestId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.DieRequestId, this.entityData.DieRequestId);
				OnPropertyChanged("DieRequestId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieName property. 
		///		Tên của bảng
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Tên của bảng"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String DieName
		{
			get
			{
				return this.entityData.DieName; 
			}
			
			set
			{
				if (this.entityData.DieName == value)
					return;
					
				OnColumnChanging(DieRequestColumn.DieName, this.entityData.DieName);
				this.entityData.DieName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.DieName, this.entityData.DieName);
				OnPropertyChanged("DieName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieTag property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String DieTag
		{
			get
			{
				return this.entityData.DieTag; 
			}
			
			set
			{
				if (this.entityData.DieTag == value)
					return;
					
				OnColumnChanging(DieRequestColumn.DieTag, this.entityData.DieTag);
				this.entityData.DieTag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.DieTag, this.entityData.DieTag);
				OnPropertyChanged("DieTag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieDescription property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String DieDescription
		{
			get
			{
				return this.entityData.DieDescription; 
			}
			
			set
			{
				if (this.entityData.DieDescription == value)
					return;
					
				OnColumnChanging(DieRequestColumn.DieDescription, this.entityData.DieDescription);
				this.entityData.DieDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.DieDescription, this.entityData.DieDescription);
				OnPropertyChanged("DieDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDieTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DieTypeId
		{
			get
			{
				return this.entityData.DieTypeId; 
			}
			
			set
			{
				if (this.entityData.DieTypeId == value)
					return;
					
				OnColumnChanging(DieRequestColumn.DieTypeId, this.entityData.DieTypeId);
				this.entityData.DieTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.DieTypeId, this.entityData.DieTypeId);
				OnPropertyChanged("DieTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResolutionsId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsResolutionsIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ResolutionsId
		{
			get
			{
				return this.entityData.ResolutionsId; 
			}
			
			set
			{
				if (this.entityData.ResolutionsId == value)
					return;
					
				OnColumnChanging(DieRequestColumn.ResolutionsId, this.entityData.ResolutionsId);
				this.entityData.ResolutionsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.ResolutionsId, this.entityData.ResolutionsId);
				OnPropertyChanged("ResolutionsId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(DieRequestColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProjectId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProjectIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProjectId
		{
			get
			{
				return this.entityData.ProjectId; 
			}
			
			set
			{
				if (this.entityData.ProjectId == value)
					return;
					
				OnColumnChanging(DieRequestColumn.ProjectId, this.entityData.ProjectId);
				this.entityData.ProjectId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.ProjectId, this.entityData.ProjectId);
				OnPropertyChanged("ProjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieStatus property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDieStatusNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DieStatus
		{
			get
			{
				return this.entityData.DieStatus; 
			}
			
			set
			{
				if (this.entityData.DieStatus == value)
					return;
					
				OnColumnChanging(DieRequestColumn.DieStatus, this.entityData.DieStatus);
				this.entityData.DieStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.DieStatus, this.entityData.DieStatus);
				OnPropertyChanged("DieStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriorityDieRequestId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriorityDieRequestIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PriorityDieRequestId
		{
			get
			{
				return this.entityData.PriorityDieRequestId; 
			}
			
			set
			{
				if (this.entityData.PriorityDieRequestId == value)
					return;
					
				OnColumnChanging(DieRequestColumn.PriorityDieRequestId, this.entityData.PriorityDieRequestId);
				this.entityData.PriorityDieRequestId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.PriorityDieRequestId, this.entityData.PriorityDieRequestId);
				OnPropertyChanged("PriorityDieRequestId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieDateSubmit property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDieDateSubmitNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DieDateSubmit
		{
			get
			{
				return this.entityData.DieDateSubmit; 
			}
			
			set
			{
				if (this.entityData.DieDateSubmit == value)
					return;
					
				OnColumnChanging(DieRequestColumn.DieDateSubmit, this.entityData.DieDateSubmit);
				this.entityData.DieDateSubmit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.DieDateSubmit, this.entityData.DieDateSubmit);
				OnPropertyChanged("DieDateSubmit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CodeBy property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCodeByNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CodeBy
		{
			get
			{
				return this.entityData.CodeBy; 
			}
			
			set
			{
				if (this.entityData.CodeBy == value)
					return;
					
				OnColumnChanging(DieRequestColumn.CodeBy, this.entityData.CodeBy);
				this.entityData.CodeBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.CodeBy, this.entityData.CodeBy);
				OnPropertyChanged("CodeBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Owner property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOwnerNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Owner
		{
			get
			{
				return this.entityData.Owner; 
			}
			
			set
			{
				if (this.entityData.Owner == value)
					return;
					
				OnColumnChanging(DieRequestColumn.Owner, this.entityData.Owner);
				this.entityData.Owner = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.Owner, this.entityData.Owner);
				OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdateTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateTime
		{
			get
			{
				return this.entityData.UpdateTime; 
			}
			
			set
			{
				if (this.entityData.UpdateTime == value)
					return;
					
				OnColumnChanging(DieRequestColumn.UpdateTime, this.entityData.UpdateTime);
				this.entityData.UpdateTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.UpdateTime, this.entityData.UpdateTime);
				OnPropertyChanged("UpdateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastUserUpdate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastUserUpdateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastUserUpdate
		{
			get
			{
				return this.entityData.LastUserUpdate; 
			}
			
			set
			{
				if (this.entityData.LastUserUpdate == value)
					return;
					
				OnColumnChanging(DieRequestColumn.LastUserUpdate, this.entityData.LastUserUpdate);
				this.entityData.LastUserUpdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.LastUserUpdate, this.entityData.LastUserUpdate);
				OnPropertyChanged("LastUserUpdate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TargetDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTargetDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TargetDate
		{
			get
			{
				return this.entityData.TargetDate; 
			}
			
			set
			{
				if (this.entityData.TargetDate == value)
					return;
					
				OnColumnChanging(DieRequestColumn.TargetDate, this.entityData.TargetDate);
				this.entityData.TargetDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.TargetDate, this.entityData.TargetDate);
				OnPropertyChanged("TargetDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompletedReleaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCompletedReleaseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CompletedReleaseId
		{
			get
			{
				return this.entityData.CompletedReleaseId; 
			}
			
			set
			{
				if (this.entityData.CompletedReleaseId == value)
					return;
					
				OnColumnChanging(DieRequestColumn.CompletedReleaseId, this.entityData.CompletedReleaseId);
				this.entityData.CompletedReleaseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.CompletedReleaseId, this.entityData.CompletedReleaseId);
				OnPropertyChanged("CompletedReleaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilestoneId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMilestoneIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MilestoneId
		{
			get
			{
				return this.entityData.MilestoneId; 
			}
			
			set
			{
				if (this.entityData.MilestoneId == value)
					return;
					
				OnColumnChanging(DieRequestColumn.MilestoneId, this.entityData.MilestoneId);
				this.entityData.MilestoneId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.MilestoneId, this.entityData.MilestoneId);
				OnPropertyChanged("MilestoneId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieCategoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDieCategoryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DieCategoryId
		{
			get
			{
				return this.entityData.DieCategoryId; 
			}
			
			set
			{
				if (this.entityData.DieCategoryId == value)
					return;
					
				OnColumnChanging(DieRequestColumn.DieCategoryId, this.entityData.DieCategoryId);
				this.entityData.DieCategoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.DieCategoryId, this.entityData.DieCategoryId);
				OnPropertyChanged("DieCategoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Estimated property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsEstimatedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Estimated
		{
			get
			{
				return this.entityData.Estimated; 
			}
			
			set
			{
				if (this.entityData.Estimated == value)
					return;
					
				OnColumnChanging(DieRequestColumn.Estimated, this.entityData.Estimated);
				this.entityData.Estimated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.Estimated, this.entityData.Estimated);
				OnPropertyChanged("Estimated");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Actual property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsActualNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Actual
		{
			get
			{
				return this.entityData.Actual; 
			}
			
			set
			{
				if (this.entityData.Actual == value)
					return;
					
				OnColumnChanging(DieRequestColumn.Actual, this.entityData.Actual);
				this.entityData.Actual = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.Actual, this.entityData.Actual);
				OnPropertyChanged("Actual");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParentDie property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsParentDieNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ParentDie
		{
			get
			{
				return this.entityData.ParentDie; 
			}
			
			set
			{
				if (this.entityData.ParentDie == value)
					return;
					
				OnColumnChanging(DieRequestColumn.ParentDie, this.entityData.ParentDie);
				this.entityData.ParentDie = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieRequestColumn.ParentDie, this.entityData.ParentDie);
				OnPropertyChanged("ParentDie");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="DieCategory"/>.
		/// </summary>
		/// <value>The source DieCategory for DieCategoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DieCategory DieCategoryIdSource
      	{
            get { return entityData.DieCategoryIdSource; }
            set { entityData.DieCategoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="DieRequest"/>.
		/// </summary>
		/// <value>The source DieRequest for ParentDie.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DieRequest ParentDieSource
      	{
            get { return entityData.ParentDieSource; }
            set { entityData.ParentDieSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="DieStatus"/>.
		/// </summary>
		/// <value>The source DieStatus for DieStatus.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DieStatus DieStatusSource
      	{
            get { return entityData.DieStatusSource; }
            set { entityData.DieStatusSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="DieType"/>.
		/// </summary>
		/// <value>The source DieType for DieTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual DieType DieTypeIdSource
      	{
            get { return entityData.DieTypeIdSource; }
            set { entityData.DieTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MileStole"/>.
		/// </summary>
		/// <value>The source MileStole for MilestoneId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MileStole MilestoneIdSource
      	{
            get { return entityData.MilestoneIdSource; }
            set { entityData.MilestoneIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PriorityDieRequest"/>.
		/// </summary>
		/// <value>The source PriorityDieRequest for PriorityDieRequestId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PriorityDieRequest PriorityDieRequestIdSource
      	{
            get { return entityData.PriorityDieRequestIdSource; }
            set { entityData.PriorityDieRequestIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Project"/>.
		/// </summary>
		/// <value>The source Project for ProjectId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Project ProjectIdSource
      	{
            get { return entityData.ProjectIdSource; }
            set { entityData.ProjectIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Release"/>.
		/// </summary>
		/// <value>The source Release for CompletedReleaseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Release CompletedReleaseIdSource
      	{
            get { return entityData.CompletedReleaseIdSource; }
            set { entityData.CompletedReleaseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Resolutions"/>.
		/// </summary>
		/// <value>The source Resolutions for ResolutionsId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Resolutions ResolutionsIdSource
      	{
            get { return entityData.ResolutionsIdSource; }
            set { entityData.ResolutionsIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for UserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual User UserIdSource
      	{
            get { return entityData.UserIdSource; }
            set { entityData.UserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for CodeBy.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual User CodeBySource
      	{
            get { return entityData.CodeBySource; }
            set { entityData.CodeBySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for Owner.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual User OwnerSource
      	{
            get { return entityData.OwnerSource; }
            set { entityData.OwnerSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for LastUserUpdate.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual User LastUserUpdateSource
      	{
            get { return entityData.LastUserUpdateSource; }
            set { entityData.LastUserUpdateSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of DieAttachFile objects
		///	which are related to this object through the relation FK_tblDIEAttachFile_tblDIERequest
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DieAttachFile> DieAttachFileCollection
		{
			get { return entityData.DieAttachFileCollection; }
			set { entityData.DieAttachFileCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of DieRequest objects
		///	which are related to this object through the relation FK_tblDIERequest_tblDIERequest
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DieRequest> DieRequestCollection
		{
			get { return entityData.DieRequestCollection; }
			set { entityData.DieRequestCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DieName", "Die Name", 400));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DieTag", "Die Tag", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblDIERequest"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DIERequestID", "DIEName", "DIETag", "DIEDescription", "DIETypeID", "ResolutionsID", "UserID", "ProjectID", "DIEStatus", "PriorityDIERequestID", "DIEDateSubmit", "CodeBy", "Owner", "UpdateTime", "LastUserUpdate", "TargetDate", "CompletedReleaseID", "MilestoneID", "DIECategoryID", "Estimated", "Actual", "ParentDie"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DieRequestEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DieRequest) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DieRequest>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DieRequest);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DieRequest Entity 
		///</summary>
		protected virtual DieRequest Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DieRequest copy = new DieRequest();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DieRequestId = this.DieRequestId;
				copy.DieName = this.DieName;
				copy.DieTag = this.DieTag;
				copy.DieDescription = this.DieDescription;
				copy.DieTypeId = this.DieTypeId;
				copy.ResolutionsId = this.ResolutionsId;
				copy.UserId = this.UserId;
				copy.ProjectId = this.ProjectId;
				copy.DieStatus = this.DieStatus;
				copy.PriorityDieRequestId = this.PriorityDieRequestId;
				copy.DieDateSubmit = this.DieDateSubmit;
				copy.CodeBy = this.CodeBy;
				copy.Owner = this.Owner;
				copy.UpdateTime = this.UpdateTime;
				copy.LastUserUpdate = this.LastUserUpdate;
				copy.TargetDate = this.TargetDate;
				copy.CompletedReleaseId = this.CompletedReleaseId;
				copy.MilestoneId = this.MilestoneId;
				copy.DieCategoryId = this.DieCategoryId;
				copy.Estimated = this.Estimated;
				copy.Actual = this.Actual;
				copy.ParentDie = this.ParentDie;
			
			if (this.DieCategoryIdSource != null && existingCopies.Contains(this.DieCategoryIdSource))
				copy.DieCategoryIdSource = existingCopies[this.DieCategoryIdSource] as DieCategory;
			else
				copy.DieCategoryIdSource = MakeCopyOf(this.DieCategoryIdSource, existingCopies) as DieCategory;
			if (this.ParentDieSource != null && existingCopies.Contains(this.ParentDieSource))
				copy.ParentDieSource = existingCopies[this.ParentDieSource] as DieRequest;
			else
				copy.ParentDieSource = MakeCopyOf(this.ParentDieSource, existingCopies) as DieRequest;
			if (this.DieStatusSource != null && existingCopies.Contains(this.DieStatusSource))
				copy.DieStatusSource = existingCopies[this.DieStatusSource] as DieStatus;
			else
				copy.DieStatusSource = MakeCopyOf(this.DieStatusSource, existingCopies) as DieStatus;
			if (this.DieTypeIdSource != null && existingCopies.Contains(this.DieTypeIdSource))
				copy.DieTypeIdSource = existingCopies[this.DieTypeIdSource] as DieType;
			else
				copy.DieTypeIdSource = MakeCopyOf(this.DieTypeIdSource, existingCopies) as DieType;
			if (this.MilestoneIdSource != null && existingCopies.Contains(this.MilestoneIdSource))
				copy.MilestoneIdSource = existingCopies[this.MilestoneIdSource] as MileStole;
			else
				copy.MilestoneIdSource = MakeCopyOf(this.MilestoneIdSource, existingCopies) as MileStole;
			if (this.PriorityDieRequestIdSource != null && existingCopies.Contains(this.PriorityDieRequestIdSource))
				copy.PriorityDieRequestIdSource = existingCopies[this.PriorityDieRequestIdSource] as PriorityDieRequest;
			else
				copy.PriorityDieRequestIdSource = MakeCopyOf(this.PriorityDieRequestIdSource, existingCopies) as PriorityDieRequest;
			if (this.ProjectIdSource != null && existingCopies.Contains(this.ProjectIdSource))
				copy.ProjectIdSource = existingCopies[this.ProjectIdSource] as Project;
			else
				copy.ProjectIdSource = MakeCopyOf(this.ProjectIdSource, existingCopies) as Project;
			if (this.CompletedReleaseIdSource != null && existingCopies.Contains(this.CompletedReleaseIdSource))
				copy.CompletedReleaseIdSource = existingCopies[this.CompletedReleaseIdSource] as Release;
			else
				copy.CompletedReleaseIdSource = MakeCopyOf(this.CompletedReleaseIdSource, existingCopies) as Release;
			if (this.ResolutionsIdSource != null && existingCopies.Contains(this.ResolutionsIdSource))
				copy.ResolutionsIdSource = existingCopies[this.ResolutionsIdSource] as Resolutions;
			else
				copy.ResolutionsIdSource = MakeCopyOf(this.ResolutionsIdSource, existingCopies) as Resolutions;
			if (this.UserIdSource != null && existingCopies.Contains(this.UserIdSource))
				copy.UserIdSource = existingCopies[this.UserIdSource] as User;
			else
				copy.UserIdSource = MakeCopyOf(this.UserIdSource, existingCopies) as User;
			if (this.CodeBySource != null && existingCopies.Contains(this.CodeBySource))
				copy.CodeBySource = existingCopies[this.CodeBySource] as User;
			else
				copy.CodeBySource = MakeCopyOf(this.CodeBySource, existingCopies) as User;
			if (this.OwnerSource != null && existingCopies.Contains(this.OwnerSource))
				copy.OwnerSource = existingCopies[this.OwnerSource] as User;
			else
				copy.OwnerSource = MakeCopyOf(this.OwnerSource, existingCopies) as User;
			if (this.LastUserUpdateSource != null && existingCopies.Contains(this.LastUserUpdateSource))
				copy.LastUserUpdateSource = existingCopies[this.LastUserUpdateSource] as User;
			else
				copy.LastUserUpdateSource = MakeCopyOf(this.LastUserUpdateSource, existingCopies) as User;
		
			//deep copy nested objects
			copy.DieAttachFileCollection = (TList<DieAttachFile>) MakeCopyOf(this.DieAttachFileCollection, existingCopies); 
			copy.DieRequestCollection = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DieRequest Entity 
		///</summary>
		public virtual DieRequest Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DieRequest Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DieRequest DeepCopy()
		{
			return EntityHelper.Clone<DieRequest>(this as DieRequest);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DieRequestEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DieRequestEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DieRequestEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DieRequestColumn column)
		{
			switch(column)
			{
					case DieRequestColumn.DieRequestId:
					return entityData.DieRequestId != _originalData.DieRequestId;
					case DieRequestColumn.DieName:
					return entityData.DieName != _originalData.DieName;
					case DieRequestColumn.DieTag:
					return entityData.DieTag != _originalData.DieTag;
					case DieRequestColumn.DieDescription:
					return entityData.DieDescription != _originalData.DieDescription;
					case DieRequestColumn.DieTypeId:
					return entityData.DieTypeId != _originalData.DieTypeId;
					case DieRequestColumn.ResolutionsId:
					return entityData.ResolutionsId != _originalData.ResolutionsId;
					case DieRequestColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case DieRequestColumn.ProjectId:
					return entityData.ProjectId != _originalData.ProjectId;
					case DieRequestColumn.DieStatus:
					return entityData.DieStatus != _originalData.DieStatus;
					case DieRequestColumn.PriorityDieRequestId:
					return entityData.PriorityDieRequestId != _originalData.PriorityDieRequestId;
					case DieRequestColumn.DieDateSubmit:
					return entityData.DieDateSubmit != _originalData.DieDateSubmit;
					case DieRequestColumn.CodeBy:
					return entityData.CodeBy != _originalData.CodeBy;
					case DieRequestColumn.Owner:
					return entityData.Owner != _originalData.Owner;
					case DieRequestColumn.UpdateTime:
					return entityData.UpdateTime != _originalData.UpdateTime;
					case DieRequestColumn.LastUserUpdate:
					return entityData.LastUserUpdate != _originalData.LastUserUpdate;
					case DieRequestColumn.TargetDate:
					return entityData.TargetDate != _originalData.TargetDate;
					case DieRequestColumn.CompletedReleaseId:
					return entityData.CompletedReleaseId != _originalData.CompletedReleaseId;
					case DieRequestColumn.MilestoneId:
					return entityData.MilestoneId != _originalData.MilestoneId;
					case DieRequestColumn.DieCategoryId:
					return entityData.DieCategoryId != _originalData.DieCategoryId;
					case DieRequestColumn.Estimated:
					return entityData.Estimated != _originalData.Estimated;
					case DieRequestColumn.Actual:
					return entityData.Actual != _originalData.Actual;
					case DieRequestColumn.ParentDie:
					return entityData.ParentDie != _originalData.ParentDie;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DieRequestColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DieRequestId != _originalData.DieRequestId;
			result = result || entityData.DieName != _originalData.DieName;
			result = result || entityData.DieTag != _originalData.DieTag;
			result = result || entityData.DieDescription != _originalData.DieDescription;
			result = result || entityData.DieTypeId != _originalData.DieTypeId;
			result = result || entityData.ResolutionsId != _originalData.ResolutionsId;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.ProjectId != _originalData.ProjectId;
			result = result || entityData.DieStatus != _originalData.DieStatus;
			result = result || entityData.PriorityDieRequestId != _originalData.PriorityDieRequestId;
			result = result || entityData.DieDateSubmit != _originalData.DieDateSubmit;
			result = result || entityData.CodeBy != _originalData.CodeBy;
			result = result || entityData.Owner != _originalData.Owner;
			result = result || entityData.UpdateTime != _originalData.UpdateTime;
			result = result || entityData.LastUserUpdate != _originalData.LastUserUpdate;
			result = result || entityData.TargetDate != _originalData.TargetDate;
			result = result || entityData.CompletedReleaseId != _originalData.CompletedReleaseId;
			result = result || entityData.MilestoneId != _originalData.MilestoneId;
			result = result || entityData.DieCategoryId != _originalData.DieCategoryId;
			result = result || entityData.Estimated != _originalData.Estimated;
			result = result || entityData.Actual != _originalData.Actual;
			result = result || entityData.ParentDie != _originalData.ParentDie;
			return result;
		}	
		
		///<summary>
		///  Returns a DieRequest Entity with the original data.
		///</summary>
		public DieRequest GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDieRequest(
				_originalData.DieName,
				_originalData.DieTag,
				_originalData.DieDescription,
				_originalData.DieTypeId,
				_originalData.ResolutionsId,
				_originalData.UserId,
				_originalData.ProjectId,
				_originalData.DieStatus,
				_originalData.PriorityDieRequestId,
				_originalData.DieDateSubmit,
				_originalData.CodeBy,
				_originalData.Owner,
				_originalData.UpdateTime,
				_originalData.LastUserUpdate,
				_originalData.TargetDate,
				_originalData.CompletedReleaseId,
				_originalData.MilestoneId,
				_originalData.DieCategoryId,
				_originalData.Estimated,
				_originalData.Actual,
				_originalData.ParentDie
				);
				
			return (DieRequest)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DieRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DieRequestBase)
				return ValueEquals(this, (DieRequestBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DieRequestBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.DieRequestId.GetHashCode() ^ 
					((this.DieName == null) ? string.Empty : this.DieName.ToString()).GetHashCode() ^ 
					((this.DieTag == null) ? string.Empty : this.DieTag.ToString()).GetHashCode() ^ 
					((this.DieDescription == null) ? string.Empty : this.DieDescription.ToString()).GetHashCode() ^ 
					((this.DieTypeId == null) ? string.Empty : this.DieTypeId.ToString()).GetHashCode() ^ 
					((this.ResolutionsId == null) ? string.Empty : this.ResolutionsId.ToString()).GetHashCode() ^ 
					((this.UserId == null) ? string.Empty : this.UserId.ToString()).GetHashCode() ^ 
					((this.ProjectId == null) ? string.Empty : this.ProjectId.ToString()).GetHashCode() ^ 
					((this.DieStatus == null) ? string.Empty : this.DieStatus.ToString()).GetHashCode() ^ 
					((this.PriorityDieRequestId == null) ? string.Empty : this.PriorityDieRequestId.ToString()).GetHashCode() ^ 
					((this.DieDateSubmit == null) ? string.Empty : this.DieDateSubmit.ToString()).GetHashCode() ^ 
					((this.CodeBy == null) ? string.Empty : this.CodeBy.ToString()).GetHashCode() ^ 
					((this.Owner == null) ? string.Empty : this.Owner.ToString()).GetHashCode() ^ 
					((this.UpdateTime == null) ? string.Empty : this.UpdateTime.ToString()).GetHashCode() ^ 
					((this.LastUserUpdate == null) ? string.Empty : this.LastUserUpdate.ToString()).GetHashCode() ^ 
					((this.TargetDate == null) ? string.Empty : this.TargetDate.ToString()).GetHashCode() ^ 
					((this.CompletedReleaseId == null) ? string.Empty : this.CompletedReleaseId.ToString()).GetHashCode() ^ 
					((this.MilestoneId == null) ? string.Empty : this.MilestoneId.ToString()).GetHashCode() ^ 
					((this.DieCategoryId == null) ? string.Empty : this.DieCategoryId.ToString()).GetHashCode() ^ 
					((this.Estimated == null) ? string.Empty : this.Estimated.ToString()).GetHashCode() ^ 
					((this.Actual == null) ? string.Empty : this.Actual.ToString()).GetHashCode() ^ 
					((this.ParentDie == null) ? string.Empty : this.ParentDie.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DieRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DieRequestBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DieRequestBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DieRequestBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DieRequestBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DieRequestBase Object1, DieRequestBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.DieRequestId != Object2.DieRequestId)
				equal = false;
			if ( Object1.DieName != null && Object2.DieName != null )
			{
				if (Object1.DieName != Object2.DieName)
					equal = false;
			}
			else if (Object1.DieName == null ^ Object2.DieName == null )
			{
				equal = false;
			}
			if ( Object1.DieTag != null && Object2.DieTag != null )
			{
				if (Object1.DieTag != Object2.DieTag)
					equal = false;
			}
			else if (Object1.DieTag == null ^ Object2.DieTag == null )
			{
				equal = false;
			}
			if ( Object1.DieDescription != null && Object2.DieDescription != null )
			{
				if (Object1.DieDescription != Object2.DieDescription)
					equal = false;
			}
			else if (Object1.DieDescription == null ^ Object2.DieDescription == null )
			{
				equal = false;
			}
			if ( Object1.DieTypeId != null && Object2.DieTypeId != null )
			{
				if (Object1.DieTypeId != Object2.DieTypeId)
					equal = false;
			}
			else if (Object1.DieTypeId == null ^ Object2.DieTypeId == null )
			{
				equal = false;
			}
			if ( Object1.ResolutionsId != null && Object2.ResolutionsId != null )
			{
				if (Object1.ResolutionsId != Object2.ResolutionsId)
					equal = false;
			}
			else if (Object1.ResolutionsId == null ^ Object2.ResolutionsId == null )
			{
				equal = false;
			}
			if ( Object1.UserId != null && Object2.UserId != null )
			{
				if (Object1.UserId != Object2.UserId)
					equal = false;
			}
			else if (Object1.UserId == null ^ Object2.UserId == null )
			{
				equal = false;
			}
			if ( Object1.ProjectId != null && Object2.ProjectId != null )
			{
				if (Object1.ProjectId != Object2.ProjectId)
					equal = false;
			}
			else if (Object1.ProjectId == null ^ Object2.ProjectId == null )
			{
				equal = false;
			}
			if ( Object1.DieStatus != null && Object2.DieStatus != null )
			{
				if (Object1.DieStatus != Object2.DieStatus)
					equal = false;
			}
			else if (Object1.DieStatus == null ^ Object2.DieStatus == null )
			{
				equal = false;
			}
			if ( Object1.PriorityDieRequestId != null && Object2.PriorityDieRequestId != null )
			{
				if (Object1.PriorityDieRequestId != Object2.PriorityDieRequestId)
					equal = false;
			}
			else if (Object1.PriorityDieRequestId == null ^ Object2.PriorityDieRequestId == null )
			{
				equal = false;
			}
			if ( Object1.DieDateSubmit != null && Object2.DieDateSubmit != null )
			{
				if (Object1.DieDateSubmit != Object2.DieDateSubmit)
					equal = false;
			}
			else if (Object1.DieDateSubmit == null ^ Object2.DieDateSubmit == null )
			{
				equal = false;
			}
			if ( Object1.CodeBy != null && Object2.CodeBy != null )
			{
				if (Object1.CodeBy != Object2.CodeBy)
					equal = false;
			}
			else if (Object1.CodeBy == null ^ Object2.CodeBy == null )
			{
				equal = false;
			}
			if ( Object1.Owner != null && Object2.Owner != null )
			{
				if (Object1.Owner != Object2.Owner)
					equal = false;
			}
			else if (Object1.Owner == null ^ Object2.Owner == null )
			{
				equal = false;
			}
			if ( Object1.UpdateTime != null && Object2.UpdateTime != null )
			{
				if (Object1.UpdateTime != Object2.UpdateTime)
					equal = false;
			}
			else if (Object1.UpdateTime == null ^ Object2.UpdateTime == null )
			{
				equal = false;
			}
			if ( Object1.LastUserUpdate != null && Object2.LastUserUpdate != null )
			{
				if (Object1.LastUserUpdate != Object2.LastUserUpdate)
					equal = false;
			}
			else if (Object1.LastUserUpdate == null ^ Object2.LastUserUpdate == null )
			{
				equal = false;
			}
			if ( Object1.TargetDate != null && Object2.TargetDate != null )
			{
				if (Object1.TargetDate != Object2.TargetDate)
					equal = false;
			}
			else if (Object1.TargetDate == null ^ Object2.TargetDate == null )
			{
				equal = false;
			}
			if ( Object1.CompletedReleaseId != null && Object2.CompletedReleaseId != null )
			{
				if (Object1.CompletedReleaseId != Object2.CompletedReleaseId)
					equal = false;
			}
			else if (Object1.CompletedReleaseId == null ^ Object2.CompletedReleaseId == null )
			{
				equal = false;
			}
			if ( Object1.MilestoneId != null && Object2.MilestoneId != null )
			{
				if (Object1.MilestoneId != Object2.MilestoneId)
					equal = false;
			}
			else if (Object1.MilestoneId == null ^ Object2.MilestoneId == null )
			{
				equal = false;
			}
			if ( Object1.DieCategoryId != null && Object2.DieCategoryId != null )
			{
				if (Object1.DieCategoryId != Object2.DieCategoryId)
					equal = false;
			}
			else if (Object1.DieCategoryId == null ^ Object2.DieCategoryId == null )
			{
				equal = false;
			}
			if ( Object1.Estimated != null && Object2.Estimated != null )
			{
				if (Object1.Estimated != Object2.Estimated)
					equal = false;
			}
			else if (Object1.Estimated == null ^ Object2.Estimated == null )
			{
				equal = false;
			}
			if ( Object1.Actual != null && Object2.Actual != null )
			{
				if (Object1.Actual != Object2.Actual)
					equal = false;
			}
			else if (Object1.Actual == null ^ Object2.Actual == null )
			{
				equal = false;
			}
			if ( Object1.ParentDie != null && Object2.ParentDie != null )
			{
				if (Object1.ParentDie != Object2.ParentDie)
					equal = false;
			}
			else if (Object1.ParentDie == null ^ Object2.ParentDie == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DieRequestBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DieRequestComparer GetComparer()
        {
            return new DieRequestComparer();
        }
        */

        // Comparer delegates back to DieRequest
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DieRequest rhs, DieRequestColumn which)
        {
            switch (which)
            {
            	
            	
            	case DieRequestColumn.DieRequestId:
            		return this.DieRequestId.CompareTo(rhs.DieRequestId);
            		
            		                 
            	
            	
            	case DieRequestColumn.DieName:
            		return this.DieName.CompareTo(rhs.DieName);
            		
            		                 
            	
            	
            	case DieRequestColumn.DieTag:
            		return this.DieTag.CompareTo(rhs.DieTag);
            		
            		                 
            	
            	
            	case DieRequestColumn.DieDescription:
            		return this.DieDescription.CompareTo(rhs.DieDescription);
            		
            		                 
            	
            	
            	case DieRequestColumn.DieTypeId:
            		return this.DieTypeId.Value.CompareTo(rhs.DieTypeId.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.ResolutionsId:
            		return this.ResolutionsId.Value.CompareTo(rhs.ResolutionsId.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.UserId:
            		return this.UserId.Value.CompareTo(rhs.UserId.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.ProjectId:
            		return this.ProjectId.Value.CompareTo(rhs.ProjectId.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.DieStatus:
            		return this.DieStatus.Value.CompareTo(rhs.DieStatus.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.PriorityDieRequestId:
            		return this.PriorityDieRequestId.Value.CompareTo(rhs.PriorityDieRequestId.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.DieDateSubmit:
            		return this.DieDateSubmit.Value.CompareTo(rhs.DieDateSubmit.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.CodeBy:
            		return this.CodeBy.Value.CompareTo(rhs.CodeBy.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.Owner:
            		return this.Owner.Value.CompareTo(rhs.Owner.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.UpdateTime:
            		return this.UpdateTime.Value.CompareTo(rhs.UpdateTime.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.LastUserUpdate:
            		return this.LastUserUpdate.Value.CompareTo(rhs.LastUserUpdate.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.TargetDate:
            		return this.TargetDate.Value.CompareTo(rhs.TargetDate.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.CompletedReleaseId:
            		return this.CompletedReleaseId.Value.CompareTo(rhs.CompletedReleaseId.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.MilestoneId:
            		return this.MilestoneId.Value.CompareTo(rhs.MilestoneId.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.DieCategoryId:
            		return this.DieCategoryId.Value.CompareTo(rhs.DieCategoryId.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.Estimated:
            		return this.Estimated.Value.CompareTo(rhs.Estimated.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.Actual:
            		return this.Actual.Value.CompareTo(rhs.Actual.Value);
            		
            		                 
            	
            	
            	case DieRequestColumn.ParentDie:
            		return this.ParentDie.Value.CompareTo(rhs.ParentDie.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DieRequestKey> Members
		
		// member variable for the EntityId property
		private DieRequestKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DieRequestKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DieRequestKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DieRequest")
					.Append("|").Append( this.DieRequestId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- DieRequestId: {0}{22}- DieName: {1}{22}- DieTag: {2}{22}- DieDescription: {3}{22}- DieTypeId: {4}{22}- ResolutionsId: {5}{22}- UserId: {6}{22}- ProjectId: {7}{22}- DieStatus: {8}{22}- PriorityDieRequestId: {9}{22}- DieDateSubmit: {10}{22}- CodeBy: {11}{22}- Owner: {12}{22}- UpdateTime: {13}{22}- LastUserUpdate: {14}{22}- TargetDate: {15}{22}- CompletedReleaseId: {16}{22}- MilestoneId: {17}{22}- DieCategoryId: {18}{22}- Estimated: {19}{22}- Actual: {20}{22}- ParentDie: {21}{22}{24}", 
				this.DieRequestId,
				(this.DieName == null) ? string.Empty : this.DieName.ToString(),
				(this.DieTag == null) ? string.Empty : this.DieTag.ToString(),
				(this.DieDescription == null) ? string.Empty : this.DieDescription.ToString(),
				(this.DieTypeId == null) ? string.Empty : this.DieTypeId.ToString(),
				(this.ResolutionsId == null) ? string.Empty : this.ResolutionsId.ToString(),
				(this.UserId == null) ? string.Empty : this.UserId.ToString(),
				(this.ProjectId == null) ? string.Empty : this.ProjectId.ToString(),
				(this.DieStatus == null) ? string.Empty : this.DieStatus.ToString(),
				(this.PriorityDieRequestId == null) ? string.Empty : this.PriorityDieRequestId.ToString(),
				(this.DieDateSubmit == null) ? string.Empty : this.DieDateSubmit.ToString(),
				(this.CodeBy == null) ? string.Empty : this.CodeBy.ToString(),
				(this.Owner == null) ? string.Empty : this.Owner.ToString(),
				(this.UpdateTime == null) ? string.Empty : this.UpdateTime.ToString(),
				(this.LastUserUpdate == null) ? string.Empty : this.LastUserUpdate.ToString(),
				(this.TargetDate == null) ? string.Empty : this.TargetDate.ToString(),
				(this.CompletedReleaseId == null) ? string.Empty : this.CompletedReleaseId.ToString(),
				(this.MilestoneId == null) ? string.Empty : this.MilestoneId.ToString(),
				(this.DieCategoryId == null) ? string.Empty : this.DieCategoryId.ToString(),
				(this.Estimated == null) ? string.Empty : this.Estimated.ToString(),
				(this.Actual == null) ? string.Empty : this.Actual.ToString(),
				(this.ParentDie == null) ? string.Empty : this.ParentDie.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblDIERequest' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DieRequestEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// DIERequestID : khóa của bảng
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblDIERequest"</remarks>
		public System.Int32 DieRequestId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DIEName : Tên của bảng
		/// </summary>
		public System.String		  DieName = null;
		
		/// <summary>
		/// DIETag : 
		/// </summary>
		public System.String		  DieTag = null;
		
		/// <summary>
		/// DIEDescription : 
		/// </summary>
		public System.String		  DieDescription = null;
		
		/// <summary>
		/// DIETypeID : 
		/// </summary>
		public System.Int32?		  DieTypeId = null;
		
		/// <summary>
		/// ResolutionsID : 
		/// </summary>
		public System.Int32?		  ResolutionsId = null;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.Int32?		  UserId = null;
		
		/// <summary>
		/// ProjectID : 
		/// </summary>
		public System.Int32?		  ProjectId = null;
		
		/// <summary>
		/// DIEStatus : 
		/// </summary>
		public System.Int32?		  DieStatus = null;
		
		/// <summary>
		/// PriorityDIERequestID : 
		/// </summary>
		public System.Int32?		  PriorityDieRequestId = null;
		
		/// <summary>
		/// DIEDateSubmit : 
		/// </summary>
		public System.DateTime?		  DieDateSubmit = null;
		
		/// <summary>
		/// CodeBy : 
		/// </summary>
		public System.Int32?		  CodeBy = null;
		
		/// <summary>
		/// Owner : 
		/// </summary>
		public System.Int32?		  Owner = null;
		
		/// <summary>
		/// UpdateTime : 
		/// </summary>
		public System.DateTime?		  UpdateTime = null;
		
		/// <summary>
		/// LastUserUpdate : 
		/// </summary>
		public System.Int32?		  LastUserUpdate = null;
		
		/// <summary>
		/// TargetDate : 
		/// </summary>
		public System.DateTime?		  TargetDate = null;
		
		/// <summary>
		/// CompletedReleaseID : 
		/// </summary>
		public System.Int32?		  CompletedReleaseId = null;
		
		/// <summary>
		/// MilestoneID : 
		/// </summary>
		public System.Int32?		  MilestoneId = null;
		
		/// <summary>
		/// DIECategoryID : 
		/// </summary>
		public System.Int32?		  DieCategoryId = null;
		
		/// <summary>
		/// Estimated : 
		/// </summary>
		public System.Double?		  Estimated = null;
		
		/// <summary>
		/// Actual : 
		/// </summary>
		public System.Double?		  Actual = null;
		
		/// <summary>
		/// ParentDie : 
		/// </summary>
		public System.Int32?		  ParentDie = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private DieCategory _dieCategoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DieCategory"/>.
		/// </summary>
		/// <value>The source DieCategory for DieCategoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DieCategory DieCategoryIdSource
      	{
            get { return this._dieCategoryIdSource; }
            set { this._dieCategoryIdSource = value; }
      	}
		private DieRequest _parentDieSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DieRequest"/>.
		/// </summary>
		/// <value>The source DieRequest for ParentDie.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DieRequest ParentDieSource
      	{
            get { return this._parentDieSource; }
            set { this._parentDieSource = value; }
      	}
		private DieStatus _dieStatusSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DieStatus"/>.
		/// </summary>
		/// <value>The source DieStatus for DieStatus.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DieStatus DieStatusSource
      	{
            get { return this._dieStatusSource; }
            set { this._dieStatusSource = value; }
      	}
		private DieType _dieTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="DieType"/>.
		/// </summary>
		/// <value>The source DieType for DieTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual DieType DieTypeIdSource
      	{
            get { return this._dieTypeIdSource; }
            set { this._dieTypeIdSource = value; }
      	}
		private MileStole _milestoneIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MileStole"/>.
		/// </summary>
		/// <value>The source MileStole for MilestoneId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MileStole MilestoneIdSource
      	{
            get { return this._milestoneIdSource; }
            set { this._milestoneIdSource = value; }
      	}
		private PriorityDieRequest _priorityDieRequestIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PriorityDieRequest"/>.
		/// </summary>
		/// <value>The source PriorityDieRequest for PriorityDieRequestId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PriorityDieRequest PriorityDieRequestIdSource
      	{
            get { return this._priorityDieRequestIdSource; }
            set { this._priorityDieRequestIdSource = value; }
      	}
		private Project _projectIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Project"/>.
		/// </summary>
		/// <value>The source Project for ProjectId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Project ProjectIdSource
      	{
            get { return this._projectIdSource; }
            set { this._projectIdSource = value; }
      	}
		private Release _completedReleaseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Release"/>.
		/// </summary>
		/// <value>The source Release for CompletedReleaseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Release CompletedReleaseIdSource
      	{
            get { return this._completedReleaseIdSource; }
            set { this._completedReleaseIdSource = value; }
      	}
		private Resolutions _resolutionsIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Resolutions"/>.
		/// </summary>
		/// <value>The source Resolutions for ResolutionsId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Resolutions ResolutionsIdSource
      	{
            get { return this._resolutionsIdSource; }
            set { this._resolutionsIdSource = value; }
      	}
		private User _userIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for UserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual User UserIdSource
      	{
            get { return this._userIdSource; }
            set { this._userIdSource = value; }
      	}
		private User _codeBySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for CodeBy.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual User CodeBySource
      	{
            get { return this._codeBySource; }
            set { this._codeBySource = value; }
      	}
		private User _ownerSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for Owner.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual User OwnerSource
      	{
            get { return this._ownerSource; }
            set { this._ownerSource = value; }
      	}
		private User _lastUserUpdateSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for LastUserUpdate.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual User LastUserUpdateSource
      	{
            get { return this._lastUserUpdateSource; }
            set { this._lastUserUpdateSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region DieAttachFileCollection
		
		private TList<DieAttachFile> _dieAttachFileDieRequestId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dieAttachFileDieRequestId
		/// </summary>
		
		public TList<DieAttachFile> DieAttachFileCollection
		{
			get
			{
				if (_dieAttachFileDieRequestId == null)
				{
				_dieAttachFileDieRequestId = new TList<DieAttachFile>();
				}
	
				return _dieAttachFileDieRequestId;
			}
			set { _dieAttachFileDieRequestId = value; }
		}
		
		#endregion

		#region DieRequestCollection
		
		private TList<DieRequest> _dieRequestParentDie;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dieRequestParentDie
		/// </summary>
		
		public TList<DieRequest> DieRequestCollection
		{
			get
			{
				if (_dieRequestParentDie == null)
				{
				_dieRequestParentDie = new TList<DieRequest>();
				}
	
				return _dieRequestParentDie;
			}
			set { _dieRequestParentDie = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DieRequestEntityData _tmp = new DieRequestEntityData();
						
			_tmp.DieRequestId = this.DieRequestId;
			
			_tmp.DieName = this.DieName;
			_tmp.DieTag = this.DieTag;
			_tmp.DieDescription = this.DieDescription;
			_tmp.DieTypeId = this.DieTypeId;
			_tmp.ResolutionsId = this.ResolutionsId;
			_tmp.UserId = this.UserId;
			_tmp.ProjectId = this.ProjectId;
			_tmp.DieStatus = this.DieStatus;
			_tmp.PriorityDieRequestId = this.PriorityDieRequestId;
			_tmp.DieDateSubmit = this.DieDateSubmit;
			_tmp.CodeBy = this.CodeBy;
			_tmp.Owner = this.Owner;
			_tmp.UpdateTime = this.UpdateTime;
			_tmp.LastUserUpdate = this.LastUserUpdate;
			_tmp.TargetDate = this.TargetDate;
			_tmp.CompletedReleaseId = this.CompletedReleaseId;
			_tmp.MilestoneId = this.MilestoneId;
			_tmp.DieCategoryId = this.DieCategoryId;
			_tmp.Estimated = this.Estimated;
			_tmp.Actual = this.Actual;
			_tmp.ParentDie = this.ParentDie;
			
			#region Source Parent Composite Entities
			if (this.DieCategoryIdSource != null)
				_tmp.DieCategoryIdSource = MakeCopyOf(this.DieCategoryIdSource) as DieCategory;
			if (this.ParentDieSource != null)
				_tmp.ParentDieSource = MakeCopyOf(this.ParentDieSource) as DieRequest;
			if (this.DieStatusSource != null)
				_tmp.DieStatusSource = MakeCopyOf(this.DieStatusSource) as DieStatus;
			if (this.DieTypeIdSource != null)
				_tmp.DieTypeIdSource = MakeCopyOf(this.DieTypeIdSource) as DieType;
			if (this.MilestoneIdSource != null)
				_tmp.MilestoneIdSource = MakeCopyOf(this.MilestoneIdSource) as MileStole;
			if (this.PriorityDieRequestIdSource != null)
				_tmp.PriorityDieRequestIdSource = MakeCopyOf(this.PriorityDieRequestIdSource) as PriorityDieRequest;
			if (this.ProjectIdSource != null)
				_tmp.ProjectIdSource = MakeCopyOf(this.ProjectIdSource) as Project;
			if (this.CompletedReleaseIdSource != null)
				_tmp.CompletedReleaseIdSource = MakeCopyOf(this.CompletedReleaseIdSource) as Release;
			if (this.ResolutionsIdSource != null)
				_tmp.ResolutionsIdSource = MakeCopyOf(this.ResolutionsIdSource) as Resolutions;
			if (this.UserIdSource != null)
				_tmp.UserIdSource = MakeCopyOf(this.UserIdSource) as User;
			if (this.CodeBySource != null)
				_tmp.CodeBySource = MakeCopyOf(this.CodeBySource) as User;
			if (this.OwnerSource != null)
				_tmp.OwnerSource = MakeCopyOf(this.OwnerSource) as User;
			if (this.LastUserUpdateSource != null)
				_tmp.LastUserUpdateSource = MakeCopyOf(this.LastUserUpdateSource) as User;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._dieAttachFileDieRequestId != null)
				_tmp.DieAttachFileCollection = (TList<DieAttachFile>) MakeCopyOf(this.DieAttachFileCollection); 
			if (this._dieRequestParentDie != null)
				_tmp.DieRequestCollection = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DieRequestEntityData _tmp = new DieRequestEntityData();
						
			_tmp.DieRequestId = this.DieRequestId;
			
			_tmp.DieName = this.DieName;
			_tmp.DieTag = this.DieTag;
			_tmp.DieDescription = this.DieDescription;
			_tmp.DieTypeId = this.DieTypeId;
			_tmp.ResolutionsId = this.ResolutionsId;
			_tmp.UserId = this.UserId;
			_tmp.ProjectId = this.ProjectId;
			_tmp.DieStatus = this.DieStatus;
			_tmp.PriorityDieRequestId = this.PriorityDieRequestId;
			_tmp.DieDateSubmit = this.DieDateSubmit;
			_tmp.CodeBy = this.CodeBy;
			_tmp.Owner = this.Owner;
			_tmp.UpdateTime = this.UpdateTime;
			_tmp.LastUserUpdate = this.LastUserUpdate;
			_tmp.TargetDate = this.TargetDate;
			_tmp.CompletedReleaseId = this.CompletedReleaseId;
			_tmp.MilestoneId = this.MilestoneId;
			_tmp.DieCategoryId = this.DieCategoryId;
			_tmp.Estimated = this.Estimated;
			_tmp.Actual = this.Actual;
			_tmp.ParentDie = this.ParentDie;
			
			#region Source Parent Composite Entities
			if (this.DieCategoryIdSource != null && existingCopies.Contains(this.DieCategoryIdSource))
				_tmp.DieCategoryIdSource = existingCopies[this.DieCategoryIdSource] as DieCategory;
			else
				_tmp.DieCategoryIdSource = MakeCopyOf(this.DieCategoryIdSource, existingCopies) as DieCategory;
			if (this.ParentDieSource != null && existingCopies.Contains(this.ParentDieSource))
				_tmp.ParentDieSource = existingCopies[this.ParentDieSource] as DieRequest;
			else
				_tmp.ParentDieSource = MakeCopyOf(this.ParentDieSource, existingCopies) as DieRequest;
			if (this.DieStatusSource != null && existingCopies.Contains(this.DieStatusSource))
				_tmp.DieStatusSource = existingCopies[this.DieStatusSource] as DieStatus;
			else
				_tmp.DieStatusSource = MakeCopyOf(this.DieStatusSource, existingCopies) as DieStatus;
			if (this.DieTypeIdSource != null && existingCopies.Contains(this.DieTypeIdSource))
				_tmp.DieTypeIdSource = existingCopies[this.DieTypeIdSource] as DieType;
			else
				_tmp.DieTypeIdSource = MakeCopyOf(this.DieTypeIdSource, existingCopies) as DieType;
			if (this.MilestoneIdSource != null && existingCopies.Contains(this.MilestoneIdSource))
				_tmp.MilestoneIdSource = existingCopies[this.MilestoneIdSource] as MileStole;
			else
				_tmp.MilestoneIdSource = MakeCopyOf(this.MilestoneIdSource, existingCopies) as MileStole;
			if (this.PriorityDieRequestIdSource != null && existingCopies.Contains(this.PriorityDieRequestIdSource))
				_tmp.PriorityDieRequestIdSource = existingCopies[this.PriorityDieRequestIdSource] as PriorityDieRequest;
			else
				_tmp.PriorityDieRequestIdSource = MakeCopyOf(this.PriorityDieRequestIdSource, existingCopies) as PriorityDieRequest;
			if (this.ProjectIdSource != null && existingCopies.Contains(this.ProjectIdSource))
				_tmp.ProjectIdSource = existingCopies[this.ProjectIdSource] as Project;
			else
				_tmp.ProjectIdSource = MakeCopyOf(this.ProjectIdSource, existingCopies) as Project;
			if (this.CompletedReleaseIdSource != null && existingCopies.Contains(this.CompletedReleaseIdSource))
				_tmp.CompletedReleaseIdSource = existingCopies[this.CompletedReleaseIdSource] as Release;
			else
				_tmp.CompletedReleaseIdSource = MakeCopyOf(this.CompletedReleaseIdSource, existingCopies) as Release;
			if (this.ResolutionsIdSource != null && existingCopies.Contains(this.ResolutionsIdSource))
				_tmp.ResolutionsIdSource = existingCopies[this.ResolutionsIdSource] as Resolutions;
			else
				_tmp.ResolutionsIdSource = MakeCopyOf(this.ResolutionsIdSource, existingCopies) as Resolutions;
			if (this.UserIdSource != null && existingCopies.Contains(this.UserIdSource))
				_tmp.UserIdSource = existingCopies[this.UserIdSource] as User;
			else
				_tmp.UserIdSource = MakeCopyOf(this.UserIdSource, existingCopies) as User;
			if (this.CodeBySource != null && existingCopies.Contains(this.CodeBySource))
				_tmp.CodeBySource = existingCopies[this.CodeBySource] as User;
			else
				_tmp.CodeBySource = MakeCopyOf(this.CodeBySource, existingCopies) as User;
			if (this.OwnerSource != null && existingCopies.Contains(this.OwnerSource))
				_tmp.OwnerSource = existingCopies[this.OwnerSource] as User;
			else
				_tmp.OwnerSource = MakeCopyOf(this.OwnerSource, existingCopies) as User;
			if (this.LastUserUpdateSource != null && existingCopies.Contains(this.LastUserUpdateSource))
				_tmp.LastUserUpdateSource = existingCopies[this.LastUserUpdateSource] as User;
			else
				_tmp.LastUserUpdateSource = MakeCopyOf(this.LastUserUpdateSource, existingCopies) as User;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.DieAttachFileCollection = (TList<DieAttachFile>) MakeCopyOf(this.DieAttachFileCollection, existingCopies); 
			_tmp.DieRequestCollection = (TList<DieRequest>) MakeCopyOf(this.DieRequestCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieRequestColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DieRequestColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieRequestColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DieRequestColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DieRequestColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				DieRequestEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DieRequestEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DieRequestColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DieRequestEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DieRequestEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DieRequestEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DieRequest"/> object.
	/// </remarks>
	public class DieRequestEventArgs : System.EventArgs
	{
		private DieRequestColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DieRequestEventArgs class.
		///</summary>
		public DieRequestEventArgs(DieRequestColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DieRequestEventArgs class.
		///</summary>
		public DieRequestEventArgs(DieRequestColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DieRequestColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DieRequestColumn" />
		public DieRequestColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DieRequest related events.
	///</summary>
	public delegate void DieRequestEventHandler(object sender, DieRequestEventArgs e);
	
	#region DieRequestComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DieRequestComparer : System.Collections.Generic.IComparer<DieRequest>
	{
		DieRequestColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DieRequestComparer"/> class.
        /// </summary>
		public DieRequestComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DieRequestComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DieRequestComparer(DieRequestColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="DieRequest"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="DieRequest"/> to compare.</param>
        /// <param name="b">The second <c>DieRequest</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DieRequest a, DieRequest b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DieRequest entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DieRequest a, DieRequest b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DieRequestColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DieRequestKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DieRequest"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DieRequestKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DieRequestKey class.
		/// </summary>
		public DieRequestKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DieRequestKey class.
		/// </summary>
		public DieRequestKey(DieRequestBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.DieRequestId = entity.DieRequestId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DieRequestKey class.
		/// </summary>
		public DieRequestKey(System.Int32 _dieRequestId)
		{
			#region Init Properties

			this.DieRequestId = _dieRequestId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DieRequestBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DieRequestBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the DieRequestId property
		private System.Int32 _dieRequestId;
		
		/// <summary>
		/// Gets or sets the DieRequestId property.
		/// </summary>
		public System.Int32 DieRequestId
		{
			get { return _dieRequestId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.DieRequestId = value;
				
				_dieRequestId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				DieRequestId = ( values["DieRequestId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["DieRequestId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("DieRequestId", DieRequestId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("DieRequestId: {0}{1}",
								DieRequestId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DieRequestColumn Enum
	
	/// <summary>
	/// Enumerate the DieRequest columns.
	/// </summary>
	[Serializable]
	public enum DieRequestColumn : int
	{
		/// <summary>
		/// DieRequestId : khóa của bảng
		/// </summary>
		[EnumTextValue("DIERequestID")]
		[ColumnEnum("DIERequestID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		DieRequestId = 1,
		/// <summary>
		/// DieName : Tên của bảng
		/// </summary>
		[EnumTextValue("DIEName")]
		[ColumnEnum("DIEName", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		DieName = 2,
		/// <summary>
		/// DieTag : 
		/// </summary>
		[EnumTextValue("DIETag")]
		[ColumnEnum("DIETag", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		DieTag = 3,
		/// <summary>
		/// DieDescription : 
		/// </summary>
		[EnumTextValue("DIEDescription")]
		[ColumnEnum("DIEDescription", typeof(System.String), System.Data.DbType.String, false, false, true)]
		DieDescription = 4,
		/// <summary>
		/// DieTypeId : 
		/// </summary>
		[EnumTextValue("DIETypeID")]
		[ColumnEnum("DIETypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DieTypeId = 5,
		/// <summary>
		/// ResolutionsId : 
		/// </summary>
		[EnumTextValue("ResolutionsID")]
		[ColumnEnum("ResolutionsID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ResolutionsId = 6,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserId = 7,
		/// <summary>
		/// ProjectId : 
		/// </summary>
		[EnumTextValue("ProjectID")]
		[ColumnEnum("ProjectID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProjectId = 8,
		/// <summary>
		/// DieStatus : 
		/// </summary>
		[EnumTextValue("DIEStatus")]
		[ColumnEnum("DIEStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DieStatus = 9,
		/// <summary>
		/// PriorityDieRequestId : 
		/// </summary>
		[EnumTextValue("PriorityDIERequestID")]
		[ColumnEnum("PriorityDIERequestID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PriorityDieRequestId = 10,
		/// <summary>
		/// DieDateSubmit : 
		/// </summary>
		[EnumTextValue("DIEDateSubmit")]
		[ColumnEnum("DIEDateSubmit", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DieDateSubmit = 11,
		/// <summary>
		/// CodeBy : 
		/// </summary>
		[EnumTextValue("CodeBy")]
		[ColumnEnum("CodeBy", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CodeBy = 12,
		/// <summary>
		/// Owner : 
		/// </summary>
		[EnumTextValue("Owner")]
		[ColumnEnum("Owner", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Owner = 13,
		/// <summary>
		/// UpdateTime : 
		/// </summary>
		[EnumTextValue("UpdateTime")]
		[ColumnEnum("UpdateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateTime = 14,
		/// <summary>
		/// LastUserUpdate : 
		/// </summary>
		[EnumTextValue("LastUserUpdate")]
		[ColumnEnum("LastUserUpdate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastUserUpdate = 15,
		/// <summary>
		/// TargetDate : 
		/// </summary>
		[EnumTextValue("TargetDate")]
		[ColumnEnum("TargetDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TargetDate = 16,
		/// <summary>
		/// CompletedReleaseId : 
		/// </summary>
		[EnumTextValue("CompletedReleaseID")]
		[ColumnEnum("CompletedReleaseID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CompletedReleaseId = 17,
		/// <summary>
		/// MilestoneId : 
		/// </summary>
		[EnumTextValue("MilestoneID")]
		[ColumnEnum("MilestoneID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MilestoneId = 18,
		/// <summary>
		/// DieCategoryId : 
		/// </summary>
		[EnumTextValue("DIECategoryID")]
		[ColumnEnum("DIECategoryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DieCategoryId = 19,
		/// <summary>
		/// Estimated : 
		/// </summary>
		[EnumTextValue("Estimated")]
		[ColumnEnum("Estimated", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Estimated = 20,
		/// <summary>
		/// Actual : 
		/// </summary>
		[EnumTextValue("Actual")]
		[ColumnEnum("Actual", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Actual = 21,
		/// <summary>
		/// ParentDie : 
		/// </summary>
		[EnumTextValue("ParentDie")]
		[ColumnEnum("ParentDie", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ParentDie = 22
	}//End enum

	#endregion DieRequestColumn Enum

} // end namespace
