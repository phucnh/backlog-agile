
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file DieHistory.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Agile.Entities.Validation;
#endregion

namespace Agile.Entities
{
	///<summary>
	/// An object representation of the 'tblDIEHistory' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DieHistoryBase : EntityBase, IDieHistory, IEntityId<DieHistoryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DieHistoryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DieHistoryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DieHistoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DieHistory> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DieHistoryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DieHistoryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DieHistoryBase"/> instance.
		///</summary>
		public DieHistoryBase()
		{
			this.entityData = new DieHistoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DieHistoryBase"/> instance.
		///</summary>
		///<param name="_dieRequestId"></param>
		///<param name="_dieDateSubmit"></param>
		///<param name="_dieStatus">trang thai cua DIE, mac dinh khi tao ra (submit) la 1</param>
		///<param name="_dieHistoryNote"></param>
		///<param name="_dieHistoryNoteJp"></param>
		///<param name="_releaseId"></param>
		///<param name="_userId"></param>
		///<param name="_owner"></param>
		///<param name="_lastUserUpdate"></param>
		///<param name="_lastTimeUpdate"></param>
		///<param name="_actionTypeId"></param>
		public DieHistoryBase(System.Int32 _dieRequestId, System.DateTime _dieDateSubmit, 
			System.Int16 _dieStatus, System.String _dieHistoryNote, System.String _dieHistoryNoteJp, 
			System.Int32? _releaseId, System.Int32? _userId, System.Int32? _owner, System.Int32? _lastUserUpdate, 
			System.DateTime? _lastTimeUpdate, System.Int32? _actionTypeId)
		{
			this.entityData = new DieHistoryEntityData();
			this.backupData = null;

			this.DieRequestId = _dieRequestId;
			this.DieDateSubmit = _dieDateSubmit;
			this.DieStatus = _dieStatus;
			this.DieHistoryNote = _dieHistoryNote;
			this.DieHistoryNoteJp = _dieHistoryNoteJp;
			this.ReleaseId = _releaseId;
			this.UserId = _userId;
			this.Owner = _owner;
			this.LastUserUpdate = _lastUserUpdate;
			this.LastTimeUpdate = _lastTimeUpdate;
			this.ActionTypeId = _actionTypeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DieHistory"/> instance.
		///</summary>
		///<param name="_dieRequestId"></param>
		///<param name="_dieDateSubmit"></param>
		///<param name="_dieStatus">trang thai cua DIE, mac dinh khi tao ra (submit) la 1</param>
		///<param name="_dieHistoryNote"></param>
		///<param name="_dieHistoryNoteJp"></param>
		///<param name="_releaseId"></param>
		///<param name="_userId"></param>
		///<param name="_owner"></param>
		///<param name="_lastUserUpdate"></param>
		///<param name="_lastTimeUpdate"></param>
		///<param name="_actionTypeId"></param>
		public static DieHistory CreateDieHistory(System.Int32 _dieRequestId, System.DateTime _dieDateSubmit, 
			System.Int16 _dieStatus, System.String _dieHistoryNote, System.String _dieHistoryNoteJp, 
			System.Int32? _releaseId, System.Int32? _userId, System.Int32? _owner, System.Int32? _lastUserUpdate, 
			System.DateTime? _lastTimeUpdate, System.Int32? _actionTypeId)
		{
			DieHistory newDieHistory = new DieHistory();
			newDieHistory.DieRequestId = _dieRequestId;
			newDieHistory.DieDateSubmit = _dieDateSubmit;
			newDieHistory.DieStatus = _dieStatus;
			newDieHistory.DieHistoryNote = _dieHistoryNote;
			newDieHistory.DieHistoryNoteJp = _dieHistoryNoteJp;
			newDieHistory.ReleaseId = _releaseId;
			newDieHistory.UserId = _userId;
			newDieHistory.Owner = _owner;
			newDieHistory.LastUserUpdate = _lastUserUpdate;
			newDieHistory.LastTimeUpdate = _lastTimeUpdate;
			newDieHistory.ActionTypeId = _actionTypeId;
			return newDieHistory;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DieHistoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 DieHistoryId
		{
			get
			{
				return this.entityData.DieHistoryId; 
			}
			
			set
			{
				if (this.entityData.DieHistoryId == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.DieHistoryId, this.entityData.DieHistoryId);
				this.entityData.DieHistoryId = value;
				this.EntityId.DieHistoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.DieHistoryId, this.entityData.DieHistoryId);
				OnPropertyChanged("DieHistoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieRequestId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DieRequestId
		{
			get
			{
				return this.entityData.DieRequestId; 
			}
			
			set
			{
				if (this.entityData.DieRequestId == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.DieRequestId, this.entityData.DieRequestId);
				this.entityData.DieRequestId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.DieRequestId, this.entityData.DieRequestId);
				OnPropertyChanged("DieRequestId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieDateSubmit property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DieDateSubmit
		{
			get
			{
				return this.entityData.DieDateSubmit; 
			}
			
			set
			{
				if (this.entityData.DieDateSubmit == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.DieDateSubmit, this.entityData.DieDateSubmit);
				this.entityData.DieDateSubmit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.DieDateSubmit, this.entityData.DieDateSubmit);
				OnPropertyChanged("DieDateSubmit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieStatus property. 
		///		trang thai cua DIE, mac dinh khi tao ra (submit) la 1
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"trang thai cua DIE, mac dinh khi tao ra (submit) la 1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 DieStatus
		{
			get
			{
				return this.entityData.DieStatus; 
			}
			
			set
			{
				if (this.entityData.DieStatus == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.DieStatus, this.entityData.DieStatus);
				this.entityData.DieStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.DieStatus, this.entityData.DieStatus);
				OnPropertyChanged("DieStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieHistoryNote property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4000)]
		public virtual System.String DieHistoryNote
		{
			get
			{
				return this.entityData.DieHistoryNote; 
			}
			
			set
			{
				if (this.entityData.DieHistoryNote == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.DieHistoryNote, this.entityData.DieHistoryNote);
				this.entityData.DieHistoryNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.DieHistoryNote, this.entityData.DieHistoryNote);
				OnPropertyChanged("DieHistoryNote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DieHistoryNoteJp property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4000)]
		public virtual System.String DieHistoryNoteJp
		{
			get
			{
				return this.entityData.DieHistoryNoteJp; 
			}
			
			set
			{
				if (this.entityData.DieHistoryNoteJp == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.DieHistoryNoteJp, this.entityData.DieHistoryNoteJp);
				this.entityData.DieHistoryNoteJp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.DieHistoryNoteJp, this.entityData.DieHistoryNoteJp);
				OnPropertyChanged("DieHistoryNoteJp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReleaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReleaseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ReleaseId
		{
			get
			{
				return this.entityData.ReleaseId; 
			}
			
			set
			{
				if (this.entityData.ReleaseId == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.ReleaseId, this.entityData.ReleaseId);
				this.entityData.ReleaseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.ReleaseId, this.entityData.ReleaseId);
				OnPropertyChanged("ReleaseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Owner property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOwnerNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Owner
		{
			get
			{
				return this.entityData.Owner; 
			}
			
			set
			{
				if (this.entityData.Owner == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.Owner, this.entityData.Owner);
				this.entityData.Owner = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.Owner, this.entityData.Owner);
				OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastUserUpdate property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLastUserUpdateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LastUserUpdate
		{
			get
			{
				return this.entityData.LastUserUpdate; 
			}
			
			set
			{
				if (this.entityData.LastUserUpdate == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.LastUserUpdate, this.entityData.LastUserUpdate);
				this.entityData.LastUserUpdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.LastUserUpdate, this.entityData.LastUserUpdate);
				OnPropertyChanged("LastUserUpdate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastTimeUpdate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastTimeUpdateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastTimeUpdate
		{
			get
			{
				return this.entityData.LastTimeUpdate; 
			}
			
			set
			{
				if (this.entityData.LastTimeUpdate == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.LastTimeUpdate, this.entityData.LastTimeUpdate);
				this.entityData.LastTimeUpdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.LastTimeUpdate, this.entityData.LastTimeUpdate);
				OnPropertyChanged("LastTimeUpdate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActionTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsActionTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ActionTypeId
		{
			get
			{
				return this.entityData.ActionTypeId; 
			}
			
			set
			{
				if (this.entityData.ActionTypeId == value)
					return;
					
				OnColumnChanging(DieHistoryColumn.ActionTypeId, this.entityData.ActionTypeId);
				this.entityData.ActionTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DieHistoryColumn.ActionTypeId, this.entityData.ActionTypeId);
				OnPropertyChanged("ActionTypeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DieHistoryNote", "Die History Note", 4000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DieHistoryNoteJp", "Die History Note Jp", 4000));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblDIEHistory"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DIEHistoryID", "DIERequestID", "DIEDateSubmit", "DIEStatus", "DIEHistoryNote", "DIEHistoryNoteJP", "ReleaseID", "UserID", "Owner", "LastUserUpdate", "LastTimeUpdate", "ActionTypeID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DieHistoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DieHistory) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DieHistory>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DieHistory);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DieHistory Entity 
		///</summary>
		protected virtual DieHistory Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DieHistory copy = new DieHistory();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DieHistoryId = this.DieHistoryId;
				copy.DieRequestId = this.DieRequestId;
				copy.DieDateSubmit = this.DieDateSubmit;
				copy.DieStatus = this.DieStatus;
				copy.DieHistoryNote = this.DieHistoryNote;
				copy.DieHistoryNoteJp = this.DieHistoryNoteJp;
				copy.ReleaseId = this.ReleaseId;
				copy.UserId = this.UserId;
				copy.Owner = this.Owner;
				copy.LastUserUpdate = this.LastUserUpdate;
				copy.LastTimeUpdate = this.LastTimeUpdate;
				copy.ActionTypeId = this.ActionTypeId;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DieHistory Entity 
		///</summary>
		public virtual DieHistory Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DieHistory Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DieHistory DeepCopy()
		{
			return EntityHelper.Clone<DieHistory>(this as DieHistory);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DieHistoryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DieHistoryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DieHistoryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DieHistoryColumn column)
		{
			switch(column)
			{
					case DieHistoryColumn.DieHistoryId:
					return entityData.DieHistoryId != _originalData.DieHistoryId;
					case DieHistoryColumn.DieRequestId:
					return entityData.DieRequestId != _originalData.DieRequestId;
					case DieHistoryColumn.DieDateSubmit:
					return entityData.DieDateSubmit != _originalData.DieDateSubmit;
					case DieHistoryColumn.DieStatus:
					return entityData.DieStatus != _originalData.DieStatus;
					case DieHistoryColumn.DieHistoryNote:
					return entityData.DieHistoryNote != _originalData.DieHistoryNote;
					case DieHistoryColumn.DieHistoryNoteJp:
					return entityData.DieHistoryNoteJp != _originalData.DieHistoryNoteJp;
					case DieHistoryColumn.ReleaseId:
					return entityData.ReleaseId != _originalData.ReleaseId;
					case DieHistoryColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case DieHistoryColumn.Owner:
					return entityData.Owner != _originalData.Owner;
					case DieHistoryColumn.LastUserUpdate:
					return entityData.LastUserUpdate != _originalData.LastUserUpdate;
					case DieHistoryColumn.LastTimeUpdate:
					return entityData.LastTimeUpdate != _originalData.LastTimeUpdate;
					case DieHistoryColumn.ActionTypeId:
					return entityData.ActionTypeId != _originalData.ActionTypeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DieHistoryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DieHistoryId != _originalData.DieHistoryId;
			result = result || entityData.DieRequestId != _originalData.DieRequestId;
			result = result || entityData.DieDateSubmit != _originalData.DieDateSubmit;
			result = result || entityData.DieStatus != _originalData.DieStatus;
			result = result || entityData.DieHistoryNote != _originalData.DieHistoryNote;
			result = result || entityData.DieHistoryNoteJp != _originalData.DieHistoryNoteJp;
			result = result || entityData.ReleaseId != _originalData.ReleaseId;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.Owner != _originalData.Owner;
			result = result || entityData.LastUserUpdate != _originalData.LastUserUpdate;
			result = result || entityData.LastTimeUpdate != _originalData.LastTimeUpdate;
			result = result || entityData.ActionTypeId != _originalData.ActionTypeId;
			return result;
		}	
		
		///<summary>
		///  Returns a DieHistory Entity with the original data.
		///</summary>
		public DieHistory GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDieHistory(
				_originalData.DieRequestId,
				_originalData.DieDateSubmit,
				_originalData.DieStatus,
				_originalData.DieHistoryNote,
				_originalData.DieHistoryNoteJp,
				_originalData.ReleaseId,
				_originalData.UserId,
				_originalData.Owner,
				_originalData.LastUserUpdate,
				_originalData.LastTimeUpdate,
				_originalData.ActionTypeId
				);
				
			return (DieHistory)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DieHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DieHistoryBase)
				return ValueEquals(this, (DieHistoryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DieHistoryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.DieHistoryId.GetHashCode() ^ 
					this.DieRequestId.GetHashCode() ^ 
					this.DieDateSubmit.GetHashCode() ^ 
					this.DieStatus.GetHashCode() ^ 
					((this.DieHistoryNote == null) ? string.Empty : this.DieHistoryNote.ToString()).GetHashCode() ^ 
					((this.DieHistoryNoteJp == null) ? string.Empty : this.DieHistoryNoteJp.ToString()).GetHashCode() ^ 
					((this.ReleaseId == null) ? string.Empty : this.ReleaseId.ToString()).GetHashCode() ^ 
					((this.UserId == null) ? string.Empty : this.UserId.ToString()).GetHashCode() ^ 
					((this.Owner == null) ? string.Empty : this.Owner.ToString()).GetHashCode() ^ 
					((this.LastUserUpdate == null) ? string.Empty : this.LastUserUpdate.ToString()).GetHashCode() ^ 
					((this.LastTimeUpdate == null) ? string.Empty : this.LastTimeUpdate.ToString()).GetHashCode() ^ 
					((this.ActionTypeId == null) ? string.Empty : this.ActionTypeId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DieHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DieHistoryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DieHistoryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DieHistoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DieHistoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DieHistoryBase Object1, DieHistoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.DieHistoryId != Object2.DieHistoryId)
				equal = false;
			if (Object1.DieRequestId != Object2.DieRequestId)
				equal = false;
			if (Object1.DieDateSubmit != Object2.DieDateSubmit)
				equal = false;
			if (Object1.DieStatus != Object2.DieStatus)
				equal = false;
			if ( Object1.DieHistoryNote != null && Object2.DieHistoryNote != null )
			{
				if (Object1.DieHistoryNote != Object2.DieHistoryNote)
					equal = false;
			}
			else if (Object1.DieHistoryNote == null ^ Object2.DieHistoryNote == null )
			{
				equal = false;
			}
			if ( Object1.DieHistoryNoteJp != null && Object2.DieHistoryNoteJp != null )
			{
				if (Object1.DieHistoryNoteJp != Object2.DieHistoryNoteJp)
					equal = false;
			}
			else if (Object1.DieHistoryNoteJp == null ^ Object2.DieHistoryNoteJp == null )
			{
				equal = false;
			}
			if ( Object1.ReleaseId != null && Object2.ReleaseId != null )
			{
				if (Object1.ReleaseId != Object2.ReleaseId)
					equal = false;
			}
			else if (Object1.ReleaseId == null ^ Object2.ReleaseId == null )
			{
				equal = false;
			}
			if ( Object1.UserId != null && Object2.UserId != null )
			{
				if (Object1.UserId != Object2.UserId)
					equal = false;
			}
			else if (Object1.UserId == null ^ Object2.UserId == null )
			{
				equal = false;
			}
			if ( Object1.Owner != null && Object2.Owner != null )
			{
				if (Object1.Owner != Object2.Owner)
					equal = false;
			}
			else if (Object1.Owner == null ^ Object2.Owner == null )
			{
				equal = false;
			}
			if ( Object1.LastUserUpdate != null && Object2.LastUserUpdate != null )
			{
				if (Object1.LastUserUpdate != Object2.LastUserUpdate)
					equal = false;
			}
			else if (Object1.LastUserUpdate == null ^ Object2.LastUserUpdate == null )
			{
				equal = false;
			}
			if ( Object1.LastTimeUpdate != null && Object2.LastTimeUpdate != null )
			{
				if (Object1.LastTimeUpdate != Object2.LastTimeUpdate)
					equal = false;
			}
			else if (Object1.LastTimeUpdate == null ^ Object2.LastTimeUpdate == null )
			{
				equal = false;
			}
			if ( Object1.ActionTypeId != null && Object2.ActionTypeId != null )
			{
				if (Object1.ActionTypeId != Object2.ActionTypeId)
					equal = false;
			}
			else if (Object1.ActionTypeId == null ^ Object2.ActionTypeId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DieHistoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DieHistoryComparer GetComparer()
        {
            return new DieHistoryComparer();
        }
        */

        // Comparer delegates back to DieHistory
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DieHistory rhs, DieHistoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case DieHistoryColumn.DieHistoryId:
            		return this.DieHistoryId.CompareTo(rhs.DieHistoryId);
            		
            		                 
            	
            	
            	case DieHistoryColumn.DieRequestId:
            		return this.DieRequestId.CompareTo(rhs.DieRequestId);
            		
            		                 
            	
            	
            	case DieHistoryColumn.DieDateSubmit:
            		return this.DieDateSubmit.CompareTo(rhs.DieDateSubmit);
            		
            		                 
            	
            	
            	case DieHistoryColumn.DieStatus:
            		return this.DieStatus.CompareTo(rhs.DieStatus);
            		
            		                 
            	
            	
            	case DieHistoryColumn.DieHistoryNote:
            		return this.DieHistoryNote.CompareTo(rhs.DieHistoryNote);
            		
            		                 
            	
            	
            	case DieHistoryColumn.DieHistoryNoteJp:
            		return this.DieHistoryNoteJp.CompareTo(rhs.DieHistoryNoteJp);
            		
            		                 
            	
            	
            	case DieHistoryColumn.ReleaseId:
            		return this.ReleaseId.Value.CompareTo(rhs.ReleaseId.Value);
            		
            		                 
            	
            	
            	case DieHistoryColumn.UserId:
            		return this.UserId.Value.CompareTo(rhs.UserId.Value);
            		
            		                 
            	
            	
            	case DieHistoryColumn.Owner:
            		return this.Owner.Value.CompareTo(rhs.Owner.Value);
            		
            		                 
            	
            	
            	case DieHistoryColumn.LastUserUpdate:
            		return this.LastUserUpdate.Value.CompareTo(rhs.LastUserUpdate.Value);
            		
            		                 
            	
            	
            	case DieHistoryColumn.LastTimeUpdate:
            		return this.LastTimeUpdate.Value.CompareTo(rhs.LastTimeUpdate.Value);
            		
            		                 
            	
            	
            	case DieHistoryColumn.ActionTypeId:
            		return this.ActionTypeId.Value.CompareTo(rhs.ActionTypeId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DieHistoryKey> Members
		
		// member variable for the EntityId property
		private DieHistoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DieHistoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DieHistoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DieHistory")
					.Append("|").Append( this.DieHistoryId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- DieHistoryId: {0}{12}- DieRequestId: {1}{12}- DieDateSubmit: {2}{12}- DieStatus: {3}{12}- DieHistoryNote: {4}{12}- DieHistoryNoteJp: {5}{12}- ReleaseId: {6}{12}- UserId: {7}{12}- Owner: {8}{12}- LastUserUpdate: {9}{12}- LastTimeUpdate: {10}{12}- ActionTypeId: {11}{12}{14}", 
				this.DieHistoryId,
				this.DieRequestId,
				this.DieDateSubmit,
				this.DieStatus,
				(this.DieHistoryNote == null) ? string.Empty : this.DieHistoryNote.ToString(),
				(this.DieHistoryNoteJp == null) ? string.Empty : this.DieHistoryNoteJp.ToString(),
				(this.ReleaseId == null) ? string.Empty : this.ReleaseId.ToString(),
				(this.UserId == null) ? string.Empty : this.UserId.ToString(),
				(this.Owner == null) ? string.Empty : this.Owner.ToString(),
				(this.LastUserUpdate == null) ? string.Empty : this.LastUserUpdate.ToString(),
				(this.LastTimeUpdate == null) ? string.Empty : this.LastTimeUpdate.ToString(),
				(this.ActionTypeId == null) ? string.Empty : this.ActionTypeId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblDIEHistory' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DieHistoryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// DIEHistoryID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblDIEHistory"</remarks>
		public System.Int32 DieHistoryId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DIERequestID : 
		/// </summary>
		public System.Int32		  DieRequestId = (int)0;
		
		/// <summary>
		/// DIEDateSubmit : 
		/// </summary>
		public System.DateTime		  DieDateSubmit = DateTime.MinValue;
		
		/// <summary>
		/// DIEStatus : trang thai cua DIE, mac dinh khi tao ra (submit) la 1
		/// </summary>
		public System.Int16		  DieStatus = (short)0;
		
		/// <summary>
		/// DIEHistoryNote : 
		/// </summary>
		public System.String		  DieHistoryNote = null;
		
		/// <summary>
		/// DIEHistoryNoteJP : 
		/// </summary>
		public System.String		  DieHistoryNoteJp = null;
		
		/// <summary>
		/// ReleaseID : 
		/// </summary>
		public System.Int32?		  ReleaseId = null;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.Int32?		  UserId = null;
		
		/// <summary>
		/// Owner : 
		/// </summary>
		public System.Int32?		  Owner = null;
		
		/// <summary>
		/// LastUserUpdate : 
		/// </summary>
		public System.Int32?		  LastUserUpdate = null;
		
		/// <summary>
		/// LastTimeUpdate : 
		/// </summary>
		public System.DateTime?		  LastTimeUpdate = null;
		
		/// <summary>
		/// ActionTypeID : 
		/// </summary>
		public System.Int32?		  ActionTypeId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DieHistoryEntityData _tmp = new DieHistoryEntityData();
						
			_tmp.DieHistoryId = this.DieHistoryId;
			
			_tmp.DieRequestId = this.DieRequestId;
			_tmp.DieDateSubmit = this.DieDateSubmit;
			_tmp.DieStatus = this.DieStatus;
			_tmp.DieHistoryNote = this.DieHistoryNote;
			_tmp.DieHistoryNoteJp = this.DieHistoryNoteJp;
			_tmp.ReleaseId = this.ReleaseId;
			_tmp.UserId = this.UserId;
			_tmp.Owner = this.Owner;
			_tmp.LastUserUpdate = this.LastUserUpdate;
			_tmp.LastTimeUpdate = this.LastTimeUpdate;
			_tmp.ActionTypeId = this.ActionTypeId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DieHistoryEntityData _tmp = new DieHistoryEntityData();
						
			_tmp.DieHistoryId = this.DieHistoryId;
			
			_tmp.DieRequestId = this.DieRequestId;
			_tmp.DieDateSubmit = this.DieDateSubmit;
			_tmp.DieStatus = this.DieStatus;
			_tmp.DieHistoryNote = this.DieHistoryNote;
			_tmp.DieHistoryNoteJp = this.DieHistoryNoteJp;
			_tmp.ReleaseId = this.ReleaseId;
			_tmp.UserId = this.UserId;
			_tmp.Owner = this.Owner;
			_tmp.LastUserUpdate = this.LastUserUpdate;
			_tmp.LastTimeUpdate = this.LastTimeUpdate;
			_tmp.ActionTypeId = this.ActionTypeId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DieHistoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DieHistoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DieHistoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				DieHistoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DieHistoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DieHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DieHistoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DieHistoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DieHistoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DieHistoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DieHistory"/> object.
	/// </remarks>
	public class DieHistoryEventArgs : System.EventArgs
	{
		private DieHistoryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DieHistoryEventArgs class.
		///</summary>
		public DieHistoryEventArgs(DieHistoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DieHistoryEventArgs class.
		///</summary>
		public DieHistoryEventArgs(DieHistoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DieHistoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DieHistoryColumn" />
		public DieHistoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DieHistory related events.
	///</summary>
	public delegate void DieHistoryEventHandler(object sender, DieHistoryEventArgs e);
	
	#region DieHistoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DieHistoryComparer : System.Collections.Generic.IComparer<DieHistory>
	{
		DieHistoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DieHistoryComparer"/> class.
        /// </summary>
		public DieHistoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DieHistoryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DieHistoryComparer(DieHistoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="DieHistory"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="DieHistory"/> to compare.</param>
        /// <param name="b">The second <c>DieHistory</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DieHistory a, DieHistory b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DieHistory entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DieHistory a, DieHistory b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DieHistoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DieHistoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DieHistory"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DieHistoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DieHistoryKey class.
		/// </summary>
		public DieHistoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DieHistoryKey class.
		/// </summary>
		public DieHistoryKey(DieHistoryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.DieHistoryId = entity.DieHistoryId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DieHistoryKey class.
		/// </summary>
		public DieHistoryKey(System.Int32 _dieHistoryId)
		{
			#region Init Properties

			this.DieHistoryId = _dieHistoryId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DieHistoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DieHistoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the DieHistoryId property
		private System.Int32 _dieHistoryId;
		
		/// <summary>
		/// Gets or sets the DieHistoryId property.
		/// </summary>
		public System.Int32 DieHistoryId
		{
			get { return _dieHistoryId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.DieHistoryId = value;
				
				_dieHistoryId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				DieHistoryId = ( values["DieHistoryId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["DieHistoryId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("DieHistoryId", DieHistoryId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("DieHistoryId: {0}{1}",
								DieHistoryId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DieHistoryColumn Enum
	
	/// <summary>
	/// Enumerate the DieHistory columns.
	/// </summary>
	[Serializable]
	public enum DieHistoryColumn : int
	{
		/// <summary>
		/// DieHistoryId : 
		/// </summary>
		[EnumTextValue("DIEHistoryID")]
		[ColumnEnum("DIEHistoryID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		DieHistoryId = 1,
		/// <summary>
		/// DieRequestId : 
		/// </summary>
		[EnumTextValue("DIERequestID")]
		[ColumnEnum("DIERequestID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DieRequestId = 2,
		/// <summary>
		/// DieDateSubmit : 
		/// </summary>
		[EnumTextValue("DIEDateSubmit")]
		[ColumnEnum("DIEDateSubmit", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DieDateSubmit = 3,
		/// <summary>
		/// DieStatus : trang thai cua DIE, mac dinh khi tao ra (submit) la 1
		/// </summary>
		[EnumTextValue("DIEStatus")]
		[ColumnEnum("DIEStatus", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		DieStatus = 4,
		/// <summary>
		/// DieHistoryNote : 
		/// </summary>
		[EnumTextValue("DIEHistoryNote")]
		[ColumnEnum("DIEHistoryNote", typeof(System.String), System.Data.DbType.String, false, false, true, 4000)]
		DieHistoryNote = 5,
		/// <summary>
		/// DieHistoryNoteJp : 
		/// </summary>
		[EnumTextValue("DIEHistoryNoteJP")]
		[ColumnEnum("DIEHistoryNoteJP", typeof(System.String), System.Data.DbType.String, false, false, true, 4000)]
		DieHistoryNoteJp = 6,
		/// <summary>
		/// ReleaseId : 
		/// </summary>
		[EnumTextValue("ReleaseID")]
		[ColumnEnum("ReleaseID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ReleaseId = 7,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserId = 8,
		/// <summary>
		/// Owner : 
		/// </summary>
		[EnumTextValue("Owner")]
		[ColumnEnum("Owner", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Owner = 9,
		/// <summary>
		/// LastUserUpdate : 
		/// </summary>
		[EnumTextValue("LastUserUpdate")]
		[ColumnEnum("LastUserUpdate", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LastUserUpdate = 10,
		/// <summary>
		/// LastTimeUpdate : 
		/// </summary>
		[EnumTextValue("LastTimeUpdate")]
		[ColumnEnum("LastTimeUpdate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastTimeUpdate = 11,
		/// <summary>
		/// ActionTypeId : 
		/// </summary>
		[EnumTextValue("ActionTypeID")]
		[ColumnEnum("ActionTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ActionTypeId = 12
	}//End enum

	#endregion DieHistoryColumn Enum

} // end namespace
