/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file HomeDieRequest.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Agile.Entities
{
	///<summary>
	/// An object representation of the 'HomeDIERequest' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("HomeDieRequestBase")]
	public abstract partial class HomeDieRequestBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// DIEName : 
		/// </summary>
		private System.String		  _dieName = null;
		
		/// <summary>
		/// DIERequestID : 
		/// </summary>
		private System.Int32		  _dieRequestId = (int)0;
		
		/// <summary>
		/// DIETag : 
		/// </summary>
		private System.String		  _dieTag = null;
		
		/// <summary>
		/// DIEDescription : 
		/// </summary>
		private System.String		  _dieDescription = null;
		
		/// <summary>
		/// UpdateUserID : 
		/// </summary>
		private System.Int32?		  _updateUserId = null;
		
		/// <summary>
		/// ProjectID : 
		/// </summary>
		private System.Int32?		  _projectId = null;
		
		/// <summary>
		/// DIEDateSubmit : 
		/// </summary>
		private System.DateTime?		  _dieDateSubmit = null;
		
		/// <summary>
		/// DIENameStatus : 
		/// </summary>
		private System.String		  _dieNameStatus = null;
		
		/// <summary>
		/// DIETypeName : 
		/// </summary>
		private System.String		  _dieTypeName = null;
		
		/// <summary>
		/// PriorityDIERequestName : 
		/// </summary>
		private System.String		  _priorityDieRequestName = null;
		
		/// <summary>
		/// Color : 
		/// </summary>
		private System.String		  _color = null;
		
		/// <summary>
		/// ColorName : 
		/// </summary>
		private System.String		  _colorName = null;
		
		/// <summary>
		/// DIEStatus : 
		/// </summary>
		private System.Int32?		  _dieStatus = null;
		
		/// <summary>
		/// UpdateTime : 
		/// </summary>
		private System.DateTime?		  _updateTime = null;
		
		/// <summary>
		/// UpdatedUsername : 
		/// </summary>
		private System.Int32?		  _updatedUsername = null;
		
		/// <summary>
		/// TargetDate : 
		/// </summary>
		private System.DateTime?		  _targetDate = null;
		
		/// <summary>
		/// Estimated : 
		/// </summary>
		private System.Double?		  _estimated = null;
		
		/// <summary>
		/// Actual : 
		/// </summary>
		private System.Double?		  _actual = null;
		
		/// <summary>
		/// UserName : 
		/// </summary>
		private System.String		  _userName = string.Empty;
		
		/// <summary>
		/// UpdatedUserID : 
		/// </summary>
		private System.Int32		  _updatedUserId = (int)0;
		
		/// <summary>
		/// DIESubmitDateOnly : 
		/// </summary>
		private System.String		  _dieSubmitDateOnly = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="HomeDieRequestBase"/> instance.
		///</summary>
		public HomeDieRequestBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="HomeDieRequestBase"/> instance.
		///</summary>
		///<param name="_dieName"></param>
		///<param name="_dieRequestId"></param>
		///<param name="_dieTag"></param>
		///<param name="_dieDescription"></param>
		///<param name="_updateUserId"></param>
		///<param name="_projectId"></param>
		///<param name="_dieDateSubmit"></param>
		///<param name="_dieNameStatus"></param>
		///<param name="_dieTypeName"></param>
		///<param name="_priorityDieRequestName"></param>
		///<param name="_color"></param>
		///<param name="_colorName"></param>
		///<param name="_dieStatus"></param>
		///<param name="_updateTime"></param>
		///<param name="_updatedUsername"></param>
		///<param name="_targetDate"></param>
		///<param name="_estimated"></param>
		///<param name="_actual"></param>
		///<param name="_userName"></param>
		///<param name="_updatedUserId"></param>
		///<param name="_dieSubmitDateOnly"></param>
		public HomeDieRequestBase(System.String _dieName, System.Int32 _dieRequestId, System.String _dieTag, System.String _dieDescription, System.Int32? _updateUserId, System.Int32? _projectId, System.DateTime? _dieDateSubmit, System.String _dieNameStatus, System.String _dieTypeName, System.String _priorityDieRequestName, System.String _color, System.String _colorName, System.Int32? _dieStatus, System.DateTime? _updateTime, System.Int32? _updatedUsername, System.DateTime? _targetDate, System.Double? _estimated, System.Double? _actual, System.String _userName, System.Int32 _updatedUserId, System.String _dieSubmitDateOnly)
		{
			this._dieName = _dieName;
			this._dieRequestId = _dieRequestId;
			this._dieTag = _dieTag;
			this._dieDescription = _dieDescription;
			this._updateUserId = _updateUserId;
			this._projectId = _projectId;
			this._dieDateSubmit = _dieDateSubmit;
			this._dieNameStatus = _dieNameStatus;
			this._dieTypeName = _dieTypeName;
			this._priorityDieRequestName = _priorityDieRequestName;
			this._color = _color;
			this._colorName = _colorName;
			this._dieStatus = _dieStatus;
			this._updateTime = _updateTime;
			this._updatedUsername = _updatedUsername;
			this._targetDate = _targetDate;
			this._estimated = _estimated;
			this._actual = _actual;
			this._userName = _userName;
			this._updatedUserId = _updatedUserId;
			this._dieSubmitDateOnly = _dieSubmitDateOnly;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="HomeDieRequest"/> instance.
		///</summary>
		///<param name="_dieName"></param>
		///<param name="_dieRequestId"></param>
		///<param name="_dieTag"></param>
		///<param name="_dieDescription"></param>
		///<param name="_updateUserId"></param>
		///<param name="_projectId"></param>
		///<param name="_dieDateSubmit"></param>
		///<param name="_dieNameStatus"></param>
		///<param name="_dieTypeName"></param>
		///<param name="_priorityDieRequestName"></param>
		///<param name="_color"></param>
		///<param name="_colorName"></param>
		///<param name="_dieStatus"></param>
		///<param name="_updateTime"></param>
		///<param name="_updatedUsername"></param>
		///<param name="_targetDate"></param>
		///<param name="_estimated"></param>
		///<param name="_actual"></param>
		///<param name="_userName"></param>
		///<param name="_updatedUserId"></param>
		///<param name="_dieSubmitDateOnly"></param>
		public static HomeDieRequest CreateHomeDieRequest(System.String _dieName, System.Int32 _dieRequestId, System.String _dieTag, System.String _dieDescription, System.Int32? _updateUserId, System.Int32? _projectId, System.DateTime? _dieDateSubmit, System.String _dieNameStatus, System.String _dieTypeName, System.String _priorityDieRequestName, System.String _color, System.String _colorName, System.Int32? _dieStatus, System.DateTime? _updateTime, System.Int32? _updatedUsername, System.DateTime? _targetDate, System.Double? _estimated, System.Double? _actual, System.String _userName, System.Int32 _updatedUserId, System.String _dieSubmitDateOnly)
		{
			HomeDieRequest newHomeDieRequest = new HomeDieRequest();
			newHomeDieRequest.DieName = _dieName;
			newHomeDieRequest.DieRequestId = _dieRequestId;
			newHomeDieRequest.DieTag = _dieTag;
			newHomeDieRequest.DieDescription = _dieDescription;
			newHomeDieRequest.UpdateUserId = _updateUserId;
			newHomeDieRequest.ProjectId = _projectId;
			newHomeDieRequest.DieDateSubmit = _dieDateSubmit;
			newHomeDieRequest.DieNameStatus = _dieNameStatus;
			newHomeDieRequest.DieTypeName = _dieTypeName;
			newHomeDieRequest.PriorityDieRequestName = _priorityDieRequestName;
			newHomeDieRequest.Color = _color;
			newHomeDieRequest.ColorName = _colorName;
			newHomeDieRequest.DieStatus = _dieStatus;
			newHomeDieRequest.UpdateTime = _updateTime;
			newHomeDieRequest.UpdatedUsername = _updatedUsername;
			newHomeDieRequest.TargetDate = _targetDate;
			newHomeDieRequest.Estimated = _estimated;
			newHomeDieRequest.Actual = _actual;
			newHomeDieRequest.UserName = _userName;
			newHomeDieRequest.UpdatedUserId = _updatedUserId;
			newHomeDieRequest.DieSubmitDateOnly = _dieSubmitDateOnly;
			return newHomeDieRequest;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the DIEName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DieName
		{
			get
			{
				return this._dieName; 
			}
			set
			{
				if (_dieName == value)
					return;
					
				this._dieName = value;
				this._isDirty = true;
				
				OnPropertyChanged("DieName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DIERequestID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 DieRequestId
		{
			get
			{
				return this._dieRequestId; 
			}
			set
			{
				if (_dieRequestId == value)
					return;
					
				this._dieRequestId = value;
				this._isDirty = true;
				
				OnPropertyChanged("DieRequestId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DIETag property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DieTag
		{
			get
			{
				return this._dieTag; 
			}
			set
			{
				if (_dieTag == value)
					return;
					
				this._dieTag = value;
				this._isDirty = true;
				
				OnPropertyChanged("DieTag");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DIEDescription property. 
		///		
		/// </summary>
		/// <value>This type is ntext</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DieDescription
		{
			get
			{
				return this._dieDescription; 
			}
			set
			{
				if (_dieDescription == value)
					return;
					
				this._dieDescription = value;
				this._isDirty = true;
				
				OnPropertyChanged("DieDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UpdateUserID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUpdateUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? UpdateUserId
		{
			get
			{
				return this._updateUserId; 
			}
			set
			{
				if (_updateUserId == value && UpdateUserId != null )
					return;
					
				this._updateUserId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UpdateUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProjectID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProjectIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? ProjectId
		{
			get
			{
				return this._projectId; 
			}
			set
			{
				if (_projectId == value && ProjectId != null )
					return;
					
				this._projectId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DIEDateSubmit property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDieDateSubmitNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? DieDateSubmit
		{
			get
			{
				return this._dieDateSubmit; 
			}
			set
			{
				if (_dieDateSubmit == value && DieDateSubmit != null )
					return;
					
				this._dieDateSubmit = value;
				this._isDirty = true;
				
				OnPropertyChanged("DieDateSubmit");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DIENameStatus property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DieNameStatus
		{
			get
			{
				return this._dieNameStatus; 
			}
			set
			{
				if (_dieNameStatus == value)
					return;
					
				this._dieNameStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("DieNameStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DIETypeName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DieTypeName
		{
			get
			{
				return this._dieTypeName; 
			}
			set
			{
				if (_dieTypeName == value)
					return;
					
				this._dieTypeName = value;
				this._isDirty = true;
				
				OnPropertyChanged("DieTypeName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PriorityDIERequestName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PriorityDieRequestName
		{
			get
			{
				return this._priorityDieRequestName; 
			}
			set
			{
				if (_priorityDieRequestName == value)
					return;
					
				this._priorityDieRequestName = value;
				this._isDirty = true;
				
				OnPropertyChanged("PriorityDieRequestName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Color property. 
		///		
		/// </summary>
		/// <value>This type is nchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Color
		{
			get
			{
				return this._color; 
			}
			set
			{
				if (_color == value)
					return;
					
				this._color = value;
				this._isDirty = true;
				
				OnPropertyChanged("Color");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ColorName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ColorName
		{
			get
			{
				return this._colorName; 
			}
			set
			{
				if (_colorName == value)
					return;
					
				this._colorName = value;
				this._isDirty = true;
				
				OnPropertyChanged("ColorName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DIEStatus property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDieStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? DieStatus
		{
			get
			{
				return this._dieStatus; 
			}
			set
			{
				if (_dieStatus == value && DieStatus != null )
					return;
					
				this._dieStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("DieStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UpdateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdateTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? UpdateTime
		{
			get
			{
				return this._updateTime; 
			}
			set
			{
				if (_updateTime == value && UpdateTime != null )
					return;
					
				this._updateTime = value;
				this._isDirty = true;
				
				OnPropertyChanged("UpdateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UpdatedUsername property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUpdatedUsernameNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? UpdatedUsername
		{
			get
			{
				return this._updatedUsername; 
			}
			set
			{
				if (_updatedUsername == value && UpdatedUsername != null )
					return;
					
				this._updatedUsername = value;
				this._isDirty = true;
				
				OnPropertyChanged("UpdatedUsername");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TargetDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTargetDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? TargetDate
		{
			get
			{
				return this._targetDate; 
			}
			set
			{
				if (_targetDate == value && TargetDate != null )
					return;
					
				this._targetDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("TargetDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Estimated property. 
		///		
		/// </summary>
		/// <value>This type is float</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsEstimatedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Double? Estimated
		{
			get
			{
				return this._estimated; 
			}
			set
			{
				if (_estimated == value && Estimated != null )
					return;
					
				this._estimated = value;
				this._isDirty = true;
				
				OnPropertyChanged("Estimated");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Actual property. 
		///		
		/// </summary>
		/// <value>This type is float</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsActualNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Double? Actual
		{
			get
			{
				return this._actual; 
			}
			set
			{
				if (_actual == value && Actual != null )
					return;
					
				this._actual = value;
				this._isDirty = true;
				
				OnPropertyChanged("Actual");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserName
		{
			get
			{
				return this._userName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserName does not allow null values.");
				if (_userName == value)
					return;
					
				this._userName = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UpdatedUserID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 UpdatedUserId
		{
			get
			{
				return this._updatedUserId; 
			}
			set
			{
				if (_updatedUserId == value)
					return;
					
				this._updatedUserId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UpdatedUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DIESubmitDateOnly property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DieSubmitDateOnly
		{
			get
			{
				return this._dieSubmitDateOnly; 
			}
			set
			{
				if (_dieSubmitDateOnly == value)
					return;
					
				this._dieSubmitDateOnly = value;
				this._isDirty = true;
				
				OnPropertyChanged("DieSubmitDateOnly");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "HomeDIERequest"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed HomeDieRequestBase Entity 
		///</summary>
		public virtual HomeDieRequestBase Copy()
		{
			//shallow copy entity
			HomeDieRequest copy = new HomeDieRequest();
				copy.DieName = this.DieName;
				copy.DieRequestId = this.DieRequestId;
				copy.DieTag = this.DieTag;
				copy.DieDescription = this.DieDescription;
				copy.UpdateUserId = this.UpdateUserId;
				copy.ProjectId = this.ProjectId;
				copy.DieDateSubmit = this.DieDateSubmit;
				copy.DieNameStatus = this.DieNameStatus;
				copy.DieTypeName = this.DieTypeName;
				copy.PriorityDieRequestName = this.PriorityDieRequestName;
				copy.Color = this.Color;
				copy.ColorName = this.ColorName;
				copy.DieStatus = this.DieStatus;
				copy.UpdateTime = this.UpdateTime;
				copy.UpdatedUsername = this.UpdatedUsername;
				copy.TargetDate = this.TargetDate;
				copy.Estimated = this.Estimated;
				copy.Actual = this.Actual;
				copy.UserName = this.UserName;
				copy.UpdatedUserId = this.UpdatedUserId;
				copy.DieSubmitDateOnly = this.DieSubmitDateOnly;
			copy.AcceptChanges();
			return (HomeDieRequest)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="HomeDieRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(HomeDieRequestBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="HomeDieRequestBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="HomeDieRequestBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="HomeDieRequestBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(HomeDieRequestBase Object1, HomeDieRequestBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.DieName != null && Object2.DieName != null )
			{
				if (Object1.DieName != Object2.DieName)
					equal = false;
			}
			else if (Object1.DieName == null ^ Object1.DieName == null )
			{
				equal = false;
			}
			if (Object1.DieRequestId != Object2.DieRequestId)
				equal = false;
			if (Object1.DieTag != null && Object2.DieTag != null )
			{
				if (Object1.DieTag != Object2.DieTag)
					equal = false;
			}
			else if (Object1.DieTag == null ^ Object1.DieTag == null )
			{
				equal = false;
			}
			if (Object1.DieDescription != null && Object2.DieDescription != null )
			{
				if (Object1.DieDescription != Object2.DieDescription)
					equal = false;
			}
			else if (Object1.DieDescription == null ^ Object1.DieDescription == null )
			{
				equal = false;
			}
			if (Object1.UpdateUserId != null && Object2.UpdateUserId != null )
			{
				if (Object1.UpdateUserId != Object2.UpdateUserId)
					equal = false;
			}
			else if (Object1.UpdateUserId == null ^ Object1.UpdateUserId == null )
			{
				equal = false;
			}
			if (Object1.ProjectId != null && Object2.ProjectId != null )
			{
				if (Object1.ProjectId != Object2.ProjectId)
					equal = false;
			}
			else if (Object1.ProjectId == null ^ Object1.ProjectId == null )
			{
				equal = false;
			}
			if (Object1.DieDateSubmit != null && Object2.DieDateSubmit != null )
			{
				if (Object1.DieDateSubmit != Object2.DieDateSubmit)
					equal = false;
			}
			else if (Object1.DieDateSubmit == null ^ Object1.DieDateSubmit == null )
			{
				equal = false;
			}
			if (Object1.DieNameStatus != null && Object2.DieNameStatus != null )
			{
				if (Object1.DieNameStatus != Object2.DieNameStatus)
					equal = false;
			}
			else if (Object1.DieNameStatus == null ^ Object1.DieNameStatus == null )
			{
				equal = false;
			}
			if (Object1.DieTypeName != null && Object2.DieTypeName != null )
			{
				if (Object1.DieTypeName != Object2.DieTypeName)
					equal = false;
			}
			else if (Object1.DieTypeName == null ^ Object1.DieTypeName == null )
			{
				equal = false;
			}
			if (Object1.PriorityDieRequestName != null && Object2.PriorityDieRequestName != null )
			{
				if (Object1.PriorityDieRequestName != Object2.PriorityDieRequestName)
					equal = false;
			}
			else if (Object1.PriorityDieRequestName == null ^ Object1.PriorityDieRequestName == null )
			{
				equal = false;
			}
			if (Object1.Color != null && Object2.Color != null )
			{
				if (Object1.Color != Object2.Color)
					equal = false;
			}
			else if (Object1.Color == null ^ Object1.Color == null )
			{
				equal = false;
			}
			if (Object1.ColorName != null && Object2.ColorName != null )
			{
				if (Object1.ColorName != Object2.ColorName)
					equal = false;
			}
			else if (Object1.ColorName == null ^ Object1.ColorName == null )
			{
				equal = false;
			}
			if (Object1.DieStatus != null && Object2.DieStatus != null )
			{
				if (Object1.DieStatus != Object2.DieStatus)
					equal = false;
			}
			else if (Object1.DieStatus == null ^ Object1.DieStatus == null )
			{
				equal = false;
			}
			if (Object1.UpdateTime != null && Object2.UpdateTime != null )
			{
				if (Object1.UpdateTime != Object2.UpdateTime)
					equal = false;
			}
			else if (Object1.UpdateTime == null ^ Object1.UpdateTime == null )
			{
				equal = false;
			}
			if (Object1.UpdatedUsername != null && Object2.UpdatedUsername != null )
			{
				if (Object1.UpdatedUsername != Object2.UpdatedUsername)
					equal = false;
			}
			else if (Object1.UpdatedUsername == null ^ Object1.UpdatedUsername == null )
			{
				equal = false;
			}
			if (Object1.TargetDate != null && Object2.TargetDate != null )
			{
				if (Object1.TargetDate != Object2.TargetDate)
					equal = false;
			}
			else if (Object1.TargetDate == null ^ Object1.TargetDate == null )
			{
				equal = false;
			}
			if (Object1.Estimated != null && Object2.Estimated != null )
			{
				if (Object1.Estimated != Object2.Estimated)
					equal = false;
			}
			else if (Object1.Estimated == null ^ Object1.Estimated == null )
			{
				equal = false;
			}
			if (Object1.Actual != null && Object2.Actual != null )
			{
				if (Object1.Actual != Object2.Actual)
					equal = false;
			}
			else if (Object1.Actual == null ^ Object1.Actual == null )
			{
				equal = false;
			}
			if (Object1.UserName != Object2.UserName)
				equal = false;
			if (Object1.UpdatedUserId != Object2.UpdatedUserId)
				equal = false;
			if (Object1.DieSubmitDateOnly != null && Object2.DieSubmitDateOnly != null )
			{
				if (Object1.DieSubmitDateOnly != Object2.DieSubmitDateOnly)
					equal = false;
			}
			else if (Object1.DieSubmitDateOnly == null ^ Object1.DieSubmitDateOnly == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(HomeDieRequest entity, string propertyName)
		{
			switch (propertyName)
			{
				case "DieName":
					return entity.DieName;
				case "DieRequestId":
					return entity.DieRequestId;
				case "DieTag":
					return entity.DieTag;
				case "DieDescription":
					return entity.DieDescription;
				case "UpdateUserId":
					return entity.UpdateUserId;
				case "ProjectId":
					return entity.ProjectId;
				case "DieDateSubmit":
					return entity.DieDateSubmit;
				case "DieNameStatus":
					return entity.DieNameStatus;
				case "DieTypeName":
					return entity.DieTypeName;
				case "PriorityDieRequestName":
					return entity.PriorityDieRequestName;
				case "Color":
					return entity.Color;
				case "ColorName":
					return entity.ColorName;
				case "DieStatus":
					return entity.DieStatus;
				case "UpdateTime":
					return entity.UpdateTime;
				case "UpdatedUsername":
					return entity.UpdatedUsername;
				case "TargetDate":
					return entity.TargetDate;
				case "Estimated":
					return entity.Estimated;
				case "Actual":
					return entity.Actual;
				case "UserName":
					return entity.UserName;
				case "UpdatedUserId":
					return entity.UpdatedUserId;
				case "DieSubmitDateOnly":
					return entity.DieSubmitDateOnly;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as HomeDieRequest, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- DieName: {0}{21}- DieRequestId: {1}{21}- DieTag: {2}{21}- DieDescription: {3}{21}- UpdateUserId: {4}{21}- ProjectId: {5}{21}- DieDateSubmit: {6}{21}- DieNameStatus: {7}{21}- DieTypeName: {8}{21}- PriorityDieRequestName: {9}{21}- Color: {10}{21}- ColorName: {11}{21}- DieStatus: {12}{21}- UpdateTime: {13}{21}- UpdatedUsername: {14}{21}- TargetDate: {15}{21}- Estimated: {16}{21}- Actual: {17}{21}- UserName: {18}{21}- UpdatedUserId: {19}{21}- DieSubmitDateOnly: {20}{21}", 
				(this.DieName == null) ? string.Empty : this.DieName.ToString(),
			     
				this.DieRequestId,
				(this.DieTag == null) ? string.Empty : this.DieTag.ToString(),
			     
				(this.DieDescription == null) ? string.Empty : this.DieDescription.ToString(),
			     
				(this.UpdateUserId == null) ? string.Empty : this.UpdateUserId.ToString(),
			     
				(this.ProjectId == null) ? string.Empty : this.ProjectId.ToString(),
			     
				(this.DieDateSubmit == null) ? string.Empty : this.DieDateSubmit.ToString(),
			     
				(this.DieNameStatus == null) ? string.Empty : this.DieNameStatus.ToString(),
			     
				(this.DieTypeName == null) ? string.Empty : this.DieTypeName.ToString(),
			     
				(this.PriorityDieRequestName == null) ? string.Empty : this.PriorityDieRequestName.ToString(),
			     
				(this.Color == null) ? string.Empty : this.Color.ToString(),
			     
				(this.ColorName == null) ? string.Empty : this.ColorName.ToString(),
			     
				(this.DieStatus == null) ? string.Empty : this.DieStatus.ToString(),
			     
				(this.UpdateTime == null) ? string.Empty : this.UpdateTime.ToString(),
			     
				(this.UpdatedUsername == null) ? string.Empty : this.UpdatedUsername.ToString(),
			     
				(this.TargetDate == null) ? string.Empty : this.TargetDate.ToString(),
			     
				(this.Estimated == null) ? string.Empty : this.Estimated.ToString(),
			     
				(this.Actual == null) ? string.Empty : this.Actual.ToString(),
			     
				this.UserName,
				this.UpdatedUserId,
				(this.DieSubmitDateOnly == null) ? string.Empty : this.DieSubmitDateOnly.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the HomeDieRequest columns.
	/// </summary>
	[Serializable]
	public enum HomeDieRequestColumn
	{
		/// <summary>
		/// DIEName : 
		/// </summary>
		[EnumTextValue("DIEName")]
		[ColumnEnum("DIEName", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		DieName,
		/// <summary>
		/// DIERequestID : 
		/// </summary>
		[EnumTextValue("DIERequestID")]
		[ColumnEnum("DIERequestID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DieRequestId,
		/// <summary>
		/// DIETag : 
		/// </summary>
		[EnumTextValue("DIETag")]
		[ColumnEnum("DIETag", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		DieTag,
		/// <summary>
		/// DIEDescription : 
		/// </summary>
		[EnumTextValue("DIEDescription")]
		[ColumnEnum("DIEDescription", typeof(System.String), System.Data.DbType.String, false, false, true)]
		DieDescription,
		/// <summary>
		/// UpdateUserID : 
		/// </summary>
		[EnumTextValue("UpdateUserID")]
		[ColumnEnum("UpdateUserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdateUserId,
		/// <summary>
		/// ProjectID : 
		/// </summary>
		[EnumTextValue("ProjectID")]
		[ColumnEnum("ProjectID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProjectId,
		/// <summary>
		/// DIEDateSubmit : 
		/// </summary>
		[EnumTextValue("DIEDateSubmit")]
		[ColumnEnum("DIEDateSubmit", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DieDateSubmit,
		/// <summary>
		/// DIENameStatus : 
		/// </summary>
		[EnumTextValue("DIENameStatus")]
		[ColumnEnum("DIENameStatus", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		DieNameStatus,
		/// <summary>
		/// DIETypeName : 
		/// </summary>
		[EnumTextValue("DIETypeName")]
		[ColumnEnum("DIETypeName", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		DieTypeName,
		/// <summary>
		/// PriorityDIERequestName : 
		/// </summary>
		[EnumTextValue("PriorityDIERequestName")]
		[ColumnEnum("PriorityDIERequestName", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		PriorityDieRequestName,
		/// <summary>
		/// Color : 
		/// </summary>
		[EnumTextValue("Color")]
		[ColumnEnum("Color", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 50)]
		Color,
		/// <summary>
		/// ColorName : 
		/// </summary>
		[EnumTextValue("ColorName")]
		[ColumnEnum("ColorName", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		ColorName,
		/// <summary>
		/// DIEStatus : 
		/// </summary>
		[EnumTextValue("DIEStatus")]
		[ColumnEnum("DIEStatus", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DieStatus,
		/// <summary>
		/// UpdateTime : 
		/// </summary>
		[EnumTextValue("UpdateTime")]
		[ColumnEnum("UpdateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateTime,
		/// <summary>
		/// UpdatedUsername : 
		/// </summary>
		[EnumTextValue("UpdatedUsername")]
		[ColumnEnum("UpdatedUsername", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UpdatedUsername,
		/// <summary>
		/// TargetDate : 
		/// </summary>
		[EnumTextValue("TargetDate")]
		[ColumnEnum("TargetDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TargetDate,
		/// <summary>
		/// Estimated : 
		/// </summary>
		[EnumTextValue("Estimated")]
		[ColumnEnum("Estimated", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Estimated,
		/// <summary>
		/// Actual : 
		/// </summary>
		[EnumTextValue("Actual")]
		[ColumnEnum("Actual", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Actual,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		UserName,
		/// <summary>
		/// UpdatedUserID : 
		/// </summary>
		[EnumTextValue("UpdatedUserID")]
		[ColumnEnum("UpdatedUserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UpdatedUserId,
		/// <summary>
		/// DIESubmitDateOnly : 
		/// </summary>
		[EnumTextValue("DIESubmitDateOnly")]
		[ColumnEnum("DIESubmitDateOnly", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		DieSubmitDateOnly
	}//End enum

} // end namespace
